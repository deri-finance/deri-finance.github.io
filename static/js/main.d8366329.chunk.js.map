{"version":3,"sources":["lib/web3js/v2/config/oracle.js","lib/web3js/factory/web3.js","lib/web3js/v2/config/broker.js","lib/web3js/config/database.js","lib/web3js/v2/utils/network.js","lib/web3js/v2/utils/chain.js","utils/LoadableComponent.js","lib/web3js/v2/factory.js","lib/web3js/config/rest_server.js","lib/web3js/config/chain.js","lib/web3js/config/contract.js","lib/web3js/utils.js","lib/web3js/v2/calculation/position.js","lib/web3js/v2/calculation/funding_rate.js","lib/web3js/v2/calculation/liquidity.js","lib/web3js/v2/api/mining_query_api.js","lib/web3js/v2/api/mining_transaction_api.js","lib/web3js/v2/api/api_globals.js","lib/web3js/v2/api/trade_query_api.js","lib/web3js/v2/api/trade_history_api.js","lib/web3js/v2/api/trade_transaction_api.js","lib/web3js/v2/api/broker_api.js","lib/web3js/indexV2.js","lib/web3js/api/walletApi.js","lib/web3js/api/lpPoolApi.js","model/Config.js","lib/web3js/api_wrapper/config_api.js","lib/web3js/api_wrapper/mining_query_api.js","lib/web3js/api_wrapper/mining_transaction_api.js","lib/web3js/api_wrapper/trade_query_api.js","lib/web3js/api_wrapper/trade_transaction_api.js","lib/web3js/api_wrapper/trade_history_api.js","lib/web3js/v2/utils/convert.js","lib/web3js/v2/utils/oracle.js","lib/web3js/calculation/fundingRate.js","lib/web3js/calculation/index.js","lib/web3js/api/contractTransactionApi.js","lib/web3js/api/databaseApi.js","lib/web3js/api/tradeHistoryApi.js","lib/web3js/api/restApi.js","lib/web3js/api/contractTransactionApiV2.js","utils/utils.js","lib/web3js/api/apiGlobals.js","lib/web3js/api/contractQueryApi.js","lib/web3js/v2/contract/contract_base.js","lib/web3js/v2/contract/abis.js","lib/web3js/v2/contract/perpetual_pool.js","lib/web3js/v2/contract/perpetual_pool_router.js","lib/web3js/v2/contract/b_token.js","lib/web3js/v2/contract/l_token.js","lib/web3js/v2/contract/p_token.js","lib/web3js/v2/contract/woo_oracle.js","lib/web3js/v2/contract/chainlink_oracle.js","lib/web3js/v2/contract/wrapped_oracle.js","lib/web3js/v2/contract/broker_manager.js","../lang).)*/.json$","lib/web3js/v2/config/pool.js","lib/web3js/v2/config/chain.js","App.js","model/Intl.js","model/Wallet.js","model/Oracle.js","model/Position.js","model/Contract.js","model/History.js","model/Trading.js","model/Version.js","index.js","lib/web3js/api/slpPoolApi.js","lib/web3js/api/clp2PoolApi.js","lib/web3js/api/clpPoolApi.js","lib/web3js/v2/config/config.js","lib/web3js/contract/contract.js","lib/web3js/contract/perpetual_pool.js","lib/web3js/contract/bToken.js","lib/web3js/contract/pToken.js","lib/web3js/contract/lToken.js","lib/web3js/contract/database_base.js","lib/web3js/contract/database.js","lib/web3js/contract/database_wormhole.js","lib/web3js/contract/database_airdrop.js","lib/web3js/contract/mining_vault_pool.js","lib/web3js/contract/mining_vault_router.js","lib/web3js/contract/slp_pool.js","lib/web3js/contract/clp_pool.js","lib/web3js/contract/clp2_pool.js","lib/web3js/contract/deri.js","lib/web3js/contract/wormhole.js","lib/web3js/factory/contracts.js","lib/web3js/v2/utils/validate.js","lib/web3js/config/env.js"],"names":["getOracleConfigList","getConfig","oracle","getOracleConfig","chainId","symbol","filteredByChainId","filter","c","length","Error","metaMaskWeb3","web3Instance","web3","undefined","window","ethereum","Web3","web3Factory","web3InstanceMap","a","Object","keys","includes","console","log","getChainProviderUrl","providerUrl","providers","HttpProvider","getBrokerConfigList","brokerManager","getBrokerConfig","getDBProviderUrlsConfig","getDBAddressConfig","env","useProductionDB","getDBWormholeAddressConfig","getDBAirdropAddressConfig","shuffleArray","array","i","j","Math","floor","random","temp","getBlockNumber","url","res","blockNumber","duration","Number","MAX_SAFE_INTEGER","startTime","Date","now","eth","getLatestRPCServer","urls","promises","push","Promise","all","blockNumbers","sort","b","latestBlockNumber","reduce","index","findIndex","startsWith","async","normalizeChainId","getChainProviderUrls","getDailyBlockNumber","getDailyBlockNumberConfig","parseInt","LoadingPage","NProgress","start","done","React","Component","LoadableComponent","component","Loadable","loader","loading","get","perpetualPoolFactory","instanceMap","address","useInfura","key","PerpetualPool","perpetualPoolRouterFactory","PerpetualPoolRouter","bTokenFactory","BToken","lTokenFactory","LToken","pTokenFactory","PToken","oracleFactory","decimal","ChainlinkOracle","WrappedOracle","WooOracle","brokerManagerFactory","BrokerManager","getRestServerConfig","process","getRedisWorkerQueneConfig","getChainIds","ChainProviderUrls","provider_urls","getChainProviderUrlsConfig","getContractAddressConfig","pool","bToken","pToken","lToken","dToken","MiningVault","initialBlock","bTokenSymbol","unit","version","getSlpContractAddressConfig","getClpContractAddressConfig","getClp2ContractAddressConfig","getLpContractAddressConfig","type","getMiningVaultRouterContractAddress","filteredConfig","MiningVaultRouter","getDeriContractAddressConfig","Deri","Wormhole","chainBlockNumberList","accum","BigNumber","config","DECIMAL_PLACES","ROUNDING_MODE","ROUND_DOWN","EXPONENTIAL_AT","bg","value","base","times","repeat","div","max","value1","value2","gte","min","lte","toChecksumAddress","utils","hexToString","hexToUtf8","hexToNumber","hexToNumberString","naturalToDeri","toFixed","naturalWithPercentage","sd","toString","deriToNatural","deriToString","deriToBool","toNumber","hasInvalidArgsValue","args","some","isNaN","err","MAX_VALUE","getNetworkName","poolNetwork","getPoolContractAddress","poolAddress","DeriEnv","p","bTokenAddress","pTokenAddress","lTokenAddress","dTokenAdress","MinningVaultAddress","getMiningVaultContractAddress","pools","getSlpContractAddress","getClp2ContractAddress","getClpContractAddress","getLpContractAddress","getDeriContractAddress","deriAddress","wormholeAddress","getOracleInfo","addSymbolParam","getOracleUrl","retry","fetch","mode","cache","ok","json","getBTCUSDPrice","responseJson","price","format","bigNumber","toFormat","replaceAll","chainIds","calculateEntryPrice","volume","cost","multiplier","eq","calculateLiquidationPrice","margin","dynamicCost","minMaintenanceMarginRatio","tmp","minus","gt","plus","isOrderValid","marginHeld","liquidity","liquidityUsed","minMargin","success","error","calculateFundingRate","tradersNetVolume","fundingRateCoefficient","validateArgs","processFundingRate","fundingRate","annualBlockCount","calculateBTokenDynamicEquities","bTokens","discount","pnl","isBToken0RatioValid","bTokenId","amount","bToken0Ratio","totalDynamicEquity","dynamicEquity","lt","isPoolMarginRatioValid","userLiquidity","symbols","poolMarginRatio","totalCost","s","tradersNetCost","abs","calculateMaxRemovableLiquidity","restLiquidity","minPoolMarginRatio","getLiquidityInfo","accountAddress","getPoolConfig2","perpetualPool","bTokenIdList","getBTokenIdList","symbolIdList","getSymbolIdList","getParameters","getBToken","getAsset","parameterInfo","bTokenInfo","lTokenAsset","getSymbol","totalPnl","poolLiquidity","lastCumulativePnl","maxRemovableShares","approximatePnl","cumulativePnl","shares","getPoolLiquidity","db","databaseFactory","getValues","catch","getPoolInfoApy","apy","volume1h","volume24h","addLiquidity","routerAddress","router","perpetualPoolRouter","minBToken0Ratio","validation","tx","transaction","removeLiquidity","isMaximum","priceCache","_prices","symbolId","split","set","val","parseFloat","timestamp","fundingRateCache","resourceMap","contractAddress","resource","getSpecification","symbolInfo","feeRatio","minInitialMarginRatio","minLiquidationReward","maxLiquidationReward","liquidationCutRatio","protocolFeeCollectRatio","bSymbol","getPositionInfo","symbolConfigList","getSymbolList","map","symbolList","getPosition","getMargins","getPositions","positionInfo","margins","positions","getOraclePrice","symbolPrices","marginHeldBySymbol","unrealizedPnl","unrealizedPnlList","averageEntryPrice","liquidationPrice","getWalletBalance","balanceOf","balance","isUnlocked","getEstimatedFee","_getFundingRate","getEstimatedMargin","leverage","getFundingRateCache","promiseList","bTokenInfoList","fundingRatePerBlock","liquidityUsedInAmount","getFundingRate","fundingRate0","getEstimatedFundingRate","newNetVolume","fundingRate1","getLiquidityUsed","liquidityUsed0","getEstimatedLiquidityUsed","liquidityUsed1","getPoolBTokensBySymbolId","bTokenList","getBTokenList","resultList","walletBalance","availableBalance","fetchJson","resp","processTradeEvent","info","txHash","tradeVolume","_getTimeStamp","timeStamp","direction","time","transactionFee","_calculateFee","notional","transactionHash","getTradeHistoryOnline","fromBlock","_getBlockInfo","toBlock","filters","owner","_getPastEvents","number","events","result","returnValues","item","unshift","getTradeHistory","tradeHistory","tradeFromBlock","data","tradeHistoryBlock","Array","isArray","trim","tradeHistoryOnline","concat","unlock","depositMargin","addMargin","withdrawMargin","removeMargin","tradeWithMargin","newVolume","orderValidation","trade","closePosition","negated","setBroker","brokerAddress","normalizeAddress","brokerManagerAddress","connectWallet","handleChainChanged","handleAccountChanged","request","method","accounts","account","on","location","reload","getUserWalletBalance","walletAddress","getBalance","fromWei","getLpLiquidityInfo","getSlpLiquidityInfo","getClpLiquidityInfo","getClp2LiquidityInfo","addLpLiquidity","addSlpLiquidity","addClpLiquidity","addClp2Liquidity","removeLpLiquidity","removeSlpLiquidity","removeClpLiquidity","removeClp2Liquidity","isLpUnlocked","isSlpUnlocked","isClpUnlocked","isClp2Unlocked","unlockLp","unlockSlp","unlockClp","unlockClp2","getLpWalletBalance","getSlpWalletBalance","getClpWalletBalance","getClp2WalletBalance","Config","makeObservable","this","observable","setAll","action","current","configs","isV2","total","cur","getContractAddressConfig2","require","getPoolConfigListV2","getPoolConfigList","getLiquidityInfo2","getLiquidityInfoV2","getPoolLiquidity2","getPoolLiquidityV2","getPoolInfoApy2","getPoolInfoApyV2","addLiquidity2","addLiquidityV2","removeLiquidity2","removeLiquidityV2","getSpecification2","getSpecificationV2","getPositionInfo2","getPositionInfoV2","getWalletBalance2","getWalletBalanceV2","isDeriUnlocked","isUnlocked2","isUnlockedV2","getEstimatedFee2","getEstimatedFeeV2","getFundingRate2","getFundingRateV2","getEstimatedFundingRate2","getEstimatedFundingRateV2","getLiquidityUsed2","getLiquidityUsedV2","getEstimatedLiquidityUsed2","getEstimatedLiquidityUsedV2","unlockDeri","unlock2","unlockV2","depositMargin2","depositMarginV2","withdrawMargin2","withdrawMarginV2","tradeWithMargin2","tradeWithMarginV2","closePosition2","closePositionV2","getTradeHistory2","getTradeHistoryV2","numberToHex","getPrice","calculateLiquidityUsed","calculateShareValue","lTokenTotalSupply","calculateMaxRemovableShares","lTokenBalance","shareValue","removable","calculateMarginHeld","calculatePnl","calculateMaxWithdrawMargin","held","poolMaxVolume","message","pPool","maxWithdrawMargin","_transactPool","totalSupply","getStateValues","mintDToken","getUserInfoAll","userInfo","deadline","nonce","v","r","valid","miningVaultAddress","miningVault","miningVaultPoolFactory","freeze","toChainId","wormhole","wormholeFactory","mintDeri","databaseWormhole","databaseWormholeFactory","signature","fromChainId","fromWormhole","fromNonce","deri","deriFactory","mintAirdrop","getUserInfoAllForAirDrop","v1","r1","s1","v2","r2","s2","miningVaultRouter","miningVaultRouterFactory","mint","getUserInfo","userAddress","getUserInfoHarvest","harvestLp","harvestTrade","lp","getUserInfoTotal","userInfoHarvest","userInfoTotal","assign","getLpPoolInfoApy","apy2","getUserInfoInPool","databaseAirdropFactory","baseToken","processLiquidateEvent","national","getLiquidateHistoryOnline","getHttpBase","fetchRestApi","path","getFundingRateCache2","liquidateFromBlock","liquidateHistoryBlock","liquidateHistoryOnline","wsOnPromise","ws","event","resolve","JSON","parse","sendTradeTxToWorkerQuene","methodCall","wsInstance","getOrSet","send","res2","addSlpLiquidity2","removeSlpLiquidity2","addClpLiquidity2","removeClpLiquidity2","addClp2Liquidity2","removeClp2Liquidity2","versionKey","formatAddress","substr","formatBalance","eqInNumber","str1","str2","isLP","isSushiLP","isCakeLP","sessionStorageKey","storeVersion","sessionStorage","setItem","restoreVersion","getItem","storeConfig","stringify","getConfigFromStore","storeChain","chainInfo","storeLocale","locale","restoreLocale","getFormatSymbol","curChain","code","toUpperCase","_accountAddress","_price","_interval","_update","update","self","setInterval","clear","clearInterval","PerpetualPoolParametersCache","_parameters","_ws","io","transports","id","parameters","getUserWormholeSignature","getDeriBalance","ContractBase","constructor","contractAbi","contract","Contract","_init","methods","call","gas","estimateGas","from","_getTransactionReceipt","_transactionReceipt","reject","getTransactionReceipt","receipt","setTimeout","status","errorMessage","_estimatedGas","txRaw","to","encodeABI","params","perpetualPoolAbi","perpetualPoolRouterAbi","bTokenAbi","lTokenAbi","pTokenAbi","wooOracleAbi","chainlinkOracleAbi","wrappedOracleAbi","brokerManagerAbi","bTokenCount","symbolCount","protocolFeeCollector","protocolFeeAccrued","getLengths","getAddresses","_call","decimals0","swapperAddress","oracleAddress","decimals","cumulativeFundingRate","getBlock","eventName","getPastEvents","es","e","_transact","MAX_INT256","priceInfos","_balanceOf","allowance","MAX_UINT256","processAsset","processPosition","lastCumulativeFundingRate","answer","super","webpackContext","req","webpackContextResolve","__webpack_require__","o","module","exports","flat","expendPoolConfig","getFilteredPoolConfigList","poolConfigList","check","getPoolConfig","_getPoolConfig","find","defaultBToken","defaultSymbol","broker","DesktopApp","MobileApp","inject","observer","intl","isBrowser","isMobile","Wallet","detail","supportWeb3","isConnected","approve","approved","connect","loadWalletBalance","wallet","supported","setDetail","makeAutoObservable","supportV2","computed","supportV1","supportAllVersion","supportChain","isApproved","Oracle","timeType","kData","paused","listeners","already","setIndex","WebSocket","withCredentials","emit","initWebSocket","obj","low","high","open","close","time_type","unsubscribeBars","setSymbol","setTimeType","listener","callback","history","el","setPause","Position","spec","mockPositionInfo","position","interval","load","setInfo","History","forEach","lang","page","toLowerCase","test","pageName","setLocale","dict","localeLabel","language","navigator","prefix","supportedCatalog","Trading","slideIncrementMargin","userSelectedDirection","setWallet","setConfigs","setConfig","setContract","setPosition","setVolume","setUserSelectedDirection","setSupportChain","setFundingRate","setHistory","setSlideMargin","fundingRateTip","volumeDisplay","isNegative","isPositive","configInfo","contractInfo","historyInfo","defaultConfig","getDefaultConfig","setCurrent","loadByConfig","changed","isV1","pause","store","resume","symbolChanged","addListener","loadFundingRate","fromStore","getFromStore","pos","syncFundingRate","setPaused","support","currentSymbolMarginHeld","otherMarginHeld","incrementMarginHeld","totalMarginHeld","dynBalance","available","exchanged","multipliedBy","totalContractValue","Intl","Version","notSave","trading","ReactDOM","render","StrictMode","document","getElementById","slpPool","slpPoolFactory","getLiquidity","bTokenBalance","clp2Pool","clp2PoolFactory","clpPool","clpPoolFactory","processConfig","jsonConfig","validateObjectKeyExist","validateIsArray","prop","getJsonConfig","MAX_GAS_AMOUNT","isProvider","POOL_ABI","defaultValue","cumuFundingRate","cumuFundingRateBlock","minAddLiquidity","redemptionFeeRatio","priceDelayAllowance","signed","args1","args2","CONTRACT_ABI","BTokenContract","_balance","PTokenContract","lastCumuFundingRate","lastUpdateTimestamp","LTokenContract","DatabaseBaseContract","updateProviderUrl","DB_CONTRACT_ABI","DatabaseContract","keyArray","DatabaseWormholeContract","DatabaseAirdropContract","MiningVaultPool","SlpPool","ClpPool","Clp2Pool","DeriContract","useProvider","WormholeContract","toWormholeAddress","databaseInstanceMap","database","perpetualPoolInstanceMap","bTokenInstanceMap","pTokenInstanceMap","lTokenInstanceMap","mVaultInstanceMap","mVault","slpPoolInstanceMap","clpPoolInstanceMap","clp2PoolInstanceMap","deriInstanceMap","wormholeInstanceMap","every","keyList","valName","_deriEnv"],"mappings":"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","file":"static/js/main.d8366329.chunk.js","sourcesContent":["import { getConfig } from './config';\n\nexport const getOracleConfigList = () => {\n  const config = getConfig()\n  return config.oracle\n};\n\nexport const getOracleConfig = (chainId, symbol) => {\n  const filteredByChainId = getOracleConfigList().filter((c) =>\n    symbol\n      ? c.chainId === chainId && c.symbol === symbol\n      : c.chainId === chainId\n  );\n  if (filteredByChainId.length > 0) {\n    if (symbol) {\n      return filteredByChainId[0];\n    } else {\n      return filteredByChainId;\n    }\n  }\n  throw new Error(`getOracleConfig(): invalid chainId(${chainId}) or symbol(${symbol}).`);\n};\n","import Web3 from 'web3';\nimport { getChainProviderUrl } from '../utils';\n\nexport const metaMaskWeb3 = (function () {\n  let web3Instance = null;\n  return () => {\n    if (web3Instance !== null) {\n      return web3Instance;\n    }\n    let web3;\n    if (typeof window.ethereum !== undefined) {\n      web3 = new Web3(window.ethereum);\n    } else {\n      // console.log(\"Please install MetaMask first\")\n      throw new Error('Please install MetaMask first');\n    }\n    web3Instance = web3;\n    return web3;\n  };\n})();\n\nexport const web3Factory = (function () {\n  const web3InstanceMap = {};\n  return async(chainId) => {\n    if (Object.keys(web3InstanceMap).includes(chainId)) {\n      return web3InstanceMap[chainId];\n    }\n    if (['1', '3', '42'].includes(chainId)) {\n      console.log(\n        `==== web3Factory(${chainId}), please caution the access limits ===`\n      );\n    }\n    const providerUrl = await getChainProviderUrl(chainId);\n    const web3 = new Web3(new Web3.providers.HttpProvider(providerUrl));\n    web3InstanceMap[chainId] = web3;\n    return web3;\n  };\n})();\n","import { getConfig } from './config';\n\nexport const getBrokerConfigList = () => {\n  const config = getConfig()\n  return config.brokerManager\n};\n\nexport const getBrokerConfig = (chainId) => {\n  const filteredByChainId = getBrokerConfigList().filter((c) =>c.chainId === chainId);\n  if (filteredByChainId.length > 0) {\n    return filteredByChainId[0];\n  }\n  throw new Error(`getBrokerConfig(): invalid chainId(${chainId}).`);\n};\n","export const getDBProviderUrlsConfig = () => [\n  //'https://data-seed-prebsc-1-s1.binance.org:8545/',\n  'https://data-seed-prebsc-1-s2.binance.org:8545/',\n  'https://data-seed-prebsc-1-s3.binance.org:8545/',\n  'https://data-seed-prebsc-2-s1.binance.org:8545/',\n  'https://data-seed-prebsc-2-s2.binance.org:8545/',\n  'https://data-seed-prebsc-2-s3.binance.org:8545/',\n];\n\nexport const getDBAddressConfig = (env = 'dev', useProductionDB) => {\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\n    // for production\n    return '0x824B6238EdCbaCCAF83C3F60C0cEB38bEb7C9e89';\n  }\n  // for test\n  return '0x7C1267188379f57d92e640E519151229E1eA5565';\n};\n\nexport const getDBWormholeAddressConfig = (env = 'dev', useProductionDB) => {\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\n    // for production\n    return '0xd8137F05c1F432A80525053c473d0e286c4F46f0';\n  }\n  // for test\n  return '0x3c9118C7f9f4ef0Ab5333cD710922dBCCC2d870d';\n};\n\nexport const getDBAirdropAddressConfig = (env = 'dev', useProductionDB) => {\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\n    // for production\n    return '0x35b2650eFb799DF4696b292D11b4770a0fFaa7c7';\n  }\n  // for test\n  return '0x7C1267188379f57d92e640E519151229E1eA5565';\n};\n","import Web3 from 'web3';\n// == func\n// const np = () => {}\n// const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms))\n\nexport const fetchWithTimeout = (url, options = {}) => {\n  const { timeout = 1200, ...fetchOptions } = options\n\n  return Promise.race([\n    fetch(url, fetchOptions),\n    new Promise((resolve) => {\n      setTimeout(() => {\n        // reject(\n        //   new Error(\n        //     `Request for ${url} timed out after ${timeout} ms`,\n        //   ),\n        // )\n        resolve({timeout:true})\n      }, timeout)\n    }),\n  ])\n}\n\nexport const checkHttpServerIsAlive = async (url) => {\n  try {\n    const response = await fetch(url);\n    if (response.ok) {\n      return true;\n    }\n  } catch (err) {\n    if (!err.toString().includes('FetchError')) {\n      console.log(err);\n    }\n  }\n  return false;\n};\n\nconst shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n};\n\nexport const getAliveHttpServer = async (urls = []) => {\n  urls = shuffleArray(urls)\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    //console.log(url)\n    if (await checkHttpServerIsAlive(url)) {\n      return url;\n    }\n  }\n  throw new Error(`getAliveHttpServer(): No alive http server in ${urls}`);\n};\n\nconst getBlockNumber = async (url) => {\n  let res = { url: url, blockNumber: -1, duration: Number.MAX_SAFE_INTEGER,};\n  try {\n    const web3 = new Web3(new Web3.providers.HttpProvider(url))\n    const startTime = Date.now()\n    res.blockNumber = await web3.eth.getBlockNumber()\n    res.duration = Date.now() - startTime\n  } catch (err) {\n    console.log(`getBlockNumber(${url}) error: ${err}`)\n  }\n  return res\n};\n\nexport const getLatestRPCServer = async (urls = []) => {\n  urls = shuffleArray(urls)\n  let promises = []\n  for (let i = 0; i < urls.length; i++) {\n    promises.push(getBlockNumber(urls[i]));\n  }\n  let blockNumbers = await Promise.all(promises)\n  blockNumbers = blockNumbers.sort((a, b) => a.duration - b.duration)\n  // console.log('blockNumbers',  blockNumbers)\n  const latestBlockNumber = blockNumbers.reduce((a, b) => b.blockNumber !== -1 ? a > b.blockNumber ? a : b.blockNumber : a, 0)\n  const index = blockNumbers.findIndex((b) => b.blockNumber === latestBlockNumber);\n  const res = blockNumbers[index].url\n  // console.log(res)\n  if (res.startsWith('http')) {\n    return res\n  } else {\n    throw new Error(`getLatestRPCServer(): no alive RPC server in ${urls}`)\n  }\n};","import {\n  getChainProviderUrls,\n  getDailyBlockNumberConfig,\n} from '../config/chain';\nimport { normalizeChainId } from './validate';\nimport { getLatestRPCServer } from './network';\n\nexport const getChainProviderUrl = async (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const urls = getChainProviderUrls(chainId);\n  if (urls.length > 0) {\n   const url =  await getLatestRPCServer(urls);\n   // console.log('url', url)\n   return url\n  } else {\n    throw new Error(\n      `Cannot find the chain provider url with chainId: ${chainId}`\n    );\n  }\n};\nexport const getDailyBlockNumber = (chainId) => {\n  const blockNumbers = getDailyBlockNumberConfig();\n  if (blockNumbers[chainId]) {\n    return parseInt(blockNumbers[chainId]);\n  } else {\n    throw new Error(`Invalid annual block number with chainId: ${chainId}`);\n  }\n};\n","import React from 'react'\nimport Loadable from 'react-loadable'\nimport NProgress from 'nprogress'\nimport 'nprogress/nprogress.css'\n\nclass LoadingPage extends React.Component {\n  //类似github页面加载的那个加载条\n  componentWillMount(){\n    NProgress.start()\n  }\n  componentWillUnmount(){\n    NProgress.done()\n  }\n  render () {\n    return (\n      <div/>\n    )\n  }\n}\n\nconst LoadableComponent = (component) => {\n  return Loadable({\n    loader: component,\n    loading: ()=><LoadingPage/>\n  })\n}\n\nexport default LoadableComponent","import Web3 from 'web3';\nimport {\n  PerpetualPool,\n  PerpetualPoolRouter,\n  BToken,\n  LToken,\n  PToken,\n  WooOracle,\n  ChainlinkOracle,\n  WrappedOracle,\n  BrokerManager,\n} from './contract';\nimport { getChainProviderUrl } from './utils/chain';\n\nexport const metaMaskWeb3 = (function () {\n  let web3Instance = null;\n  return () => {\n    if (web3Instance !== null) {\n      return web3Instance;\n    }\n    if (typeof window.ethereum !== undefined) {\n      web3Instance = new Web3(window.ethereum);\n      return web3Instance;\n    } else {\n      // console.log(\"Please install MetaMask first\")\n      throw new Error('Please install MetaMask first');\n    }\n  };\n})();\n\nexport const web3Factory = (function () {\n  const web3InstanceMap = {};\n  return {\n    async get(chainId) {\n      if (Object.keys(web3InstanceMap).includes(chainId)) {\n        return web3InstanceMap[chainId];\n      }\n      if (['1', '3', '42'].includes(chainId)) {\n        console.log(\n          `==== web3Factory(${chainId}), please caution the access limits ===`\n        );\n      }\n      const providerUrl = await getChainProviderUrl(chainId);\n      web3InstanceMap[chainId] = new Web3(\n        new Web3.providers.HttpProvider(providerUrl)\n      );\n      return web3InstanceMap[chainId];\n    },\n  };\n})();\n\nexport const perpetualPoolFactory = (function () {\n  const instanceMap = {};\n  return (chainId, address, useInfura) => {\n    const key = useInfura ? `${address}.useInfura` : address;\n    if (Object.keys(instanceMap).includes(key)) {\n      return instanceMap[key];\n    } else {\n      instanceMap[key] = new PerpetualPool(chainId, address, useInfura);\n      return instanceMap[key];\n    }\n  };\n})();\n\nexport const perpetualPoolRouterFactory = (function () {\n  const instanceMap = {};\n  return (chainId, address, useInfura) => {\n    const key = useInfura ? `${address}.useInfura` : address;\n    if (Object.keys(instanceMap).includes(key)) {\n      return instanceMap[key];\n    } else {\n      instanceMap[key] = new PerpetualPoolRouter(chainId, address, useInfura);\n      return instanceMap[key];\n    }\n  };\n})();\n\nexport const bTokenFactory = (function () {\n  const instanceMap = {};\n  return (chainId, address, useInfura) => {\n    const key = useInfura ? `${address}.useInfura` : address;\n    if (Object.keys(instanceMap).includes(key)) {\n      return instanceMap[key];\n    } else {\n      instanceMap[key] = new BToken(chainId, address, useInfura);\n      return instanceMap[key];\n    }\n  };\n})();\n\nexport const lTokenFactory = (function () {\n  const instanceMap = {};\n  return (chainId, address, useInfura) => {\n    const key = useInfura ? `${address}.useInfura` : address;\n    if (Object.keys(instanceMap).includes(key)) {\n      return instanceMap[key];\n    } else {\n      instanceMap[key] = new LToken(chainId, address, useInfura);\n      return instanceMap[key];\n    }\n  };\n})();\n\nexport const pTokenFactory = (function () {\n  const instanceMap = {};\n  return (chainId, address, useInfura) => {\n    const key = useInfura ? `${address}.useInfura` : address;\n    if (Object.keys(instanceMap).includes(key)) {\n      return instanceMap[key];\n    } else {\n      instanceMap[key] = new PToken(chainId, address, useInfura);\n      return instanceMap[key];\n    }\n  };\n})();\n\nexport const oracleFactory = (function () {\n  const instanceMap = {};\n  return (chainId, address, symbol, decimal, useInfura) => {\n    const key = useInfura ? `${address}.useInfura` : address;\n    if (Object.keys(instanceMap).includes(key)) {\n      return instanceMap[key];\n    } else {\n      if (['80001'].includes(chainId)) {\n        instanceMap[key] = new ChainlinkOracle(\n          chainId,\n          address,\n          symbol,\n          decimal,\n          useInfura\n        );\n      } else if (['137'].includes(chainId)) {\n        instanceMap[key] = new WrappedOracle(chainId, address, symbol, decimal, useInfura);\n      } else {\n        instanceMap[key] = new WooOracle(chainId, address, symbol, decimal, useInfura);\n      }\n      return instanceMap[key];\n    }\n  };\n})();\n\nexport const brokerManagerFactory = (function () {\n  const instanceMap = {};\n  return (chainId, address, useInfura) => {\n    const key = useInfura ? `${address}.useInfura` : address;\n    if (Object.keys(instanceMap).includes(key)) {\n      return instanceMap[key];\n    } else {\n      instanceMap[key] = new BrokerManager(chainId, address, useInfura);\n      return instanceMap[key];\n    }\n  };\n})();","/**\n * Get REST server config\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {string} server url\n */\nexport const getRestServerConfig = (env = 'dev') => {\n  if (env === 'prod' || env === 'production') {\n    // for production\n    return (process && process.env && process.env.REACT_APP_REST_SERVER_URL) || 'https://api.deri.finance';\n    //return 'https://alphaapi.deri.finance';\n  } else {\n    // for test\n    return 'https://testnetapi.deri.finance';\n    //return 'http://localhost:8082';\n  }\n};\n\nexport const getRedisWorkerQueneConfig = (env = \"dev\") => {\n  if (env === \"prod\") {\n    return ['trade_tx_quene', 'trade_worker_group']\n  } else {\n    return ['trade_tx_quene_dev', 'trade_worker_group_dev']\n  }\n};\n","export const getChainIds = () => {\n  return ['1', '3', '56', '97', '128', '256', '137', '80001'];\n};\nexport const ChainProviderUrls = [\n  {\n    provider_urls: [\n      'https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '1',\n  },\n  {\n    provider_urls: [\n      'https://bsc-dataseed.binance.org',\n      'https://bsc-dataseed1.defibit.io/',\n      'https://bsc-dataseed1.ninicoin.io/',\n    ],\n    chainId: '56',\n  },\n  {\n    provider_urls: ['https://http-mainnet.hecochain.com'],\n    chainId: '128',\n  },\n  {\n    provider_urls: [\n      'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '3',\n  },\n  {\n    provider_urls: [\n      'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '42',\n  },\n  {\n    provider_urls: [\n      //'https://data-seed-prebsc-1-s1.binance.org:8545/',\n      'https://data-seed-prebsc-1-s2.binance.org:8545/',\n      'https://data-seed-prebsc-1-s3.binance.org:8545/',\n      'https://data-seed-prebsc-2-s1.binance.org:8545/',\n      'https://data-seed-prebsc-2-s2.binance.org:8545/',\n      'https://data-seed-prebsc-2-s3.binance.org:8545/',\n    ],\n    chainId: '97',\n  },\n  {\n    provider_urls: ['https://http-testnet.hecochain.com'],\n    chainId: '256',\n  },\n];\n\nexport const getChainProviderUrlsConfig = (chainId) => {\n  const chainProviderUrls = [\n    {\n      provider_urls: [\n        'https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '1',\n    },\n    {\n      provider_urls: [\n        'https://bsc-dataseed.binance.org',\n        'https://bsc-dataseed1.defibit.io/',\n        'https://bsc-dataseed1.ninicoin.io/',\n      ],\n      chainId: '56',\n    },\n    {\n      provider_urls: ['https://http-mainnet.hecochain.com'],\n      chainId: '128',\n    },\n    {\n      provider_urls: [\n        'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '3',\n    },\n    {\n      provider_urls: [\n        'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '42',\n    },\n    {\n      provider_urls: [\n        //'https://data-seed-prebsc-1-s1.binance.org:8545/',\n        'https://data-seed-prebsc-1-s2.binance.org:8545/',\n        'https://data-seed-prebsc-1-s3.binance.org:8545/',\n        'https://data-seed-prebsc-2-s1.binance.org:8545/',\n        'https://data-seed-prebsc-2-s2.binance.org:8545/',\n        'https://data-seed-prebsc-2-s3.binance.org:8545/',\n      ],\n      chainId: '97',\n    },\n    {\n      provider_urls: ['https://http-testnet.hecochain.com'],\n      chainId: '256',\n    },\n  ];\n  \n  const res = chainProviderUrls.filter((i) => i.chainId  === chainId)\n  //console.log('res',res)\n  if (res.length > 0) {\n    return res[0].provider_urls\n  } else {\n    throw new Error(`getChainProviderUrlsConfig: no urls for chainId ${chainId}`)\n  }\n}\n","import { getChainIds } from './chain';\n\n/** @module config */\n\n/**\n * Get the contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].pToken - position token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].symbol - symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getContractAddressConfig = (env = 'dev') => {\n  // production environment\n  if (env === 'prod') {\n    // console.log('!!! production !!!')\n    return [\n      {\n        pool:   '0xAf081e1426f64e74117aD5F695D2A80482679DE5',\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n        pToken: '0x3c11c4990447F0AD575eBd74E8cD17bf61848A15',\n        lToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '7906919',\n        bTokenSymbol: 'BUSD',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '56',\n        version: 'v1',\n      },\n      {\n        pool:   '0x011346B81e5326904B5B76A11dECAf2c67eFFc23',\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n        pToken: '0xaE6429b4CDDDFefDB6ac702183c836B4e62Da410',\n        lToken: '0xd8f78c47b0e0943B3Cb2cE1e1726472C4ddd2F98',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '6753399',\n        bTokenSymbol: 'BUSD',\n        symbol: 'COIN',\n        unit: 'COIN',\n        chainId: '56',\n        version: 'v1',\n      },\n      {\n        pool:   '0xD3f5E6D1a25dA1E64EDf7cb571f9fAD17FEb623c',\n        bToken: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\n        pToken: '0x29Be63E854727BB3Fef77eB107B8d1c33081f989',\n        lToken: '0x610b39F9ba0fF2167AEb646462473c011A431Cd7',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '8005906',\n        bTokenSymbol: 'DERI',\n        symbol: 'iMEME',\n        unit: 'iMEME',\n        chainId: '56',\n        version: 'v1',\n      },\n      {\n        pool:   '0x23779AAc1e74a65F27B4840A8E41F767Ce993118',\n        bToken: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n        pToken: '0x9c6134F9e759C6812aaC102FC1a9f7cA5615fD33',\n        lToken: '0x43CA6D7129d7F490d5B91B4D14D7c877D15A92dA',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        initialBlock: '12548746',\n        bTokenSymbol: 'USDT',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '1',\n        version: 'v1',\n      },\n      {\n        pool:   '0x96a1F15676746b9339DBc185F277618359Ac6346',\n        bToken: '0x3449FC1Cd036255BA1EB19d65fF4BA2b8903A69a',\n        pToken: '0x15aD9b67cf54037127fD986Ca3bB775f9FC4ad05',\n        lToken: '0xeC27d4c53C2E29F1113A9667c0B19442df83c1f1',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        initialBlock: '12548827',\n        bTokenSymbol: 'BAC',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '1',\n        version: 'v1',\n      },\n      {\n        pool:   '0xBA7e183042c8796E26A5a2375927DE7B1AB99d97',\n        bToken: '0x0298c2b32eaE4da002a15f36fdf7615BEa3DA047',\n        pToken: '0x732Ba556B304fd74Cd14b74ab8762A7D9f26d476',\n        lToken: '0x90fE976Cbb48E0761A84DDA2974024377994a997',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0xF0bC8b772f26F8DeB46c1aebbEA7C8d502Abf3b8',\n        initialBlock: '5220431',\n        bTokenSymbol: 'HUSD',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '128',\n        version: 'v1',\n      },\n    ];\n  }\n  // develop environment\n  return [\n    {\n      pool: '0x372b640A00a0A6B73381e9363A39644a712cCc37',\n      bToken: '0x4038191eFb39Fe1d21a48E061F8F14cF4981A0aF',\n      pToken: '0xB9113758D771750e9E8ECb359A19689eC89AC1a5',\n      lToken: '0xC727a10Be4740441BE74960296097aF39D701980',\n      initialBlock: '9378545',\n      bTokenSymbol: 'BUSD',\n      symbol: 'BTCUSD',\n      unit: 'BTC',\n      chainId: '97',\n      version: 'v1',\n    },\n  ];\n};\n\n/**\n * Get the Slp contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].pToken - position token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].symbol - symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getSlpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n        bToken: '0xA3DfbF2933FF3d96177bde4928D0F5840eE55600',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        chainId: '1',\n        bTokenSymbol: 'DERI-USDT SLP',\n        symbol: '--',\n      },\n    ];\n  }\n  console.log('getSlpContractAddressConfig(): no config for dev environment');\n  return [];\n};\n\n/**\n * Get the Clp contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getClpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool:   '0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x83b31Abc899863B8Eb06952994580CE86414156E',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '6894880',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP',\n        symbol: '--',\n      },\n    ];\n  } else {\n    return [];\n  }\n};\nexport const getClp2ContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool:   '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '699498',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP SYRUP',\n        symbol: '--',\n      },\n    ];\n  } else {\n    return [];\n  }\n};\n\nexport const getLpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool:   '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n        bToken: '0xA3DfbF2933FF3d96177bde4928D0F5840eE55600',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        chainId: '1',\n        bTokenSymbol: 'DERI-USDT SLP',\n        symbol: '--',\n        type: 'slp',\n      },\n      {\n        pool:   '0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x83b31Abc899863B8Eb06952994580CE86414156E',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '6894880',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP',\n        symbol: '--',\n        type: 'clp',\n      },\n      {\n        pool:   '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '699498',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP SYRUP',\n        symbol: '--',\n        type: 'clp2',\n      },\n    ];\n  } else {\n    return [];\n  }\n};\n\nexport const getMiningVaultRouterContractAddress = (chainId) => {\n  const configs = [\n    {\n      MiningVaultRouter: '0x8d5613451Dc0592388f98d7Ab1ce5A732561936e',\n      chainId: '56',\n    },\n  ];\n  const filteredConfig = configs.filter((i) => i.chainId === chainId);\n  if (filteredConfig.length > 0) {\n    return filteredConfig[0].MiningVaultRouter;\n  } else {\n    throw new Error(\n      `getMiningVaultRouterAddressConfig: no address for chainId ${chainId}`\n    );\n  }\n};\n\n/**\n * Get the Deri contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].Deri - deri address\n * @returns {string} response[].Wormhole - wormhole token address\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getDeriContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        Deri: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        Wormhole: '0x6874640cC849153Cb3402D193C33c416972159Ce',\n        bTokenSymbol: 'DERI',\n        chainId: '1',\n      },\n      {\n        Deri: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\n        Wormhole: '0x15a5969060228031266c64274a54e02Fbd924AbF',\n        bTokenSymbol: 'DERI',\n        chainId: '56',\n      },\n      {\n        Deri: '0x2bdA3e331Cf735D9420e41567ab843441980C4B8',\n        Wormhole: '0x134A04497e9a0b1F8850fEaf87eD18ec348dDa46',\n        bTokenSymbol: 'DERI',\n        chainId: '128',\n      },\n    ];\n  }\n  return [\n    {\n      Deri: '0x88Fe79a3b6AC7EeF3d55B2e388fa18400590698B',\n      Wormhole: '0xcb28Fa7dFa1844Cdb47aD5f03484f6131293Fd2e',\n      bTokenSymbol: 'DERI',\n      chainId: '3',\n    },\n    {\n      Deri: '0x8dC0aA48bbc69BaCD2548c6b7adCDeF8DDbA50B2',\n      Wormhole: '0x9028e43114Df57C97c15355224E575DF1e244919',\n      bTokenSymbol: 'DERI',\n      chainId: '97',\n    },\n    {\n      Deri: '0x932458a637F8060AF747167656651b64d4c36620',\n      Wormhole: '0x629B0D3D32BE5ee5F7BF3845914d26446c04165d',\n      bTokenSymbol: 'DERI',\n      chainId: '256',\n    },\n  ];\n};\n\nexport const getDailyBlockNumberConfig = () => {\n  const chainBlockNumberList = [\n    '6486',\n    '6486',\n    '28759',\n    '28759',\n    '28798',\n    '28798',\n    '40405',\n    '40405',\n  ];\n  return getChainIds().reduce((accum, i, index) => {\n    accum[i] = chainBlockNumberList[index];\n    return accum;\n  }, {});\n};\n","import Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\nimport {\n  DeriEnv,\n  getChainProviderUrlsConfig,\n  getContractAddressConfig,\n  getSlpContractAddressConfig,\n  getClpContractAddressConfig,\n  getClp2ContractAddressConfig,\n  getLpContractAddressConfig,\n  getDailyBlockNumberConfig,\n  getDeriContractAddressConfig,\n  getChainIds,\n} from './config';\n\n/** @module utils */\n\nBigNumber.config({\n  DECIMAL_PLACES: 18,\n  ROUNDING_MODE: BigNumber.ROUND_DOWN,\n  EXPONENTIAL_AT: 256,\n});\n\nexport { BigNumber };\n\n/**\n * Change the value to BigNumber type\n * @func\n * @param {string|number} value - the number that need to changed to BigNumber type\n * @param {string} base - base of the number\n * @returns {BigNumber}\n */\nexport const bg = (value, base = 0) => {\n  if (base === 0) {\n    return BigNumber(value);\n  }\n  if (base > 0) {\n    return BigNumber(value).times(BigNumber(`1${'0'.repeat(base)}`));\n  }\n  return BigNumber(value).div(BigNumber(`1${'0'.repeat(-base)}`));\n};\n\n/**\n * Get the max value\n * @func\n * @param {BigNumber} value1\n * @param {BigNumber} value2\n * @returns {BigNumber}\n */\nexport const max = (value1, value2) => {\n  if (value1.gte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\n/**\n * Get the min value\n * @func\n * @param {BigNumber} value1\n * @param {BigNumber} value2\n * @returns {BigNumber}\n */\nexport const min = (value1, value2) => {\n  if (value1.lte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\n/**\n * Convert the number to a fixed precision\n * @func\n * @param {string} value - the number that need to convert\n * @param {number} num - the number for method toFixed()\n * @returns {string}\n */\nexport const toNatural = (value, num = 0) =>\n  BigNumber(value).toFixed(num).toString();\n\nexport const toHex = (value) => Web3.utils.toHex(value);\n\nexport const toChecksumAddress = (value) => Web3.utils.toChecksumAddress(value);\n\nexport const hexToString = (value) => Web3.utils.hexToUtf8(value);\n\nexport const hexToNumber = (value) => Web3.utils.hexToNumber(value);\n\nexport const hexToNumberString = (value) => Web3.utils.hexToNumberString(value);\n\nexport const hexToDeri = (value) => bg(hexToNumberString(value));\n\nexport const hexToNatural = (value) => bg(hexToNumberString(value), -18);\n\nexport const hexToNaturalWithPercentage = (value) =>\n  `${bg(hexToNumberString(value), -18)\n    .sd(4)\n    .times(100)\n    .toFixed(4)\n    .toString()}%`;\n\nexport const naturalToDeri = (value) => bg(value, 18).toFixed(0);\n\nexport const naturalWithPercentage = (value) =>\n  `${bg(value).sd(4).times(100).toFixed(4).toString()}%`;\n\nexport const deriToNatural = (value) => bg(value, -18);\n\nexport const deriToNaturalWithPercentage = (value) =>\n  `${bg(value, -18).sd(4).times(100).toFixed(4).toString()}%`;\n\nexport const deriToString = (value) => bg(value).toString();\n\nexport const deriToBool = (value) => {\n  if (bg(value).toNumber() === 1) {\n    return true;\n  }\n  return false;\n};\n\nexport const hasInvalidArgsValue = (...args) =>\n  args.some(\n    (i) =>\n      // console.log(bg(i))\n      isNaN(i.toString()) || i.toString() === '0'\n  );\n\n// language\nexport const isObject = (obj) => typeof obj === 'object';\n\n//const np = () => {}\n//const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms))\n\n// http\nexport const checkHttpServerIsAlive = async (url) => {\n  try {\n    //const response = await fetch(url);\n    const response = await fetch(url);\n    if (response.ok) {\n      return true;\n    }\n  } catch (err) {\n    //console.log(err);\n  }\n  return false;\n};\n\nconst shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n};\n\nexport const getAliveHttpServer = async (urls = []) => {\n  urls = shuffleArray(urls)\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    if (await checkHttpServerIsAlive(url)) {\n      //console.log(url)\n      return url;\n    }\n  }\n  throw new Error('No alive http server in urls', urls);\n};\n\nconst getBlockNumber = async (url) => {\n  let res = { url: url, blockNumber: -1, duration: Number.MAX_SAFE_INTEGER,};\n  try {\n    const web3 = new Web3(new Web3.providers.HttpProvider(url))\n    const startTime = Date.now()\n    res.blockNumber = await web3.eth.getBlockNumber()\n    res.duration = Date.now() - startTime\n  } catch (err) {\n    console.log(`getBlockNumber(${url}) error: ${err}`)\n  }\n  return res\n};\n\nexport const getLatestRPCServer = async (urls = []) => {\n  urls = shuffleArray(urls)\n  let promises = []\n  for (let i = 0; i < urls.length; i++) {\n    promises.push(getBlockNumber(urls[i]));\n  }\n  let blockNumbers = await Promise.all(promises)\n  blockNumbers = blockNumbers.sort((a, b) => a.duration - b.duration)\n  //console.log('blockNumbers',  blockNumbers)\n  const latestBlockNumber = blockNumbers.reduce((a, b) => b.blockNumber !== -1 ? a > b.blockNumber ? a : b.blockNumber : a, 0)\n  const index = blockNumbers.findIndex((b) => b.blockNumber === latestBlockNumber);\n  const res = blockNumbers[index].url\n  //console.log(res)\n  if (res.startsWith('http')) {\n    return res\n  } else {\n    throw new Error(`getLatestRPCServer(): cannot find alive RPC server in ${urls}`)\n  }\n};\n\n// ethereum chain\nexport const MAX_VALUE =\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\nexport const getNetworkName = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let poolNetwork;\n  switch (chainId) {\n    case '1':\n      poolNetwork = 'ethereum';\n      break;\n    case '56':\n      poolNetwork = 'bsc';\n      break;\n    case '128':\n      poolNetwork = 'heco';\n      break;\n    case '3':\n      poolNetwork = 'ropsten';\n      break;\n    case '42':\n      poolNetwork = 'kovan';\n      break;\n    case '97':\n      poolNetwork = 'bsctestnet';\n      break;\n    case '256':\n      poolNetwork = 'hecotestnet';\n      break;\n    case '137':\n      poolNetwork = 'matic';\n      break;\n    case '80001':\n      poolNetwork = 'mumbai';\n      break;\n    default:\n      throw new Error(`The networkId is not valid for chainId ${chainId}`);\n  }\n  return poolNetwork;\n};\n\nexport const getWalletBalanceUnit = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let index;\n  const unitNetworkIdsMap = {\n    ETH: ['1', '3', '42'],\n    BNB: ['56', '97'],\n    HT: ['128', '256'],\n  };\n  const networkIdsArray = Object.values(unitNetworkIdsMap);\n  for (let i = 0; i < networkIdsArray.length; i++) {\n    if (networkIdsArray[i].includes(chainId)) {\n      index = i;\n      break;\n    }\n  }\n  if (index !== undefined) {\n    return Object.keys(unitNetworkIdsMap)[index];\n  }\n  if (chainId === '') {\n    return '';\n  }\n  throw new Error('Invalid Network:', chainId);\n};\n\nexport const getPoolBaseSymbolList = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let result = [];\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  for (let i = 0; i < pools.length; i++) {\n    const { bTokenSymbol, symbol } = pools[i];\n    if (bTokenSymbol && symbol) {\n      result.push(`${symbol}/${bTokenSymbol}`);\n    }\n  }\n  return result;\n};\n\nexport const getPoolBaseTokenAddressObject = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let result = {};\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  for (let i = 0; i < pools.length; i++) {\n    const { bTokenSymbol, symbol, pool } = pools[i];\n    const key = `${symbol}/${bTokenSymbol}`;\n    if (bTokenSymbol && symbol) {\n      result[key] = pool;\n    }\n  }\n  return result;\n};\n\n// export const getPoolContractAddress = (chainId, bTokenSymbol) => {\n//   chainId = normalizeChainId(chainId);\n//   const pools = getContractAddressConfig(DeriEnv.get()).filter(\n//     (c) => c.chainId === chainId\n//   );\n//   const pool = pools.filter((p) => p.bTokenSymbol === bTokenSymbol);\n//   if (pool.length > 0) {\n//     return [\n//       pool[0].pool,\n//       pool[0].bToken,\n//       pool[0].pToken,\n//       pool[0].lToken,\n//       pool[0].dToken,\n//       pool[0].MiningVault,\n//       pool[0].initialBlock,\n//     ];\n//   }\n//   console.log(\n//     `getPoolContractAddress(): contract address is not found: ${chainId} ${bTokenSymbol}`\n//   );\n//   return [];\n// };\n\n// get config by poolAddress\nexport const getPoolContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  // console.log('pool', pool)\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      pTokenAddress: pool[0].pToken,\n      lTokenAddress: pool[0].lToken,\n      dTokenAdress: pool[0].dToken,\n      MinningVaultAddress: pool[0].MiningVault,\n      bTokenSymbol: pool[0].bTokenSymbol,\n      symbol: pool[0].symbol,\n      unit: pool[0].unit,\n      initialBlock: pool[0].initialBlock,\n    };\n  }\n  // console.log(\n  //   `getPoolContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  // );\n  return [];\n};\n\nexport const getMiningVaultContractAddress = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  if (pools.length > 0) {\n    if (pools[0].MiningVault) {\n      return pools[0].MiningVault;\n    }\n  }\n};\n\n// export const getMiningVaultRouterContractAddress = (chainId) => {\n//   chainId = normalizeChainId(chainId);\n//   const pools = getContractAddressConfig(DeriEnv.get()).filter(\n//     (c) => c.chainId === chainId\n//   );\n//   if (pools.length > 0) {\n//     if (pools[0].MiningVaultRouter) {\n//       return pools[0].MiningVaultRouter;\n//     }\n//   }\n// };\n\nexport const getDailyBlockNumber = (chainId) => {\n  const blockNumbers = getDailyBlockNumberConfig();\n  if (blockNumbers[chainId]) {\n    return parseInt(blockNumbers[chainId]);\n  }\n  console.log(`cannot find the annual block number with chainId: ${chainId}`);\n};\n\nexport const getSlpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getSlpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      pTokenAddress: pool[0].pToken,\n      lTokenAddress: pool[0].lToken,\n      dTokenAdress: pool[0].dToken,\n      MinningVaultAddress: pool[0].MiningVault,\n    };\n  }\n  console.log(\n    `getSlpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getClp2ContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getClp2ContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      pTokenAddress: pool[0].pToken,\n      lTokenAddress: pool[0].lToken,\n      dTokenAdress: pool[0].dToken,\n      MinningVaultAddress: pool[0].MiningVault,\n    };\n  }\n  console.log(\n    `getClp2ContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getClpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getClpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      lTokenAddress: pool[0].lToken,\n    };\n  }\n  console.log(\n    `getClpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getLpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getLpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      lTokenAddress: pool[0].lToken,\n      type: pool[0].type,\n    };\n  }\n  console.log(\n    `getLpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getDeriContractAddress = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const pool = getDeriContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  if (pool.length > 0) {\n    return {\n      deriAddress: pool[0].Deri,\n      wormholeAddress: pool[0].Wormhole,\n      bTokenSymbol: pool[0].bTokenSymbol,\n    };\n  }\n  console.log(\n    `getDeriContractAddress(): contract address is not found: ${chainId}`\n  );\n  return {};\n};\n\nexport const getOracleUrl = (chainId, poolAddress) => {\n  const env = DeriEnv.get()\n  const { symbol } = getPoolContractAddress(chainId, poolAddress);\n  const addSymbolParam = (url, symbol='BTCUSD') => `${url}?symbol=${symbol}`;\n  if (env === 'prod' || env === 'production') {\n    // for production\n    if (symbol) {\n      return addSymbolParam('https://oracle4.deri.finance/price', symbol);\n    }\n    return 'https://oracle4.deri.finance/price';\n  } else {\n    if (symbol) {\n      return addSymbolParam('https://oracle2.deri.finance/price', symbol);\n    }\n    // for test\n    return 'https://oracle2.deri.finance/price';\n  }\n};\n\nexport const getOracleInfo = async (chainId, poolAddress) => {\n  let url = getOracleUrl(chainId, poolAddress);\n  //console.log('oracle url', url);\n  let retry = 2;\n  //let timeout = 1000;\n  let res;\n  while (retry > 0) {\n    res = await fetch(url, { mode: 'cors', cache: 'no-cache' });\n    //if (res && !res.timeout) {\n    if (res.ok) {\n      break;\n    }\n    //console.log('get oracle info timeout')\n    retry -= 1;\n    //timeout += 800;\n  }\n  if (retry === 0 && !res) {\n    throw new Error(`fetch oracle info error: exceed max retry(2).`);\n  }\n  return await res.json();\n};\n\nexport const getBTCUSDPrice = async (chainId, poolAddress) => {\n  const responseJson = await getOracleInfo(chainId, poolAddress);\n  let price = responseJson.price;\n  if (!price) {\n    price = '0';\n  }\n  return deriToNatural(responseJson.price).toString();\n};\nexport const getOraclePrice = getBTCUSDPrice;\n\nexport const getChainProviderUrl = async(chainId) => {\n  chainId = normalizeChainId(chainId);\n  const urls = getChainProviderUrlsConfig(chainId)\n  if (urls.length > 0) {\n    return await getLatestRPCServer(urls)\n  } else {\n    throw new Error(\n      `Cannot find the chain provider url with chainId: ${chainId}`\n    );\n  }\n};\n\nexport const format = (bigNumber) =>\n  bigNumber.toFormat().replaceAll(',', '').toString();\n\nexport const normalizeChainId = (chainId) => {\n  const chainIds = getChainIds()\n  let res = chainId ? chainId.toString() : chainId;\n  if (chainId && chainIds.includes(res)) {\n    return res;\n  } else {\n    throw new Error(`invalid chainId: ${chainId}`)\n  }\n};\n\nexport const normalizeAddress = (address) => {\n  if (address && typeof address === 'string' && address.startsWith('0x')) {\n    return Web3.utils.toChecksumAddress(address);\n  } else {\n    throw new Error(`invalid address: ${address}`)\n  }\n};","import { bg, max } from '../utils';\n\nexport const calculateEntryPrice = (volume, cost, multiplier) =>\n  volume.eq(0) ? bg(0) : cost.div(volume).div(multiplier);\n\nexport const calculateMarginHeld = (\n  price,\n  volume,\n  multiplier,\n  minInitialMarginRatio\n) => {\n  return volume.abs().times(price).times(multiplier).times(minInitialMarginRatio)\n};\n\nexport const calculatePnl = (price, volume, multiplier, cost) => {\n  return volume.times(price).times(multiplier).minus(cost);\n}\n\n// export const calculateMaxWithdrawMargin = (\n//   price,\n//   volume,\n//   margin,\n//   cost,\n//   multiplier,\n//   minInitialMarginRatio\n// ) => {\n//   if (volume.eq(0)) {\n//     return margin;\n//   }\n//   const held = calculateMarginHeld(\n//     price,\n//     volume,\n//     multiplier,\n//     minInitialMarginRatio\n//   );\n//   const pnl = calculatePnl(price, volume, multiplier, cost);\n//   const withdrawable = max(margin.plus(pnl).minus(held.times(1.02)), bg(0));\n//   return withdrawable;\n// };\n\nexport const calculateLiquidationPrice = (\n  volume,\n  margin,\n  cost,\n  dynamicCost,\n  multiplier,\n  minMaintenanceMarginRatio\n) => {\n  const tmp = cost.minus(margin);\n  let res = volume.gt(0)\n    ? tmp.div(bg(1).minus(minMaintenanceMarginRatio)).minus(dynamicCost).div(volume).div(multiplier)\n    : tmp.div(bg(1).plus(minMaintenanceMarginRatio)).minus(dynamicCost).div(volume).div(multiplier);\n  res = max(res, bg(0));\n  return res;\n};\n\nexport const isOrderValid = (\n  //price,\n  margin,\n  marginHeld,\n  liquidity,\n  liquidityUsed,\n  // multiplier,\n  // minPoolMarginRatio,\n  // newVolume,\n) => {\n  const minMargin = marginHeld;\n  // const poolMaxVolume = liquidity.minus(liquidityUsed)\n  //   .div(minPoolMarginRatio)\n  //   .div(price)\n  //   .div(multiplier);\n  if (margin.gte(minMargin)) {\n    // if (\n    //   newVolume.lte(poolMaxVolume) &&\n    //   newVolume.gte(poolMaxVolume.negated())\n    // ) {\n    if (liquidity.minus(liquidityUsed).gte(0)) {\n      return { success: true };\n    }\n    return { success: false, error: 'Pool has insufficient liquidity' };\n  }\n  return { success: false, error: 'Trader has insufficient margin' };\n};\n","import { bg, getDailyBlockNumber, validateArgs } from '../utils';\n\nexport const calculateLiquidityUsed = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  poolMarginRatio\n) => {\n  if (\n    validateArgs(\n      tradersNetVolume,\n      price,\n      multiplier,\n      liquidity,\n      poolMarginRatio\n    )\n  ) {\n    return bg(tradersNetVolume)\n      .times(price)\n      .times(multiplier)\n      .times(poolMarginRatio)\n      .div(liquidity)\n      .abs();\n  } else {\n    const args = [\n      tradersNetVolume,\n      price,\n      multiplier,\n      liquidity,\n      poolMarginRatio,\n    ];\n    throw new Error(`calculateLiquidityUsed: invalid args: ${args}`);\n  }\n}\n\nexport const calculateFundingRate = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  fundingRateCoefficient\n) => {\n  if (\n    validateArgs(\n      tradersNetVolume,\n      price,\n      multiplier,\n      liquidity,\n      fundingRateCoefficient\n    )\n  ) {\n    return bg(liquidity).eq(0) ? bg(0) : bg(tradersNetVolume)\n      .times(price)\n      // .times(price)\n      // .times(multiplier)\n      .times(multiplier)\n      .times(fundingRateCoefficient)\n      .div(liquidity);\n  } else {\n    const args = [\n      tradersNetVolume,\n      price,\n      multiplier,\n      liquidity,\n      fundingRateCoefficient\n    ];\n    throw new Error(`calculateFundingRate: invalid args: ${args}`);\n  }\n};\n\nexport const processFundingRate = (chainId, fundingRate) => {\n  const annualBlockCount = getDailyBlockNumber(chainId);\n  //console.log(annualBlockCount);\n  return bg(fundingRate).times(annualBlockCount);\n};\n","import { bg, max, min } from '../utils'\n\nexport const calculateBTokenDynamicEquities = (bTokens) => {\n  //const dynamicEquities = bTokens.map((b) => bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl))\n  //const totalDynamicEquity = dynamicEquities.reduce((accum, d) => accum.plus(d), bg(0))\n  const totalDynamicEquity = bTokens.reduce((accum, b) => accum.plus(bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl)), bg(0))\n  return totalDynamicEquity\n}\n\nexport const isBToken0RatioValid = (bTokens, bTokenId, amount, bToken0Ratio) => {\n  bTokens[bTokenId].liquidity = bg(bTokens[bTokenId].liquidity).plus(amount)\n  const totalDynamicEquity = calculateBTokenDynamicEquities(bTokens)\n  const b = bTokens['0']\n  const dynamicEquity = bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl)\n  //console.log('estimatedBToken0Ratio',dynamicEquity.div(totalDynamicEquity).toString())\n  // use 1 as efficient\n  if (\n    !totalDynamicEquity.eq(0) &&\n    dynamicEquity.div(totalDynamicEquity).times('1').lt(bToken0Ratio)\n  ) {\n    return { success: false, error: 'Trader has insufficient bToken0' };\n  } else {\n    return { success: true };\n  }\n}\n\nexport const isPoolMarginRatioValid = (bTokens, bTokenId, amount, userLiquidity, symbols, poolMarginRatio) => {\n  if (bg(amount).gte(userLiquidity)) {\n    bTokens[bTokenId].liquidity = bg(bTokens[bTokenId].liquidity).minus(userLiquidity)\n  } else {\n    bTokens[bTokenId].liquidity = bg(bTokens[bTokenId].liquidity).minus(amount)\n  }\n  let totalDynamicEquity = calculateBTokenDynamicEquities(bTokens)\n  let totalCost = bg(0)\n  for (let i=0; i<symbols.length; i++) {\n    const s = symbols[i]\n    if (!bg(s.tradersNetVolume).eq(0)) {\n      const cost = bg(s.tradersNetVolume).times(s.price).times(s.multiplier)\n      totalDynamicEquity = totalDynamicEquity.plus(s.tradersNetCost).minus(cost)\n      totalCost = totalCost.plus(cost.abs())\n    }\n  }\n  //console.log(totalDynamicEquity.toString(), totalCost.toString())\n  if (\n    !totalCost.eq(0) &&\n    totalDynamicEquity.div(totalCost).times('1').lt(poolMarginRatio)\n  ) {\n    return { success: false, error: 'Trader has insufficient liquidity' };\n  } else {\n    return { success: true };\n  }\n}\n\n\nexport const calculateMaxRemovableLiquidity = (\n  bToken,\n  userLiquidity,\n  cost,\n  pnl,\n  restLiquidity,\n  minPoolMarginRatio,\n) => {\n  if (bg(cost).eq(0)) {\n    return userLiquidity;\n  } else {\n    return max(\n      min(\n        bToken.liquidity.minus(\n          minPoolMarginRatio\n            .times(cost)\n            .plus(pnl)\n            .minus(restLiquidity)\n            .div(bToken.price)\n            .div(bToken.discount)\n        ).times('0.98'),\n        userLiquidity\n      ),\n      bg(0)\n    );\n  }\n};","import { lTokenFactory, perpetualPoolFactory } from '../factory'\nimport { getPoolConfig2, getBTokenIdList, getSymbolIdList} from '../config'\nimport { bg, deriToNatural } from '../utils'\nimport { getNetworkName } from '../../utils'\nimport { calculateMaxRemovableLiquidity } from '../calculation'\nimport { databaseFactory } from '../../factory/contracts';\n\nexport const getLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId,\n  useInfura,\n) => {\n  try {\n    const {lToken:lTokenAddress} = getPoolConfig2(poolAddress, bTokenId)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura)\n    const lToken = lTokenFactory(chainId, lTokenAddress, useInfura);\n\n    const bTokenIdList = getBTokenIdList(poolAddress)\n    const symbolIdList = getSymbolIdList(poolAddress)\n\n    const [parameterInfo, bTokenInfo, lTokenAsset ] = await Promise.all([\n      perpetualPool.getParameters(),\n      perpetualPool.getBToken(bTokenId),\n      lToken.getAsset(accountAddress, bTokenId),\n    ])\n    const { minPoolMarginRatio } = parameterInfo\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n\n    const cost = symbols.reduce((accum, s) => {\n        return accum.plus(bg(s.tradersNetVolume).times(s.price).times(s.multiplier).abs())\n    }, bg(0))\n    const totalPnl = symbols.reduce((accum, s) => {\n        return accum.plus(bg(s.tradersNetVolume).times(s.price).times(s.multiplier).minus(s.tradersNetCost))\n    }, bg(0))\n    const restLiquidity = bTokens.reduce((accum, b, index) => {\n      if (index === parseInt(bTokenId)) {\n        return accum.plus(b.pnl)\n      } else {\n        return accum.plus(bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl))\n      }\n    }, bg(0))\n\n    const { liquidity: poolLiquidity } = bTokenInfo;\n    const { liquidity, pnl, lastCumulativePnl } = lTokenAsset\n    const maxRemovableShares = calculateMaxRemovableLiquidity(bTokens[bTokenId], liquidity, cost, totalPnl, restLiquidity, minPoolMarginRatio)\n    const approximatePnl = pnl.plus(bg(bTokens[bTokenId].cumulativePnl).minus(lastCumulativePnl).times(liquidity))\n    //console.log(\"approximatePnl\", approximatePnl.toString())\n    return {\n      //totalSupply: lTokenTotalSupply.toString(),\n      poolLiquidity: poolLiquidity.toString(),\n      // shares: liquidity.toString(),\n      // shareValue: '1',\n      // maxRemovableShares: liquidity.toString()\n      shares: liquidity.toString(),\n      pnl: approximatePnl.toString(),\n      maxRemovableShares: maxRemovableShares.toString()\n    };\n  } catch (err) {\n    console.log(`${err}`)\n  }\n  return {\n    poolLiquidity: '',\n    shares: '',\n    pnl: '',\n    maxRemovableShares: '',\n  };\n};\n\nexport const getPoolLiquidity = async (chainId, poolAddress, bTokenId) => {\n  // use the dev database\n  const db = databaseFactory();\n  try {\n    const res = await db\n      .getValues([`${chainId}.${poolAddress}.liquidity${bTokenId}`])\n      .catch((err) => console.log('getPoolLiquidity', err));\n    if (res) {\n      const [liquidity] = res;\n      return {\n        liquidity: deriToNatural(liquidity).toString(),\n        symbol:'',\n      };\n    }\n  } catch (err) {\n    console.log(`${err}`)\n  }\n  return {\n    liquidity: '',\n    symbol:'',\n  };\n};\n\nexport const getPoolInfoApy = async (chainId, poolAddress, bTokenId) => {\n  const db = databaseFactory(true);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy${bTokenId}`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, volume1h, volume24h] = res;\n      return {\n        apy: deriToNatural(apy).toString(),\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(`${err}`)\n  }\n};","import { getBTokenIdList, getPoolConfig2, getSymbolIdList } from '../config'\nimport { perpetualPoolRouterFactory, perpetualPoolFactory, lTokenFactory } from '../factory'\nimport { getOracleInfo } from '../utils'\nimport { isBToken0RatioValid, isPoolMarginRatioValid } from '../calculation'\n\nexport const addLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n   const {router:routerAddress} = getPoolConfig2(poolAddress)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n   const bTokenIdList = getBTokenIdList(poolAddress)\n   let promises = []\n   for (let i=0; i<bTokenIdList.length; i++) {\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n   }\n   const bTokens = await Promise.all(promises)\n   const { minBToken0Ratio } = await perpetualPool.getParameters();\n   const validation = isBToken0RatioValid(bTokens, bTokenId, amount, minBToken0Ratio)\n   let res\n   if (validation.success) {\n    try {\n      const tx = await perpetualPoolRouter.addLiquidity(accountAddress, bTokenId, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err};\n    }\n   } else {\n      res = { success: false, error: validation.error};\n   }\n   return res\n}\n\nexport const removeLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum=false,\n) => {\n   const { router: routerAddress, lToken: lTokenAddress } = getPoolConfig2(\n     poolAddress,\n   );\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress)\n   const lToken = lTokenFactory(chainId, lTokenAddress);\n   const lTokenAsset = await lToken.getAsset(accountAddress, bTokenId)\n   const { liquidity:userLiquidity } = lTokenAsset\n   const bTokenIdList = getBTokenIdList(poolAddress) \n   let symbolIdList = getSymbolIdList(poolAddress)\n   let promises = []\n   for (let i=0; i<bTokenIdList.length; i++) {\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n   }\n   const bTokens = await Promise.all(promises)\n   promises = []\n   for (let i=0; i<symbolIdList.length; i++) {\n     promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n   }\n   const symbols = await Promise.all(promises)\n   const { minPoolMarginRatio } = await perpetualPool.getParameters();\n   const validation = isPoolMarginRatioValid(bTokens, bTokenId, amount, userLiquidity, symbols, minPoolMarginRatio)\n   let res\n   if (validation.success) {\n     try {\n       const tx = await perpetualPoolRouter.removeLiquidity(accountAddress, bTokenId, amount, isMaximum);\n       res = { success: true, transaction: tx };\n     } catch (err) {\n       res = { success: false, error: err};\n     }\n   } else {\n    res = { success: false, error: validation.error };\n   }\n   return res\n}\n\nexport const addLiquidityWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n   const {router:routerAddress} = getPoolConfig2(poolAddress)\n   const symbolIdList = getSymbolIdList(poolAddress)\n   const bTokenIdList = getBTokenIdList(poolAddress)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n   let promises = []\n   for (let i=0; i<bTokenIdList.length; i++) {\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n   }\n   const bTokens = await Promise.all(promises)\n   const { minBToken0Ratio } = await perpetualPool.getParameters();\n   const validation = isBToken0RatioValid(bTokens, bTokenId, amount, minBToken0Ratio)\n   let res\n   if (validation.success) {\n    try {\n      const promises = symbolIdList.map(async(s) => {\n        return await getOracleInfo(poolAddress, s)\n      })\n      const prices = await Promise.all(promises)\n      const priceInfos = prices.map((p, index) => {\n        return [symbolIdList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n      })\n      const tx = await perpetualPoolRouter.addLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err};\n    }\n   } else {\n    res = { success: false, error: validation.error };\n   }\n   return res\n}\n\nexport const removeLiquidityWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum = false,\n) => {\n   const {router:routerAddress, lToken:lTokenAddress} = getPoolConfig2(poolAddress)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress)\n\n   const lToken = lTokenFactory(chainId, lTokenAddress);\n   const lTokenAsset = await lToken.getAsset(accountAddress, bTokenId)\n   const { liquidity:userLiquidity } = lTokenAsset\n   const bTokenIdList = getBTokenIdList(poolAddress)\n   let promises = []\n   for (let i=0; i<bTokenIdList.length; i++) {\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n   }\n   const bTokens = await Promise.all(promises)\n   promises = []\n\n   const symbolIdList = getSymbolIdList(poolAddress)\n   for (let i=0; i<symbolIdList.length; i++) {\n     promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n   }\n   const symbols = await Promise.all(promises)\n   const { minPoolMarginRatio } = await perpetualPool.getParameters();\n\n   const validation = isPoolMarginRatioValid(bTokens, bTokenId, amount, userLiquidity, symbols, minPoolMarginRatio)\n   let res\n   if (validation.success) {\n     try {\n       promises = symbolIdList.map(async(s) => {\n         return await getOracleInfo(poolAddress, s)\n       })\n       const prices = await Promise.all(promises)\n       const priceInfos = prices.map((p, index) => {\n         return [symbolIdList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n       })\n       const tx = await perpetualPoolRouter.removeLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum);\n       res = { success: true, transaction: tx };\n     } catch (err) {\n       res = { success: false, error: err};\n     }\n   } else {\n    res = { success: false, error: validation.error };\n   }\n   return res\n}\n","export const priceCache = (function(){\n  let _prices = {}\n  return {\n    get(poolAddress, symbolId) {\n      const key = `${poolAddress}.${symbolId}`\n      if (Object.keys(_prices).includes(key)) {\n        const [price, ] = _prices[key].split('|')\n        //if (parseInt(timestamp) - Date.now() < 10000) {\n          return price\n        //}\n      }\n      console.log('please init priceCache first')\n    },\n    // update(chainId, poolAddress, symbolId) {\n    //   // place holder\n    // },\n    set(poolAddress, symbolId, val) {\n      if (!isNaN(parseFloat(val))) {\n        const timestamp = Date.now().toString()\n        _prices[`${poolAddress}.${symbolId}`] = `${val}|${timestamp}`\n      }\n    }\n  }\n})()\n\nexport const fundingRateCache = (function () {\n  let resourceMap = {};\n  return {\n    get(chainId, contractAddress, symbolId) {\n      const key = `${chainId}.${contractAddress}.${symbolId}`;\n      if (Object.keys(resourceMap).includes(key)) {\n        return resourceMap[key];\n      }\n      console.log(`fundingRateCache: key is not in exist: ${key}`);\n      return undefined;\n    },\n    set(chainId, contractAddress, symbolId, resource) {\n      const key = `${chainId}.${contractAddress}.${symbolId}`;\n      resourceMap[key] = resource;\n    },\n  };\n})();","import { perpetualPoolFactory, bTokenFactory, pTokenFactory } from '../factory';\nimport { getBTokenIdList, getBTokenList, getPoolConfig2, getSymbolIdList, getSymbolList} from '../config'\nimport {\n  calculateEntryPrice,\n  calculateLiquidationPrice,\n  calculateFundingRate,\n  processFundingRate,\n} from '../calculation';\nimport { getOraclePrice, bg, min, max } from '../utils'\nimport { fundingRateCache, priceCache } from '../api/api_globals';\n\nexport const getSpecification = async (\n  chainId,\n  poolAddress,\n  bTokenId,\n  symbolId,\n  useInfura,\n) => {\n  try {\n    const {symbol, bTokenSymbol } = getPoolConfig2(poolAddress, bTokenId, symbolId)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura);\n    const [symbolInfo, parameterInfo] = await Promise.all([\n      perpetualPool.getSymbol(symbolId),\n      perpetualPool.getParameters(),\n    ])\n    const { multiplier, feeRatio, fundingRateCoefficient} = symbolInfo\n    const {\n      minPoolMarginRatio,\n      minInitialMarginRatio,\n      minMaintenanceMarginRatio,\n      minLiquidationReward,\n      maxLiquidationReward,\n      liquidationCutRatio,\n      protocolFeeCollectRatio,\n    } = parameterInfo\n    return {\n      symbol: symbol,\n      bSymbol: bTokenSymbol,\n      multiplier: multiplier.toString(),\n      feeRatio: feeRatio.toString(),\n      fundingRateCoefficient: fundingRateCoefficient.toString(),\n      minPoolMarginRatio: minPoolMarginRatio.toString(),\n      minInitialMarginRatio: minInitialMarginRatio.toString(),\n      minMaintenanceMarginRatio: minMaintenanceMarginRatio.toString(),\n      //minAddLiquidity: minAddLiquidity.toString(),\n      //redemptionFeeRatio: redemptionFeeRatio.toString(),\n      minLiquidationReward: minLiquidationReward.toString(),\n      maxLiquidationReward: maxLiquidationReward.toString(),\n      liquidationCutRatio: liquidationCutRatio.toString(),\n      protocolFeeCollectRatio: protocolFeeCollectRatio.toString(),\n    }\n  } catch (err) {\n    console.log(`${err}`)\n  }\n  return {\n    symbol: '',\n    bSymbol: '',\n    multiplier: '',\n    feeRatio: '',\n    fundingRateCoefficient: '',\n    minPoolMarginRatio: '',\n    minInitialMarginRatio: '',\n    minMaintenanceMarginRatio: '',\n    minLiquidationReward: '',\n    maxLiquidationReward: '',\n    liquidationCutRatio: '',\n    protocolFeeCollectRatio: '',\n  }\n};\n\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress, symbolId, useInfura) => {\n  try {\n    const symbolConfigList = getSymbolList(poolAddress)\n    const bTokenIdList = getBTokenIdList(poolAddress)\n    const symbolIdList = symbolConfigList.map((i) => i.symbolId)\n    const symbolList = symbolConfigList.map((i) => i.symbol)\n    //console.log('bTokenList', bTokenList)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura);\n    const {pToken: pTokenAddress } = getPoolConfig2(poolAddress, null, symbolId)\n    const pToken = pTokenFactory(chainId, pTokenAddress, useInfura);\n    const [symbolInfo, parameterInfo, positionInfo, margins, positions ] = await Promise.all([\n      perpetualPool.getSymbol(symbolId),\n      perpetualPool.getParameters(),\n      pToken.getPosition(accountAddress, symbolId),\n      pToken.getMargins(accountAddress),\n      pToken.getPositions(accountAddress),\n      //pToken.getMargin(accountAddress, symbolId),\n    ])\n    const { volume, cost } = positionInfo\n    const { multiplier } = symbolInfo\n    const {\n      minInitialMarginRatio,\n      minMaintenanceMarginRatio,\n    } = parameterInfo\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const margin = bTokens.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.discount).times(margins[index]))\n    }, bg(0))\n\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    promises = []\n    for (let i=0; i<symbolList.length; i++) {\n      promises.push(getOraclePrice(chainId, symbolList[i], useInfura))\n    }\n    const symbolPrices = await Promise.all(promises)\n    const price = symbolPrices[symbolId]\n    priceCache.set(poolAddress, symbolId, price)\n    const marginHeld = symbols.reduce((accum, s, index) => {\n      return accum.plus(bg(symbolPrices[index]).times(s.multiplier).times(positions[index].volume).times(minInitialMarginRatio).abs())\n    }, bg(0))\n    const marginHeldBySymbol = bg(volume).abs().times(multiplier).times(symbolPrices[symbolId]).times(minInitialMarginRatio)\n    //console.log('margin', margin.toString(), marginHeld.toString())\n    //\n    //const unrealizedPnl = bg(positions[symbolId].volume).times(price).times(multiplier).minus(positions[symbolId].cost)\n    const unrealizedPnl = symbols.reduce((accum, s, index) => {\n      return accum.plus(bg(symbolPrices[index]).times(s.multiplier).times(positions[index].volume).minus(positions[index].cost))\n    }, bg(0))\n    const unrealizedPnlList = symbols.map((s, index) => {\n      return [s.symbol, bg(symbolPrices[index]).times(s.multiplier).times(positions[index].volume).minus(positions[index].cost).toString()]\n    })\n\n    const totalCost = positions.reduce((accum, a) => {\n      return accum.plus(bg(a.cost))\n    }, bg(0))\n    const dynamicCost = symbols.reduce((accum, s, index) => {\n      if (index !== parseInt(symbolId)) {\n        return accum.plus(bg(positions[index].volume).times(symbolPrices[index]).times(s.multiplier))\n      } else {\n        return accum\n      }\n    }, bg(0))\n    //console.log('cost', costTotal.toString())\n  return {\n      price: price,\n      volume: volume.toString(),\n      averageEntryPrice: calculateEntryPrice(volume, cost, multiplier).toString(),\n      margin: margin.toString(),\n      marginHeld: marginHeld.toString(),\n      marginHeldBySymbol: marginHeldBySymbol.toString(),\n      unrealizedPnl: unrealizedPnl.toString(),\n      unrealizedPnlList,\n      liquidationPrice: calculateLiquidationPrice(\n        volume,\n        margin,\n        totalCost,\n        dynamicCost,\n        multiplier,\n        minMaintenanceMarginRatio\n      ).toString(),\n    };\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return {\n    volume: '',\n    averageEntryPrice: '',\n    margin: '',\n    marginHeld: '',\n    unrealizedPnl: '',\n    liquidationPrice: '',\n  };\n}\n\nexport const getWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId,\n  useInfura,\n) => {\n  try {\n    const { bToken: bTokenAddress } = getPoolConfig2(poolAddress, bTokenId);\n    const balance = await bTokenFactory(chainId, bTokenAddress, useInfura).balanceOf(accountAddress)\n    return balance.toString()\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return '';\n}\n\nexport const isUnlocked = async (chainId, poolAddress, accountAddress, bTokenId, useInfura) => { \n  try {\n    const { bToken: bTokenAddress } = getPoolConfig2(poolAddress, bTokenId);\n    const bToken = await bTokenFactory(chainId, bTokenAddress, useInfura)\n    return bToken.isUnlocked(accountAddress, poolAddress)\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return false\n}\n\nexport const getEstimatedFee = async (chainId, poolAddress, volume, symbolId, useInfura) => {\n  try {\n    let price = priceCache.get(poolAddress, symbolId)\n    const {symbol} = getPoolConfig2(poolAddress, null, symbolId)\n    if (!price) {\n      //price = await getOraclePrice(poolAddress, symbolId)\n      price = await getOraclePrice(chainId, symbol, useInfura)\n      priceCache.set(poolAddress, symbolId, price)\n    }\n    let cache = fundingRateCache.get(chainId, poolAddress, symbolId)\n    if (!cache || !cache.multiplier) {\n      await _getFundingRate(chainId, poolAddress, symbolId, useInfura)\n      cache = fundingRateCache.get(chainId, poolAddress, symbolId)\n    }\n    const { multiplier, feeRatio } = cache;\n    //console.log(volume, price, multiplier, feeRatio)\n    return bg(volume).abs().times(price).times(multiplier).times(feeRatio).toString()\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return ''\n}\n\nexport const getEstimatedMargin = async(\n  chainId,\n  poolAddress,\n  accountAddress,\n  volume,\n  leverage,\n  symbolId,\n  useInfura,\n) => {\n  try {\n    const {symbol} = getPoolConfig2(poolAddress, null, symbolId)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura);\n    const [price, symbolInfo ] = await Promise.all([\n      //getOraclePrice(poolAddress, symbolId),\n      getOraclePrice(chainId, symbol, useInfura),\n      perpetualPool.getSymbol(symbolId),\n    ])\n    priceCache.set(poolAddress, symbolId, price)\n    const {multiplier} = symbolInfo\n    //console.log('m',multiplier.toString())\n    return bg(volume).abs().times(price).times(multiplier).div(bg(leverage)).toString()\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return ''\n}\n\nexport const getFundingRateCache = async(chainId, poolAddress, symbolId) => {\n  return fundingRateCache.get(chainId, poolAddress, symbolId)\n}\n\nconst _getFundingRate = async(chainId, poolAddress, symbolId, useInfura) => {\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura)\n  const {symbol} = getPoolConfig2(poolAddress, null, symbolId)\n  let bTokenIdList = getBTokenIdList(poolAddress)\n  let promiseList = []\n  for (let i=0; i<bTokenIdList.length; i++) {\n    promiseList.push(perpetualPool.getBToken(i))\n  }\n  const bTokenInfoList = await Promise.all(promiseList)\n  const liquidity = bTokenInfoList.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\n  //const pnl = bTokenInfoList.reduce((accum, i) => accum.plus(i.pnl), bg(0))\n  //console.log('pnl', pnl.toString())\n\n  const [price, symbolInfo, parameterInfo ] = await Promise.all([\n    //getOraclePrice(poolAddress, symbolId),\n    getOraclePrice(chainId, symbol, useInfura),\n    perpetualPool.getSymbol(symbolId),\n    perpetualPool.getParameters(),\n  ])\n  priceCache.set(poolAddress, symbolId, price)\n  const { multiplier, fundingRateCoefficient, tradersNetVolume, feeRatio } = symbolInfo;\n  const { minPoolMarginRatio } = parameterInfo;\n  const fundingRateArgs = [\n    tradersNetVolume,\n    price,\n    multiplier,\n    liquidity,\n    fundingRateCoefficient,\n  ]\n  const fundingRatePerBlock = calculateFundingRate(...fundingRateArgs)\n  const fundingRate = processFundingRate(chainId, fundingRatePerBlock)\n  // const liquidityUsedArgs = [\n  //   tradersNetVolume,\n  //   price,\n  //   multiplier,\n  //   liquidity,\n  //   minPoolMarginRatio,\n  // ]\n  let symbolIdList = getSymbolIdList(poolAddress)\n  let promises = []\n  for (let i=0; i<symbolIdList.length; i++) {\n    promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n  }\n  const symbols = await Promise.all(promises)\n  //console.log('margin', margin.toString(), marginHeld.toString())\n  const liquidityUsedInAmount = symbols.reduce((accum, a) => {\n    return accum.plus(bg(a.tradersNetVolume).times(a.price).times(a.multiplier).times(minPoolMarginRatio).abs())\n  }, bg(0))\n\n  //const liquidityUsed = liquidityUsedInAmount.div(liquidity)\n  const res = {\n    price,\n    multiplier: multiplier.toString(),\n    feeRatio: feeRatio.toString(),\n    tradersNetVolume: tradersNetVolume.toString(),\n    liquidity: liquidity.toString(),\n    //pnl: pnl.toString(),\n    fundingRateCoefficient: fundingRateCoefficient.toString(),\n    minPoolMarginRatio: minPoolMarginRatio.toString(),\n    fundingRatePerBlock: fundingRatePerBlock,\n    fundingRate: fundingRate,\n    liquidityUsed: liquidityUsedInAmount.div(liquidity)\n  }\n  fundingRateCache.set(chainId, poolAddress, symbolId, res)\n  return res\n}\n\nexport const getFundingRate = async (chainId, poolAddress, symbolId, useInfura) => {\n  try {\n    const res = await _getFundingRate(chainId, poolAddress, symbolId, useInfura)\n    const { fundingRate, fundingRatePerBlock, liquidity, tradersNetVolume } = res\n    return {\n      fundingRate0: fundingRate.times(100).toString(),\n      fundingRatePerBlock: fundingRatePerBlock.toString(),\n      liquidity: liquidity.toString(),\n      volume: '-',\n      tradersNetVolume: tradersNetVolume.toString()\n    };\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return {\n    fundingRate0: '',\n    fundingRatePerBlock: '',\n    liquidity: '',\n    volume: '',\n    tradersNetVolume: '',\n  };\n}\n\nexport const getEstimatedFundingRate = async (\n  chainId,\n  poolAddress,\n  newNetVolume,\n  symbolId,\n  useInfura,\n) => {\n  try {\n    let res = fundingRateCache.get(chainId, poolAddress, symbolId)\n    if (!res) {\n      res = await _getFundingRate(chainId, poolAddress, symbolId, useInfura)\n    }\n    const args = [\n      bg(res.tradersNetVolume).plus(newNetVolume).toString(),\n      res.price,\n      res.multiplier,\n      res.liquidity,\n      res.fundingRateCoefficient,\n    ]\n    let fundingRate1 = calculateFundingRate(...args)\n    fundingRate1 = processFundingRate(chainId, fundingRate1)\n    return {\n      fundingRate1: fundingRate1.times(100).toString()\n    }\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return {\n    fundingRate1: '',\n  }\n}\n\nexport const getLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  symbolId,\n  useInfura,\n) => {\n  try {\n    let res = fundingRateCache.get(chainId, poolAddress, symbolId)\n    if (!res) {\n      res = await _getFundingRate(chainId, poolAddress, symbolId, useInfura)\n    }\n    return {\n      liquidityUsed0: res.liquidityUsed.times(100).toString(),\n    };\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return {\n    liquidityUsed0: '',\n  }\n};\n\nexport const getEstimatedLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  newNetVolume,\n  symbolId,\n  useInfura,\n) => {\n  try {\n    let res = fundingRateCache.get(chainId, poolAddress, symbolId)\n    if (!res) {\n      res = await _getFundingRate(chainId, poolAddress, symbolId, useInfura)\n    }\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura)\n    // const {pToken: pTokenAddress } = getPoolConfig2(poolAddress, null, symbolId)\n    // const pToken = pTokenFactory(chainId, pTokenAddress, useInfura);\n    // const { volume } = pToken.getPosition(accountAddress, symbolId);\n    let symbolIdList = getSymbolIdList(poolAddress)\n    let promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    let liquidityUsed0 = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.price).times(a.multiplier).times(a.tradersNetVolume.plus(newNetVolume)).abs())\n      } else {\n        return accum.plus(bg(a.price).times(a.multiplier).times(a.tradersNetVolume).abs())\n      }\n    }, bg(0))\n    //liquidityUsed0 = liquidityUsed0.times(res.minPoolMarginRatio)\n    //const liquidityUsed = bg(newNetVolume).times(res.price).times(res.multiplier).times(res.minPoolMarginRatio).div(res.liquidity)\n    const liquidityUsed1 = liquidityUsed0.times(res.minPoolMarginRatio).div(res.liquidity)\n    return {\n      liquidityUsed1: liquidityUsed1.times(100).toString()\n    }\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return {\n    liquidityUsed1: '',\n  }\n}\n\n\nexport const getPoolBTokensBySymbolId = async(chainId, poolAddress, accountAddress, symbolId, useInfura) => {\n  try {\n    let bTokenList = getBTokenList(poolAddress)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura)\n    const {pToken: pTokenAddress } = getPoolConfig2(poolAddress, null, symbolId)\n    const pToken = pTokenFactory(chainId, pTokenAddress, useInfura);\n    // let bTokenList = bTokensConfigList.map((i) => {\n    //   return {bTokenId: i.bTokenId, bTokenSymbol: i.bTokenSymbol, bTokenAddress: i.bToken}\n    // })\n    let promiseList = []\n    for (let i=0; i<bTokenList.length; i++) {\n      promiseList.push(bTokenFactory(chainId, bTokenList[i].bTokenAddress, useInfura).balanceOf(accountAddress))\n    }\n    const resultList = await Promise.all(promiseList)\n    for (let i=0; i<bTokenList.length; i++) {\n      bTokenList[i].walletBalance = resultList[i].toString()\n    }\n\n    const bTokenIdList = getBTokenIdList(poolAddress) \n    const symbolIdList = getSymbolIdList(poolAddress)\n    const [margins, positions, parameterInfo] = await Promise.all([\n      pToken.getMargins(accountAddress),\n      pToken.getPositions(accountAddress),\n      perpetualPool.getParameters(),\n    ]);\n    const { minInitialMarginRatio } = parameterInfo;\n\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const margin = bTokens.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.discount).times(margins[index]))\n    }, bg(0))\n    //console.log('margin', margin.toString())\n\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    const marginHeld = symbols.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).abs().times(minInitialMarginRatio))\n    }, bg(0))\n    //console.log('marginHeld', marginHeld.toString())\n\n    const pnl = symbols.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).minus(positions[index].cost))\n    }, bg(0))\n    //console.log('pnl', pnl.toString())\n\n    bTokenList = bTokenList.map((i, index) => {\n      if(!isNaN(parseFloat(bTokens[index].price)) || bTokens[index].price !== '0') {\n        i.availableBalance = max(min(margin.minus(marginHeld).plus(pnl).div(bTokens[index].price).div(bTokens[index].discount), margins[index]), bg(0)).toString()\n      } else {\n        i.availableBalance = '-'\n      }\n      return i\n    })\n    return bTokenList\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return []\n}\n","import { deriToNatural } from '../utils';\nimport { perpetualPoolFactory } from '../factory';\nimport { getPoolConfig2, getSymbolIdList} from '../config'\n\nimport { getRestServerConfig, DeriEnv } from '../../config';\n\nconst getHttpBase = () => {\n  return getRestServerConfig(DeriEnv.get());\n};\n\nconst fetchJson = async (url) => {\n  const resp = await fetch(url);\n  return await resp.json();\n};\n\nconst processTradeEvent = async (\n  perpetualPool,\n  info,\n  blockNumber,\n  txHash,\n  multiplier,\n  feeRatio\n) => {\n  const tradeVolume = deriToNatural(info.tradeVolume);\n  const timeStamp = await perpetualPool._getTimeStamp(blockNumber);\n\n  const direction = tradeVolume.gt(0) ? 'LONG' : 'SHORT';\n  const price = deriToNatural(info.price);\n  const time = `${+timeStamp.timestamp}000`;\n  const symbolId = info.symbolId\n  const transactionFee = perpetualPool._calculateFee(\n    tradeVolume,\n    price,\n    multiplier[parseInt(symbolId)],\n    feeRatio[parseInt(symbolId)]\n  );\n  const notional = tradeVolume.abs().times(price).times(multiplier[parseInt(symbolId)]);\n  const volume = tradeVolume.abs();\n\n  const res = {\n    direction,\n    //baseToken: bTokenSymbol,\n    symbolId,\n    price: price.toString(),\n    notional: notional.toString(),\n    volume: volume.toString(),\n    transactionFee: transactionFee.toString(),\n    transactionHash: txHash.toString(),\n    time,\n  };\n  return res;\n};\nconst getTradeHistoryOnline = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  symbolId,\n  fromBlock\n) => {\n\n  const symbolIdList = getSymbolIdList(poolAddress)\n  //console.log('symbolIdList', symbolIdList);\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n  const toBlock = await perpetualPool._getBlockInfo('latest');\n  fromBlock = parseInt(fromBlock);\n\n  let promises= []\n  for (let i=0; i<symbolIdList.length; i++) {\n    promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n  }\n  let symbols = await Promise.all(promises)\n\n  const multiplier = symbols.map((i) => i.multiplier.toString());\n  const feeRatio = symbols.map((i) => i.feeRatio.toString());\n\n  const filters = { owner: accountAddress };\n  let events = await perpetualPool._getPastEvents(\n    'Trade',\n    filters,\n    fromBlock,\n    toBlock.number\n  );\n\n  const result = [];\n  events  = events.filter((i) => i.returnValues.symbolId === symbolId)\n  //console.log(\"events length:\", events.length);\n  for (let i = 0; i < events.length; i++) {\n    const item = events[i];\n    const res = await processTradeEvent(\n      perpetualPool,\n      item.returnValues,\n      item.blockNumber,\n      item.transactionHash,\n      multiplier,\n      feeRatio,\n    );\n    result.unshift(res);\n  }\n  return result;\n};\n\nexport const getTradeHistory = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  symbolId\n) => {\n  try {\n    let tradeFromBlock, tradeHistory = [];\n    const res = await fetchJson(\n      `${getHttpBase()}/trade_history/${chainId}/${poolAddress}/${accountAddress}/${symbolId}`\n    );\n    if (res && res.success) {\n      tradeFromBlock = parseInt(res.data.tradeHistoryBlock);\n      if (res.data.tradeHistory && Array.isArray(res.data.tradeHistory)) {\n        tradeHistory = res.data.tradeHistory;\n      }\n    }\n    if (tradeHistory.length > 0) {\n      tradeHistory = tradeHistory\n        .filter((i) => i)\n        .map((i) => {\n          return {\n            direction: i.direction.trim(),\n            //baseToken: i.baseToken.trim(),\n            symbolId: i.symbolId,\n            price: deriToNatural(i.price).toString(),\n            notional: deriToNatural(i.notional).toString(),\n            volume: deriToNatural(i.volume).toString(),\n            transactionFee: deriToNatural(i.transactionFee).toString(),\n            transactionHash: i.transactionHash,\n            time: i.time.toString(),\n          };\n        });\n    }\n      //console.log('tradeHistory1',tradeHistory)\n    if (tradeFromBlock !== 0) {\n      // console.log(tradeFromBlock, liquidateFromBlock)\n      const [tradeHistoryOnline] = await Promise.all([\n        getTradeHistoryOnline(\n          chainId,\n          poolAddress,\n          accountAddress,\n          symbolId,\n          tradeFromBlock + 1\n        ),\n      ]);\n      const result = tradeHistoryOnline.concat(tradeHistory);\n      return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n    } else {\n\n      const {initialBlock} = getPoolConfig2(poolAddress)\n      tradeFromBlock = parseInt(initialBlock);\n      const [tradeHistoryOnline] = await Promise.all([\n        getTradeHistoryOnline(\n          chainId,\n          poolAddress,\n          accountAddress,\n          symbolId,\n          tradeFromBlock + 1\n        ),\n      ]);\n      const result = tradeHistoryOnline;\n      return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n    }\n  } catch(err) {\n    console.log(`getTradeHistory(${chainId}, ${poolAddress}, ${accountAddress}, ${symbolId}): ${err}`)\n  }\n  return []\n};\n","import { isOrderValid } from '../calculation';\nimport { getPoolConfig2, getSymbolIdList, getBTokenIdList } from '../config'\nimport {\n  bTokenFactory,\n  perpetualPoolRouterFactory,\n  pTokenFactory,\n  perpetualPoolFactory,\n} from '../factory';\nimport { getOracleInfo, bg } from '../utils';\n\nexport const unlock = async (chainId, poolAddress, accountAddress, bTokenId) => {\n   const { bToken: bTokenAddress } = getPoolConfig2(poolAddress, bTokenId);\n  const bToken = bTokenFactory(chainId, bTokenAddress);\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress, poolAddress)\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n\nexport const depositMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n   const { router: routerAddress } = getPoolConfig2(poolAddress);\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   let res;\n   try {\n     const tx = await perpetualPoolRouter.addMargin(accountAddress, bTokenId, amount);\n     res = { success: true, transaction: tx };\n   } catch (err) {\n     res = { success: false, error: err };\n   }\n   return res;\n}\n\nexport const withdrawMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum = false,\n) => {\n   const { router: routerAddress } = getPoolConfig2(poolAddress);\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   let res;\n   try {\n     const tx = await perpetualPoolRouter.removeMargin(accountAddress, bTokenId, amount, isMaximum);\n     res = { success: true, transaction: tx };\n   } catch (err) {\n     res = { success: false, error: err };\n   }\n   return res;\n}\n\nexport const tradeWithMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  symbolId,\n) => {\n   const { router: routerAddress, pToken: pTokenAddress } = getPoolConfig2(poolAddress);\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n   const pToken = pTokenFactory(chainId, pTokenAddress);\n   const [parameterInfo, positions] = await Promise.all([\n    //  getOraclePrice(poolAddress, symbolId),\n    //  perpetualPool.getSymbol(symbolId),\n     perpetualPool.getParameters(),\n     pToken.getPositions(accountAddress),\n     //pToken.getMargin(accountAddress, symbolId),\n   ]);\n\n   //const { multiplier } = symbolInfo;\n   const { minInitialMarginRatio, minPoolMarginRatio} = parameterInfo;\n\n   const bTokenIdList = getBTokenIdList(poolAddress)\n   const margins = await pToken.getMargins(accountAddress)\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const margin = bTokens.reduce((accum, i, index) => {\n      return accum.plus(bg(i.price).times(i.discount).times(margins[index]))\n    }, bg(0))\n\n    const liquidity = bTokens.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\n    let symbolIdList = getSymbolIdList(poolAddress)\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    let marginHeld = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume.plus(newVolume)).abs())\n      } else {\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).abs())\n      }\n    }, bg(0))\n    marginHeld = marginHeld.times(minInitialMarginRatio)\n\n    //console.log('margin', margin.toString(), marginHeld.toString())\n    let liquidityUsed = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.tradersNetVolume.plus(newVolume)).times(a.price).times(a.multiplier).abs())\n      } else {\n        return accum.plus(bg(a.tradersNetVolume).times(a.price).times(a.multiplier).abs())\n      }\n    }, bg(0))\n    liquidityUsed = liquidityUsed.times(minPoolMarginRatio)\n    //console.log('liquidityUsed', liquidityUsed.toString())\n\n   const orderValidation = isOrderValid(\n     //price,\n     margin,\n     marginHeld,\n     liquidity,\n     liquidityUsed,\n     //multiplier,\n     //minPoolMarginRatio,\n     //bg(newVolume),\n   )\n   let res;\n   if (orderValidation.success) {\n    try {\n      const tx = await perpetualPoolRouter.trade(accountAddress, symbolId, newVolume);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n   } else {\n     res = { success: false, error: orderValidation.error};\n   }\n   return res;\n}\n\nexport const closePosition = async (chainId, poolAddress, accountAddress, symbolId) => {\n   const { router: routerAddress, pToken: pTokenAddress } = getPoolConfig2(poolAddress);\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const pToken = pTokenFactory(chainId, pTokenAddress)\n   const { volume } = await pToken.getPosition(accountAddress, symbolId)\n   const newVolume = volume.negated()\n   let res;\n   if (!volume.eq(0)) {\n    try {\n      const tx = await perpetualPoolRouter.trade(accountAddress, symbolId, newVolume);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n    return res;\n  } else {\n    res = { success: false, error: 'no position to close' };\n  }\n  return res\n}\n\nexport const depositMarginWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n   const { router: routerAddress } = getPoolConfig2(poolAddress);\n   const symbolIdList = getSymbolIdList(poolAddress)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   let res;\n   try {\n     const promises = symbolIdList.map(async(s) => {\n       return await getOracleInfo(poolAddress, s)\n     })\n     const prices = await Promise.all(promises)\n     const priceInfos = prices.map((p, index) => {\n       return [symbolIdList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n     })\n     const tx = await perpetualPoolRouter.addMarginWithPrices(accountAddress, bTokenId, amount, priceInfos);\n     res = { success: true, transaction: tx };\n   } catch (err) {\n     res = { success: false, error: err };\n   }\n   return res;\n}\n\nexport const withdrawMarginWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum = false,\n) => {\n   const { router: routerAddress } = getPoolConfig2(poolAddress);\n   const symbolIdList = getSymbolIdList(poolAddress)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   let res;\n   try {\n     const promises = symbolIdList.map(async(s) => {\n       return await getOracleInfo(poolAddress, s)\n     })\n     const prices = await Promise.all(promises)\n     const priceInfos = prices.map((p, index) => {\n       return [symbolIdList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n     })\n     const tx = await perpetualPoolRouter.removeMarginWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum);\n     res = { success: true, transaction: tx };\n   } catch (err) {\n     res = { success: false, error: err };\n   }\n   return res;\n}\n\nexport const tradeWithMarginWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  symbolId,\n) => {\n   const { router: routerAddress, pToken: pTokenAddress } = getPoolConfig2(poolAddress);\n   const symbolIdList = getSymbolIdList(poolAddress)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n   const pToken = pTokenFactory(chainId, pTokenAddress);\n   //const [price, symbolInfo, parameterInfo, positions] = await Promise.all([\n   const [parameterInfo, positions] = await Promise.all([\n    //  getOraclePrice(poolAddress, symbolId),\n    //  perpetualPool.getSymbol(symbolId),\n     perpetualPool.getParameters(),\n     pToken.getPositions(accountAddress),\n     //pToken.getMargin(accountAddress, symbolId),\n   ]);\n\n   //const { multiplier } = symbolInfo;\n   const { minInitialMarginRatio, minPoolMarginRatio} = parameterInfo;\n\n   const bTokenIdList = getBTokenIdList(poolAddress)\n   const margins = await pToken.getMargins(accountAddress)\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const margin = bTokens.reduce((accum, i, index) => {\n      return accum.plus(bg(i.price).times(i.discount).times(margins[index]))\n    }, bg(0))\n\n    const liquidity = bTokens.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\n    //console.log('liquidity', liquidity.toString())\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    let marginHeld = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume.plus(newVolume)).abs())\n      } else {\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).abs())\n      }\n    }, bg(0))\n    marginHeld = marginHeld.times(minInitialMarginRatio)\n\n    //console.log('margin', margin.toString(), marginHeld.toString())\n    let liquidityUsed = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.tradersNetVolume.plus(newVolume)).times(a.price).times(a.multiplier).abs())\n      } else {\n        return accum.plus(bg(a.tradersNetVolume).times(a.price).times(a.multiplier).abs())\n      }\n    }, bg(0))\n    liquidityUsed = liquidityUsed.times(minPoolMarginRatio)\n    //console.log('liquidityUsed', liquidityUsed.toString())\n\n    // const pnl = bTokens.reduce((accum, i) => accum.plus(i.pnl), bg(0))\n    // console.log('pnl', pnl.toString())\n\n   const orderValidation = isOrderValid(\n     //price,\n     margin,\n     marginHeld,\n     liquidity,\n     liquidityUsed,\n     //multiplier,\n     //minPoolMarginRatio,\n     //bg(newVolume),\n   )\n   let res;\n   if (orderValidation.success) {\n    try {\n     promises = symbolIdList.map(async(s) => {\n       return await getOracleInfo(poolAddress, s)\n     })\n     const prices = await Promise.all(promises)\n     const priceInfos = prices.map((p, index) => {\n       return [symbolIdList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n     })\n      const tx = await perpetualPoolRouter.tradeWithPrices(accountAddress, symbolId, newVolume, priceInfos);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n   } else {\n     res = { success: false, error: orderValidation.error};\n   }\n   return res;\n}\n\nexport const closePositionWithPrices = async (chainId, poolAddress, accountAddress, symbolId) => {\n   const { router: routerAddress, pToken: pTokenAddress } = getPoolConfig2(poolAddress);\n   const symbolIdList = getSymbolIdList(poolAddress)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const pToken = pTokenFactory(chainId, pTokenAddress)\n   const { volume } = await pToken.getPosition(accountAddress, symbolId)\n   const newVolume = volume.negated()\n   let res;\n   if (!volume.eq(0)) {\n    try {\n     const promises = symbolIdList.map(async(s) => {\n       return await getOracleInfo(poolAddress, s)\n     })\n     const prices = await Promise.all(promises)\n     const priceInfos = prices.map((p, index) => {\n       return [symbolIdList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n     })\n      const tx = await perpetualPoolRouter.tradeWithPrices(accountAddress, symbolId, newVolume, priceInfos);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n    return res;\n  } else {\n    res = { success: false, error: 'no position to close' };\n  }\n  return res\n}","import { brokerManagerFactory } from \"../factory\"\nimport { normalizeAddress, normalizeChainId } from \"../utils\"\nimport { getBrokerConfig } from \"../config\"\n\nexport const getBroker = async(chainId, accountAddress, useInfura) => {\n  chainId = normalizeChainId(chainId)\n  accountAddress = normalizeAddress(accountAddress)\n  const {address: brokerAddress} = getBrokerConfig(chainId)\n  let res = ''\n  try {\n    const brokerManager = brokerManagerFactory(chainId, brokerAddress, useInfura)\n    res = await brokerManager.getBroker(accountAddress)\n  } catch (err) {\n    console.log(err)\n  }\n  return res\n}\n\nexport const setBroker = async(chainId, accountAddress, brokerAddress) => {\n  chainId = normalizeChainId(chainId)\n  accountAddress = normalizeAddress(accountAddress)\n  brokerAddress = normalizeAddress(brokerAddress);\n  const {address: brokerManagerAddress} = getBrokerConfig(chainId)\n  let res\n  try {\n    const brokerManager = brokerManagerFactory(chainId, brokerManagerAddress)\n    const tx = await brokerManager.setBroker(accountAddress, brokerAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res\n}","export {\n  DeriEnv,\n  //getContractAddressConfig,\n  getLpContractAddressConfig,\n  getSlpContractAddressConfig,\n} from './config';\nexport * from './utils';\nexport * from './calculation';\n\nexport * from './api/apiGlobals';\nexport * from './api/factoryApi';\nexport * from './api/walletApi';\nexport {\n  // isUnlocked,\n  // getEstimatedMargin,\n  // getEstimatedFee,\n  // getEstimatedFundingRate,\n  // getEstimatedLiquidityUsed,\n  isDeriUnlocked,\n  getUserWormholeSignature,\n  // getFundingRate,\n  //getPositionInfo,\n  getDeriBalance,\n} from './api/contractQueryApi';\nexport {\n  //unlock,\n  //depositMargin,\n  //withdrawMargin,\n  //addLiquidity,\n  //removeLiquidity,\n  //tradeWithMargin,\n  //closePosition,\n  mint,\n  mintDToken,\n  freeze,\n  mintDeri,\n  unlockDeri,\n  mintAirdrop,\n} from './api/contractTransactionApi';\nexport {\n  getUserInfo,\n  getUserInfoHarvest,\n  getUserInfoTotal,\n  getUserInfoAll,\n  //getPoolInfoApy,\n  getLpPoolInfoApy,\n  getUserInfoInPool,\n  getUserInfoAllForAirDrop,\n} from './api/databaseApi';\n\n// export * from './api/slpPoolApi';\n// export * from './api/clpPoolApi';\n\n// export * from './api/tradeHistoryApi';\nexport {\n//getSpecification2 as getSpecification,\n// getPositionInfo2 as getPositionInfo,\n//getLiquidityInfo2 as getLiquidityInfo,\n//getWalletBalance2 as getWalletBalance,\n//getFundingRate2 as getFundingRate,\n//getLiquidityUsed2 as getLiquidityUsed,\ngetFundingRateCache2 as getFundingRateCache,\ngetSlpLiquidityInfo2 as getSlpLiquidityInfo,\ngetSlpWalletBalance2 as getSlpWalletBalance,\ngetClpLiquidityInfo2 as getClpLiquidityInfo,\ngetClpWalletBalance2 as getClpWalletBalance,\n//getDeriBalance2 as getDeriBalance,\n//getTradeHistory2 as getTradeHistory,\nfetchRestApi,\n} from './api/restApi';\n\n// export {\n  //tradeWithMargin2 as tradeWithMargin,\n  //closePosition2 as closePosition,\n  //depositMargin2 as depositMargin,\n  //withdrawMargin2 as withdrawMargin,\n  //addLiquidity2 as addLiquidity,\n  //removeLiquidity2 as removeLiquidity,\n// } from './api/contractTransactionApiV2'\n\nexport * from './api/lpPoolApi';\n\nexport * from './api_wrapper';\n\nexport {\n  getPoolConfigList,\n  getFilteredPoolConfigList,\n  getPoolBTokensBySymbolId,\n  setBroker,\n} from './v2';\n","import Web3 from 'web3';\nimport { metaMaskWeb3 } from '../factory/web3';\nimport { hexToNumber } from '../utils';\n\n/**\n * check ethereum client status for web browser\n * @function\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.isMetaMask - check if it is MetaMask client\n * @returns {boolean} response.[error] - error message when request failed\n */\nexport const hasWallet = () => {\n  if (window.ethereum && window.ethereum.isMetaMask) {\n    return { success: true, isMetaMask: true };\n  }\n  return {\n    success: false,\n    error:\n      'The browser is not support ethereum wallet, please install MetaMask to proceed.',\n  };\n};\n\n/**\n *  Connect wallet using MetaMask account\n * @async\n * @function\n * @param {function} [handleChainChanged] - Callback when chainId changed\n * @param {function} [handleAccountChanged]  - callback when account changed\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.chainId - chain Id\n * @returns {string} response.account - account address\n * @returns {boolean} response.[error] - error message when request failed\n */\nexport const connectWallet = async (\n  handleChainChanged,\n  handleAccountChanged\n) => {\n  if (typeof window.ethereum !== undefined) {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts',\n    });\n    const chainId = parseInt(\n      await window.ethereum.request({ method: 'net_version' })\n    );\n    // const chainId = hexToNumber(\n    //   await window.ethereum.request({ method: 'eth_chainId' })\n    // );\n    const account = Array.isArray(accounts) && accounts[0];\n\n    // await web3.eth.requestAccounts().then(console.log)\n    window.ethereum.on('accountsChanged', (accounts) => {\n      let account;\n      if (accounts.length > 0) {\n        account = accounts[0];\n      } else {\n        account = '';\n      }\n      if (typeof handleAccountChanged === 'function') {\n        handleAccountChanged(account);\n      } else {\n        window.location.reload();\n      }\n      //console.log('accountChanged', account);\n    });\n    window.ethereum.on('chainChanged', (chainId) => {\n      let res = hexToNumber(chainId);\n      if (typeof handleChainChanged === 'function') {\n        handleChainChanged(res);\n      } else {\n        window.location.reload();\n      }\n      //console.log('chainChanged', res);\n    });\n    return { success: true, account, chainId };\n  }\n  return {\n    success: false,\n    error: 'Cannot connect wallet, please install MetaMask.',\n  };\n};\n\n/**\n * Get balance of the connected account\n * @async\n * @method\n * @param {string} chainId - Id of the chain\n * @param {string} accountAddress - Address of the connected account\n * @returns {string} Account balance\n */\nexport const getUserWalletBalance = async (chainId, walletAddress) => {\n  //const web3 = web3Factory(chainId);\n  const web3 = metaMaskWeb3();\n  const balance = await web3.eth.getBalance(walletAddress);\n  const res = Web3.utils.fromWei(balance);\n  return res;\n};\n","import {\n  getSlpLiquidityInfo,\n  getSlpWalletBalance,\n  isSlpUnlocked,\n  unlockSlp,\n  // addSlpLiquidity,\n  // removeSlpLiquidity,\n} from './slpPoolApi';\nimport {\n  getClp2LiquidityInfo,\n  getClp2WalletBalance,\n  isClp2Unlocked,\n  unlockClp2,\n  // addSlpLiquidity,\n  // removeSlpLiquidity,\n} from './clp2PoolApi';\nimport {\n  getClpLiquidityInfo,\n  getClpWalletBalance,\n  isClpUnlocked,\n  unlockClp,\n  // addClpLiquidity,\n  // removeClpLiquidity,\n} from './clpPoolApi';\n\nimport {\n  addSlpLiquidity2 as addSlpLiquidity,\n  removeSlpLiquidity2 as removeSlpLiquidity,\n  addClpLiquidity2 as addClpLiquidity,\n  removeClpLiquidity2 as removeClpLiquidity,\n  addClp2Liquidity2 as addClp2Liquidity,\n  removeClp2Liquidity2 as removeClp2Liquidity,\n} from './contractTransactionApiV2'\nimport { getLpContractAddress } from '../utils';\n\n/**\n * Get liquidity info of LP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.liquidity\n * @returns {string} response.bTokenBalance\n * @returns {string} response.shares\n */\nexport const getLpLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await getSlpLiquidityInfo(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp') {\n    return await getClpLiquidityInfo(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp2') {\n    return await getClp2LiquidityInfo(chainId, poolAddress, accountAddress);\n  } else {\n    console.log(`getLpLiquidityInfo(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Add liquidity to LP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addLpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await addSlpLiquidity(chainId, poolAddress, accountAddress, amount);\n  } else if (type === 'clp') {\n    return await addClpLiquidity(chainId, poolAddress, accountAddress, amount);\n  } else if (type === 'clp2') {\n    return await addClp2Liquidity(chainId, poolAddress, accountAddress, amount);\n  } else {\n    console.log(`addLpLiquidity(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Remove liquidity to LP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeLpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await removeSlpLiquidity(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount\n    );\n  } else if (type === 'clp') {\n    return await removeClpLiquidity(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount\n    );\n  } else if (type === 'clp2') {\n    return await removeClp2Liquidity(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount\n    );\n  } else {\n    console.log(`removeLpLiquidity(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Check account is unlocked in the lp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isLpUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await isSlpUnlocked(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp') {\n    return await isClpUnlocked(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp2') {\n    return await isClp2Unlocked(chainId, poolAddress, accountAddress);\n  } else {\n    console.log(`isLpLiquidity(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Unlock the account in the lp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockLp = async (chainId, poolAddress, accountAddress) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await unlockSlp(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp') {\n    return await unlockClp(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp2') {\n    return await unlockClp2(chainId, poolAddress, accountAddress);\n  } else {\n    console.log(`unlockLp(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Get account balance in lp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string} Account balance\n */\nexport const getLpWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await getSlpWalletBalance(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp') {\n    return await getClpWalletBalance(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp2') {\n    return await getClp2WalletBalance(chainId, poolAddress, accountAddress);\n  } else {\n    console.log(`getLpWalletBalance(): invalid lp type ${type}`);\n  }\n};\n","import { makeObservable, observable, action } from \"mobx\";\nimport { getContractAddressConfig, DeriEnv } from \"../lib/web3js/indexV2\";\n\nexport default class Config {\n  all = []\n\n  constructor(){\n    makeObservable(this,{\n      all : observable,\n      setAll : action\n    })\n  }\n\n  load(version){\n    const current = version && version.current;\n    let configs = getContractAddressConfig(DeriEnv.get(),current)\n    if(version){\n      configs = configs.filter(c => c.version === version.current)\n      //v2 不需要展示base token,需要合并相同的base token\n      if(version.isV2){\n        configs = configs.reduce((total,cur) => {\n          const pos = total.findIndex(c => c.symbol === cur.symbol && c.pool === cur.pool);\n          if(pos === -1 ){\n            total.push(cur)\n          }\n          return total;\n        },[])\n      }\n    }\n    this.setAll(configs)\n    return this.all;\n  }\n\n  setAll(all){\n    this.all = all;\n  }\n  \n}","const { getContractAddressConfig:getContractAddressConfig2} = require(\"../config\");\nconst { getPoolConfigList:getPoolConfigListV2} = require(\"../v2/config\")\n\nexport const getContractAddressConfig = (env = 'dev', version) => {\n  if (!version || version === '1' || version === 'v1') {\n    return getContractAddressConfig2(env)\n  } else if (version === '2' || version === 'v2') {\n    return getPoolConfigListV2(env).concat(getContractAddressConfig2(env))\n  } else {\n    throw new Error(`getPoolContractAddress: invalid version: ${version}`)\n  }\n}","import { getLiquidityInfo2 } from '../api/restApi';\nimport { getPoolLiquidity as getPoolLiquidity2, getPoolInfoApy as getPoolInfoApy2 } from '../api/databaseApi';\nimport { \n  getLiquidityInfo as getLiquidityInfoV2,\n  getPoolLiquidity as getPoolLiquidityV2,\n  getPoolInfoApy as getPoolInfoApyV2,\n } from '../v2';\n\nexport const getLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId,\n) => {\n  if (bTokenId === undefined) {\n    return getLiquidityInfo2(chainId, poolAddress, accountAddress)\n  } else {\n    return getLiquidityInfoV2(chainId, poolAddress, accountAddress, bTokenId)\n  }\n};\n\nexport const getPoolLiquidity = async (\n  chainId,\n  poolAddress,\n  bTokenId,\n) => {\n  if (bTokenId === undefined) {\n    return getPoolLiquidity2(chainId, poolAddress)\n  } else {\n    return getPoolLiquidityV2(chainId, poolAddress, bTokenId)\n  }\n};\n\nexport const getPoolInfoApy = async (chainId, poolAddress, bTokenId) => {\n  if (bTokenId === undefined) {\n    return getPoolInfoApy2(chainId, poolAddress)\n  } else {\n    return getPoolInfoApyV2(chainId, poolAddress, bTokenId)\n  }\n};","import {addLiquidity2, removeLiquidity2 } from '../api/contractTransactionApiV2';\nimport {\n  addLiquidity as addLiquidityV2,\n  removeLiquidity as removeLiquidityV2\n  // addLiquidityWithPrices as addLiquidityV2,\n  // removeLiquidityWithPrices as removeLiquidityV2,\n} from '../v2';\n\nexport const addLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n  if (bTokenId === undefined) {\n    return addLiquidity2(chainId, poolAddress, accountAddress, amount);\n  } else {\n    return addLiquidityV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount,\n      bTokenId\n    );\n  }\n}\n\nexport const removeLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum,\n) => {\n  if (bTokenId === undefined) {\n    return removeLiquidity2(chainId, poolAddress, accountAddress, amount);\n  } else {\n    return removeLiquidityV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount,\n      bTokenId,\n      isMaximum,\n    );\n  }\n}\n","import {\n  getPositionInfo as getPositionInfo2,\n  isUnlocked as isUnlocked2,\n  isDeriUnlocked,\n  getEstimatedMargin as getEstimatedMargin2,\n  getEstimatedFee as getEstimatedFee2,\n  getEstimatedFundingRate as getEstimatedFundingRate2,\n  getEstimatedLiquidityUsed as getEstimatedLiquidityUsed2,\n  getWalletBalance as getWalletBalance2,\n} from '../api/contractQueryApi'\n\nimport {\n  getSpecification2,\n  getFundingRate2,\n  getLiquidityUsed2,\n  getFundingRateCache2,\n} from '../api/restApi'\n//import { bTokenFactory } from '../factory/contracts'\n\nimport {\n  getPositionInfo as getPositionInfoV2,\n  isUnlocked as isUnlockedV2,\n  getEstimatedMargin as getEstimatedMarginV2,\n  getEstimatedFee as getEstimatedFeeV2,\n  getEstimatedFundingRate as getEstimatedFundingRateV2,\n  getEstimatedLiquidityUsed as getEstimatedLiquidityUsedV2,\n  getSpecification as getSpecificationV2,\n  getWalletBalance as getWalletBalanceV2,\n  getFundingRate as getFundingRateV2,\n  getLiquidityUsed as getLiquidityUsedV2,\n  getFundingRateCache as getFundingRateCacheV2,\n} from '../v2'\n\n\nexport const getSpecification = async (\n  chainId,\n  poolAddress,\n  bTokenId,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getSpecification2(chainId, poolAddress)\n  } else {\n    return getSpecificationV2(chainId, poolAddress, bTokenId, symbolId)\n  }\n}\n\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress, symbolId) => {\n  if (symbolId === undefined) {\n    return getPositionInfo2(chainId, poolAddress, accountAddress)\n  } else {\n    return getPositionInfoV2(chainId, poolAddress, accountAddress, symbolId)\n  }\n}\nexport const getWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId,\n) => {\n  if (bTokenId === undefined) {\n    return getWalletBalance2(chainId, poolAddress, accountAddress)\n  } else {\n    return getWalletBalanceV2(chainId, poolAddress, accountAddress, bTokenId)\n  }\n}\n\nexport const isUnlocked = async (chainId, poolAddress, accountAddress, bTokenId) => { \n  if (accountAddress === undefined) {\n    return isDeriUnlocked(chainId, poolAddress)\n  } else if (bTokenId === undefined) {\n    return isUnlocked2(chainId, poolAddress, accountAddress)\n  } else {\n    return isUnlockedV2(chainId, poolAddress, accountAddress, bTokenId)\n  }\n}\n\nexport const getEstimatedFee = async (chainId, poolAddress, volume, symbolId) => {\n  if (symbolId === undefined) {\n    return getEstimatedFee2(chainId, poolAddress, volume)\n  } else {\n    return getEstimatedFeeV2(chainId, poolAddress, volume, symbolId)\n  }\n}\n\nexport const getEstimatedMargin = async(\n  chainId,\n  poolAddress,\n  accountAddress,\n  volume,\n  leverage,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getEstimatedMargin2(chainId, poolAddress, accountAddress, volume, leverage)\n  } else {\n    return getEstimatedMarginV2(chainId, poolAddress, accountAddress, volume, leverage, symbolId)\n  }\n}\n\nexport const getFundingRate = async (chainId, poolAddress, symbolId) => {\n  if (symbolId === undefined) {\n    return getFundingRate2(chainId, poolAddress)\n  } else {\n    return getFundingRateV2(chainId, poolAddress, symbolId)\n  }\n}\n\nexport const getEstimatedFundingRate = async (\n  chainId,\n  poolAddress,\n  newNetVolume,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getEstimatedFundingRate2(chainId, poolAddress, newNetVolume)\n  } else {\n    return getEstimatedFundingRateV2(chainId, poolAddress, newNetVolume, symbolId)\n  }\n}\n\nexport const getLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  symbolId\n) => {\n  if (symbolId === undefined) {\n    return getLiquidityUsed2(chainId, poolAddress)\n  } else {\n    return getLiquidityUsedV2(chainId, poolAddress, symbolId)\n  }\n};\n\nexport const getEstimatedLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  newNetVolume,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getEstimatedLiquidityUsed2(chainId, poolAddress, newNetVolume)\n  } else {\n    return getEstimatedLiquidityUsedV2(chainId, poolAddress, newNetVolume, symbolId)\n  }\n}\n\nexport const getFundingRateCache = async(chainId, poolAddress, symbolId) => {\n  if (symbolId === undefined) {\n    return getFundingRateCache2(chainId, poolAddress)\n  } else {\n    return getFundingRateCacheV2(chainId, poolAddress, symbolId)\n  }\n}\n","import { unlock as unlock2, unlockDeri } from '../api/contractTransactionApi';\nimport {\n  tradeWithMargin2,\n  closePosition2,\n  depositMargin2,\n  withdrawMargin2,\n} from '../api/contractTransactionApiV2';\nimport {\n  unlock as unlockV2,\n  tradeWithMargin as tradeWithMarginV2,\n  closePosition as closePositionV2,\n  depositMargin as depositMarginV2,\n  withdrawMargin as withdrawMarginV2,\n  // tradeWithMarginWithPrices as tradeWithMarginV2,\n  // depositMarginWithPrices as depositMarginV2,\n  // withdrawMarginWithPrices as withdrawMarginV2,\n  // closePositionWithPrices as closePositionV2,\n} from '../v2';\n\nexport const unlock = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId\n) => {\n  if (accountAddress === undefined) {\n    return unlockDeri(chainId, poolAddress);\n  } else if (bTokenId === undefined) {\n    return unlock2(chainId, poolAddress, accountAddress);\n  } else {\n    return unlockV2(chainId, poolAddress, accountAddress, bTokenId);\n  }\n};\n\nexport const depositMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId\n) => {\n  if (bTokenId === undefined) {\n    return depositMargin2(chainId, poolAddress, accountAddress, amount);\n  } else {\n    return depositMarginV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount,\n      bTokenId\n    );\n  }\n};\n\nexport const withdrawMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum\n) => {\n  if (bTokenId === undefined) {\n    return withdrawMargin2(chainId, poolAddress, accountAddress, amount);\n  } else {\n    return withdrawMarginV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount,\n      bTokenId,\n      isMaximum\n    );\n  }\n};\n\nexport const tradeWithMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  symbolId\n) => {\n  if (symbolId === undefined) {\n    return tradeWithMargin2(chainId, poolAddress, accountAddress, newVolume);\n  } else {\n    return tradeWithMarginV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      newVolume,\n      symbolId\n    );\n  }\n};\n\nexport const closePosition = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  symbolId\n) => {\n  if (symbolId === undefined) {\n    return closePosition2(chainId, poolAddress, accountAddress);\n  } else {\n    return closePositionV2(chainId, poolAddress, accountAddress, symbolId);\n  }\n};\n","\nimport {getTradeHistory2} from '../api/restApi';\nimport { \n  getTradeHistory as getTradeHistoryV2\n } from '../v2';\n\nexport const getTradeHistory = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getTradeHistory2(chainId, poolAddress, accountAddress);\n  } else {\n    return getTradeHistoryV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      symbolId,\n    );\n  }\n}","import Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\n\n// == bg\nBigNumber.config({\n  DECIMAL_PLACES: 18,\n  ROUNDING_MODE: BigNumber.ROUND_DOWN,\n  EXPONENTIAL_AT: 256,\n});\n\nexport const bg = (value, base = 0) => {\n  if (base === 0) {\n    return BigNumber(value);\n  }\n  if (base > 0) {\n    return BigNumber(value).times(BigNumber(`1${'0'.repeat(base)}`));\n  }\n  return BigNumber(value).div(BigNumber(`1${'0'.repeat(-base)}`));\n};\n\nexport const max = (value1, value2) => {\n  if (value1.gte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\nexport const min = (value1, value2) => {\n  if (value1.lte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\nexport const fromWei = (value, unit='ether') => Web3.utils.fromWei(value, unit)\n\nexport const toWei = (value, unit='ether') => Web3.utils.toWei(value, unit)\n\nexport const toNatural = (value, num = 0) => BigNumber(value).toFixed(num).toString();\n\nexport const toHex = (value) => Web3.utils.toHex(value);\n\nexport const toChecksumAddress = (value) => Web3.utils.toChecksumAddress(value);\n\nexport const hexToString = (value) => Web3.utils.hexToUtf8(value);\n\nexport const hexToNumber = (value) => Web3.utils.hexToNumber(value);\n\nexport const hexToNumberString = (value) => Web3.utils.hexToNumberString(value);\n\nexport const hexToDeri = (value) => bg(hexToNumberString(value));\n\nexport const hexToNatural = (value) => bg(hexToNumberString(value), -18);\n\nexport const deriToNatural = (value) => bg(value, -18);\n\nexport const naturalToDeri = (value) => bg(value, 18).toFixed(0);\n\n// == convert\nexport const numberToHex = (value) => Web3.utils.numberToHex(value);","import { getOracleConfig } from '../config/oracle';\nimport { getPoolConfig2 } from '../config/pool';\nimport { oracleFactory } from '../factory';\nimport { normalizeChainId } from './validate';\nimport { DeriEnv } from '../../config';\n\nexport const getOracleUrl = (poolAddress, symbolId) => {\n  const env = DeriEnv.get();\n  const { symbol } = getPoolConfig2(poolAddress, null, symbolId);\n  const addSymbolParam = (url, symbol = 'BTCUSD') => `${url}?symbol=${symbol}`;\n  if (env === 'prod' || env === 'production') {\n    // for production\n    if (symbol) {\n      return addSymbolParam('https://oracle4.deri.finance/price', symbol);\n    }\n    return 'https://oracle4.deri.finance/price';\n  } else {\n    if (symbol) {\n      return addSymbolParam('https://oracle4.deri.finance/price', symbol);\n    }\n    // for test\n    return 'https://oracle4.deri.finance/price';\n  }\n};\n\nexport const getOracleInfo = async (poolAddress, symbolId) => {\n  let url = getOracleUrl(poolAddress, symbolId);\n  //console.log('oracle url', url);\n  let retry = 2;\n  let res;\n  while (retry > 0) {\n    res = await fetch(url, { mode: 'cors', cache: 'no-cache' });\n    if (res.ok) {\n      break;\n    }\n    retry -= 1;\n  }\n  if (retry === 0 && !res) {\n    throw new Error(`fetch oracle info error: exceed max retry(2).`);\n  }\n  return await res.json();\n};\n\n// export const getOraclePrice = async (poolAddress, symbolId) => {\n//   const responseJson = await getOracleInfo(poolAddress, symbolId);\n//   let price = responseJson.price;\n//   if (!price) {\n//     price = '0';\n//   }\n//   return deriToNatural(responseJson.price).toString();\n// };\n\nexport const getOraclePrice = async (chainId, symbol, useInfura = false) => {\n  chainId = normalizeChainId(chainId);\n  const config = getOracleConfig(chainId, symbol);\n  if (config && config.address) {\n    if (!config.decimal) {\n      throw new Error('getOraclePrice: decimal is empty', config.decimal);\n    }\n    const oracle = oracleFactory(\n      chainId,\n      config.address,\n      symbol,\n      config.decimal,\n      useInfura\n    );\n    return await oracle.getPrice();\n  }\n};\n","import { bg, getDailyBlockNumber } from '../utils';\n\nexport const calculateLiquidityUsed = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  poolMarginRatio\n) => {\n  return bg(\n    ((tradersNetVolume * price * multiplier) / liquidity) * poolMarginRatio\n  ).abs();\n}\n\nexport const calculateFundingRate = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  fundingRateCoefficient\n) => {\n  return ((tradersNetVolume * price * multiplier) / liquidity) *\n  fundingRateCoefficient;\n}\n\nexport const processFundingRate = (chainId, fundingRate) => {\n  const annualBlockCount = getDailyBlockNumber(chainId);\n  //console.log(annualBlockCount);\n  return bg(fundingRate).times(annualBlockCount);\n};\n","import { bg, max, min } from '../utils';\n\nexport * from './fundingRate';\n\nexport const calculateShareValue = (lTokenTotalSupply, liquidity) =>\n  lTokenTotalSupply.eq(0) ? bg(0) : liquidity.div(lTokenTotalSupply);\nexport const calculateMaxRemovableShares = (\n  lTokenBalance,\n  lTokenTotalSupply,\n  liquidity,\n  tradersNetVolume,\n  tradersNetCost,\n  multiplier,\n  minPoolMarginRatio,\n  price\n) => {\n  const shareValue = calculateShareValue(lTokenTotalSupply, liquidity);\n  const value = tradersNetVolume.times(price).times(multiplier);\n  const removable = liquidity\n    .plus(tradersNetCost)\n    .minus(value)\n    .minus(value.abs().times(minPoolMarginRatio));\n  const shares = max(min(lTokenBalance, removable.div(shareValue)), bg(0));\n  return shares;\n};\n\nexport const calculateEntryPrice = (volume, cost, multiplier) =>\n  volume.eq(0) ? bg(0) : cost.div(volume).div(multiplier);\n\nexport const calculateMarginHeld = (\n  price,\n  volume,\n  multiplier,\n  minInitialMarginRatio\n) => {\n  return volume.abs().times(price).times(multiplier).times(minInitialMarginRatio)\n};\n\nexport const calculatePnl = (price, volume, multiplier, cost) => {\n  return volume.times(price).times(multiplier).minus(cost);\n}\n\nexport const calculateMaxWithdrawMargin = (\n  price,\n  volume,\n  margin,\n  cost,\n  multiplier,\n  minInitialMarginRatio\n) => {\n  if (volume.eq(0)) {\n    return margin;\n  }\n  const held = calculateMarginHeld(\n    price,\n    volume,\n    multiplier,\n    minInitialMarginRatio\n  );\n  const pnl = calculatePnl(price, volume, multiplier, cost);\n  const withdrawable = max(margin.plus(pnl).minus(held.times(1.02)), bg(0));\n  return withdrawable;\n};\n\nexport const calculateLiquidationPrice = (\n  volume,\n  margin,\n  cost,\n  multiplier,\n  minMaintenanceMarginRatio\n) => {\n  const tmp = cost.minus(margin).div(volume).div(multiplier);\n  let res = volume.gt(0)\n    ? tmp.div(bg(1).minus(minMaintenanceMarginRatio))\n    : tmp.div(bg(1).plus(minMaintenanceMarginRatio));\n  res = max(res, bg(0));\n  return res;\n};\n\nexport const isOrderValid = (\n  price,\n  margin,\n  volume,\n  liquidity,\n  tradersNetVolume,\n  multiplier,\n  minPoolMarginRatio,\n  minInitialMarginRatio,\n  newVolume,\n  amount\n) => {\n  const minMargin = volume\n    .plus(newVolume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .times(minInitialMarginRatio);\n  const poolMaxVolume = liquidity\n    .div(minPoolMarginRatio)\n    .div(price)\n    .div(multiplier);\n  if (margin.plus(amount).gte(minMargin)) {\n    if (\n      newVolume.lte(poolMaxVolume.minus(tradersNetVolume)) &&\n      newVolume.gte(poolMaxVolume.negated().minus(tradersNetVolume))\n    ) {\n      return { success: true };\n    }\n    return { success: false, message: 'Pool insufficient liquidity' };\n  }\n  return { success: false, message: 'Trader insufficient margin' };\n};\n","import {\n  bTokenFactory,\n  lTokenFactory,\n  pTokenFactory,\n  perpetualPoolFactory,\n  miningVaultPoolFactory,\n  miningVaultRouterFactory,\n  wormholeFactory,\n  deriFactory,\n  databaseWormholeFactory,\n} from '../factory/contracts';\nimport { getUserInfoAll, getUserInfoAllForAirDrop } from './databaseApi';\nimport {\n  getPoolContractAddress,\n  getMiningVaultContractAddress,\n  getBTCUSDPrice,\n  bg,\n  naturalToDeri,\n  BigNumber,\n  format,\n  getDeriContractAddress,\n} from '../utils';\nimport {\n  getMiningVaultRouterContractAddress\n} from '../config'\nimport {\n  calculateMaxRemovableShares,\n  calculateMaxWithdrawMargin,\n  isOrderValid,\n} from '../calculation';\n\n/**\n * Unlock the account in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlock = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Deposit margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string|number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const depositMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  return await pPool.depositMargin(accountAddress, naturalToDeri(amount));\n};\n\n/**\n * Withdraw margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const withdrawMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\n  const { multiplier, minInitialMarginRatio } = await pPool.getParameters();\n\n  const maxWithdrawMargin = calculateMaxWithdrawMargin(\n    price,\n    volume,\n    margin,\n    cost,\n    multiplier,\n    minInitialMarginRatio\n  );\n  if (bg(amount).lte(maxWithdrawMargin)) {\n    try {\n      const tx = await pPool._transactPool(\n        'withdrawMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(amount)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'amount exceeds allowed' };\n  }\n  return res;\n};\n\n/**\n * Mint in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mint = async (chainId, poolAddress, accountAddress, amount) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  //const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const decimals = await bToken.decimals();\n  const BONE = 10 ** decimals;\n  amount = format(new BigNumber(amount).multipliedBy(BONE));\n  let res;\n  try {\n    const tx = await bToken._transact('mint', [amount], accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Add liquidity in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  let res;\n  try {\n    const tx = await pPool._transactPool(\n      'addLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n      [naturalToDeri(amount)],\n      accountAddress\n    );\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} shares\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares\n) => {\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\n  const {\n    liquidity,\n    tradersNetVolume,\n    tradersNetCost,\n  } = await pPool.getStateValues();\n\n  const maxRemovableShares = calculateMaxRemovableShares(\n    lTokenBalance,\n    lTokenTotalSupply,\n    liquidity,\n    tradersNetVolume,\n    tradersNetCost,\n    multiplier,\n    minPoolMarginRatio,\n    price\n  );\n  let res;\n  if (bg(shares).lte(maxRemovableShares)) {\n    try {\n      const tx = await pPool._transactPool(\n        'removeLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(shares)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'shares exceeds allowed' };\n  }\n  return res;\n};\n\n/**\n * Trade with margin in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} newVolume\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const tradeWithMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    minInitialMarginRatio,\n    minPoolMarginRatio,\n  } = await pPool.getParameters();\n  const { liquidity, tradersNetVolume } = await pPool.getStateValues();\n  const { volume, margin } = await pToken.getPositionInfo(accountAddress);\n  let res;\n  const orderValidation = isOrderValid(\n    price,\n    margin,\n    volume,\n    liquidity,\n    tradersNetVolume,\n    multiplier,\n    minPoolMarginRatio,\n    minInitialMarginRatio,\n    bg(newVolume),\n    bg(amount)\n  );\n  if (orderValidation.success) {\n    try {\n      const tx = await pPool._transactPool(\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(newVolume), naturalToDeri(amount)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: orderValidation.message };\n  }\n  return res;\n};\n\n/**\n * Close position in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const closePosition = async (chainId, poolAddress, accountAddress) => {\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  let { volume } = await pToken.getPositionInfo(accountAddress);\n  volume = volume.negated();\n  let res;\n  if (!volume.eq(0)) {\n    try {\n      const tx = await pPool._transactPool(\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(volume), '0'],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'no position to close' };\n  }\n  return res;\n};\n\n/**\n * Mint DToken in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintDToken = async (chainId, accountAddress) => {\n  let res;\n  const userInfo = await getUserInfoAll(accountAddress);\n  const amount = naturalToDeri(userInfo.amount);\n  const { deadline } = userInfo;\n  const { nonce } = userInfo;\n  const { v } = userInfo;\n  const { r } = userInfo;\n  const { s } = userInfo;\n  if (userInfo.valid) {\n    const miningVaultAddress = getMiningVaultContractAddress(chainId);\n    if (miningVaultAddress) {\n      const miningVault = miningVaultPoolFactory(chainId, miningVaultAddress);\n      //miningVault.setAccount(accountAddress);\n      try {\n        const tx = await miningVault.mintDToken(\n          accountAddress,\n          amount,\n          deadline,\n          nonce,\n          v,\n          r,\n          s\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the mining vault address in chain ${chainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n\n/**\n * freeze Deri in current wormhole pool to the specified chain\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @param {string} toChainId\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const freeze = async (chainId, accountAddress, toChainId, amount) => {\n  const { wormholeAddress } = getDeriContractAddress(chainId);\n  const wormhole = wormholeFactory(chainId, wormholeAddress);\n  //wormhole.setAccount(accountAddress);\n  let res;\n  try {\n    const tx = await wormhole.freeze(accountAddress, amount, toChainId);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Mint Deri in wormhole pool\n * @async\n * @method\n * @param {string} toChainId\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintDeri = async (toChainId, accountAddress) => {\n  let res;\n  const databaseWormhole = databaseWormholeFactory(true);\n  // const userInfo = await getUserInfoAll(accountAddress);\n  const userInfo = await databaseWormhole.signature(accountAddress);\n  // console.log(userInfo)\n  const { amount } = userInfo;\n  const { fromChainId } = userInfo;\n  const { fromWormhole } = userInfo;\n  const fromNonce = userInfo.nonce;\n  const { v } = userInfo;\n  const { r } = userInfo;\n  const { s } = userInfo;\n  if (userInfo.valid) {\n    const { wormholeAddress } = getDeriContractAddress(toChainId);\n    if (wormholeAddress) {\n      const wormhole = wormholeFactory(toChainId, wormholeAddress);\n      //wormhole.setAccount(accountAddress);\n      try {\n        const tx = await wormhole.mintDeri(\n          accountAddress,\n          amount,\n          fromChainId,\n          fromWormhole,\n          fromNonce,\n          v,\n          r,\n          s\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the wormhole address in chain ${fromChainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n\n/**\n * Unlock the account in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockDeri = async (chainId, accountAddress) => {\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\n  let res;\n  try {\n    const tx = await deri.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Mint Airdrop in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintAirdrop = async (chainId, accountAddress) => {\n  let res;\n  const userInfo = await getUserInfoAllForAirDrop(accountAddress);\n  const amount = naturalToDeri(userInfo.amount).toString();\n  const { deadline, nonce, v1, r1, s1, v2, r2, s2 } = userInfo;\n  if (userInfo.valid) {\n    const miningVaultAddress = getMiningVaultRouterContractAddress(chainId);\n    // console.log(\"miningVaultAddress\", miningVaultAddress)\n    // console.log(\"userInfo\", userInfo)\n    if (miningVaultAddress) {\n      const miningVaultRouter = miningVaultRouterFactory(\n        chainId,\n        miningVaultAddress\n      );\n      try {\n        const tx = await miningVaultRouter.mint(\n          accountAddress,\n          amount,\n          deadline,\n          nonce,\n          v1,\n          r1,\n          s1,\n          v2,\n          r2,\n          s2\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the mining vault router address in chain ${chainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n","import { databaseFactory, databaseAirdropFactory } from '../factory/contracts';\nimport {\n  toChecksumAddress,\n  getNetworkName,\n  deriToString,\n  deriToBool,\n  deriToNatural,\n  getPoolContractAddress,\n} from '../utils';\n// import { getLiquidityUsed } from \"./contractApi\";\n\nexport const getUserInfo = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.chainId`,\n      `${userAddress}.claim.amount`,\n      `${userAddress}.claim.deadline`,\n      `${userAddress}.claim.nonce`,\n      `${userAddress}.claim.v`,\n      `${userAddress}.claim.r`,\n      `${userAddress}.claim.s`,\n      `${userAddress}.claim.valid`,\n    ])\n    .catch((err) => console.log('getUserInfo', err));\n  if (res) {\n    const [chainId, amount, deadline, nonce, v, r, s, valid] = res;\n    return {\n      chainId: deriToString(chainId),\n      amount: deriToNatural(amount).toString(),\n      deadline: deriToString(deadline),\n      nonce: deriToString(nonce),\n      v: deriToString(v),\n      r,\n      s,\n      valid: deriToBool(valid),\n    };\n  }\n};\n\nexport const getUserInfoHarvest = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.harvest.lp`,\n      `${userAddress}.claim.harvest.trade`,\n    ])\n    .catch((err) => console.log('getUserInfoHarvest', err));\n  if (res) {\n    const [harvestLp, harvestTrade] = res;\n    return {\n      lp: deriToNatural(harvestLp).toString(),\n      trade: deriToNatural(harvestTrade).toString(),\n    };\n  }\n};\n\nexport const getUserInfoTotal = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([`${userAddress}.claim.total`])\n    .catch((err) => console.log('getUserInfoTotal', err));\n  if (res) {\n    const [total] = res;\n    return {\n      total: deriToNatural(total).toString(),\n    };\n  }\n};\n\n/**\n * Get user claim info from database\n * @async\n * @method\n * @param {string} userAddress - account address\n * @returns {Object} response\n * @returns {string} resposne.chainId\n * @returns {BigNumber} response.amount\n * @returns {string} response.deadline\n * @returns {string} response.nonce\n * @returns {string} response.v\n * @returns {string} response.r\n * @returns {string} response.s\n * @returns {bool} response.valid\n * @returns {BigNumber} response.lp\n * @returns {BigNumber} response.trade\n * @returns {string} response.total\n */\nexport const getUserInfoAll = async (userAddress) => {\n  const userInfo = await getUserInfo(userAddress);\n  const userInfoHarvest = await getUserInfoHarvest(userAddress);\n  const userInfoTotal = await getUserInfoTotal(userAddress);\n  return Object.assign(userInfo, userInfoHarvest, userInfoTotal);\n};\n\n/**\n * Get pool liquidity\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.liquidity\n * @returns {symbol} response.symbol\n */\nexport const getPoolLiquidity = async (chainId, poolAddress) => {\n  // use the dev database\n  const db = databaseFactory();\n  try {\n    const res = await db\n      .getValues([`${chainId}.${poolAddress}.liquidity`])\n      .catch((err) => console.log('getPoolLiquidity', err));\n    const { symbol } = getPoolContractAddress(chainId, poolAddress)\n    if (res) {\n      const [liquidity] = res;\n      return {\n        liquidity: deriToNatural(liquidity).toString(),\n        symbol,\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get pool apy\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getPoolInfoApy = async (chainId, poolAddress) => {\n  const db = databaseFactory(true);\n  //const [poolAddress] = getPoolContractAddress(chainId, bSymbol);\n  //console.log('getPoolInfoApy', chainId, poolAddress);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, volume1h, volume24h] = res;\n      return {\n        apy: deriToNatural(apy).toString(),\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get apy of the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getLpPoolInfoApy = async (chainId, poolAddress) => {\n  const db = databaseFactory(true);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy`,\n        `${poolNetwork}.${poolAddress}.apy2`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, apy2, volume1h, volume24h] = res;\n      return {\n        apy: deriToNatural(apy).toString(),\n        apy2: deriToNatural(apy2).toString(),\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get apy of the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\n// export const getClpPoolInfoApy = async (chainId, poolAddress) => {\n//   const db = databaseFactory(true);\n//   try {\n//     const poolNetwork = getNetworkName(chainId);\n//     const res = await db\n//       .getValues([\n//         `${poolNetwork}.${poolAddress}.apy`,\n//         `${poolNetwork}.${poolAddress}.apy2`,\n//         `${poolNetwork}.${poolAddress}.volume.1h`,\n//         `${poolNetwork}.${poolAddress}.volume.24h`,\n//       ])\n//       .catch((err) => console.log('getPoolInfoApy', err));\n//     if (res) {\n//       const [apy, apy2, volume1h, volume24h] = res;\n//       return {\n//         apy: deriToNatural(apy).toString(),\n//         apy2: deriToNatural(apy2).toString(),\n//         volume1h: deriToNatural(volume1h).toString(),\n//         volume24h: deriToNatural(volume24h).toString(),\n//       };\n//     }\n//   } catch (err) {\n//     console.log(err);\n//   }\n// };\n\n/**\n * Get user info of the pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} userAddress\n * @returns {Object} response\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getUserInfoInPool = async (chainId, poolAddress, userAddress) => {\n  const db = databaseFactory(true);\n  //const {poolAddress} = getPoolContractAddress(chainId, poolAddress);\n  userAddress = toChecksumAddress(userAddress);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getUserInfoInPool', err));\n    if (res) {\n      const [volume1h, volume24h] = res;\n      return {\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const getUserInfoAllForAirDrop = async (userAddress) => {\n  const db = databaseAirdropFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.chainId`,\n      `${userAddress}.claim.amount`,\n      `${userAddress}.claim.deadline`,\n      `${userAddress}.claim.nonce`,\n      `${userAddress}.claim.v1`,\n      `${userAddress}.claim.r1`,\n      `${userAddress}.claim.s1`,\n      `${userAddress}.claim.v2`,\n      `${userAddress}.claim.r2`,\n      `${userAddress}.claim.s2`,\n      `${userAddress}.claim.valid`,\n      // `${userAddress}.claim.harvest.lp`,\n      // `${userAddress}.claim.harvest.trade`,\n      // `${userAddress}.claim.total`,\n    ])\n    .catch((err) => console.log('getUserInfoAllForAirDrop', err));\n  if (res) {\n    const [\n      chainId,\n      amount,\n      deadline,\n      nonce,\n      v1,\n      r1,\n      s1,\n      v2,\n      r2,\n      s2,\n      valid,\n      // harvestLp,\n      // harvestTrade,\n      // total,\n    ] = res;\n    return {\n      chainId: deriToString(chainId),\n      amount: deriToNatural(amount).toString(),\n      deadline: deriToString(deadline),\n      nonce: deriToString(nonce),\n      v1: deriToString(v1),\n      r1,\n      s1,\n      v2: deriToString(v2),\n      r2,\n      s2,\n      valid: deriToBool(valid),\n      // lp: deriToNatural(harvestLp),\n      // trade: deriToNatural(harvestTrade),\n      // total: deriToString(total),\n    };\n  }\n};\n","import {\n  getPoolContractAddress,\n  //naturalToDeri,\n  deriToNatural,\n  hexToString,\n  toChecksumAddress,\n  hexToNumber,\n  hexToNumberString,\n} from '../utils';\nimport { databaseFactory, perpetualPoolFactory } from '../factory/contracts';\n\nconst processTradeEvent = async (\n  perpetualPool,\n  bTokenSymbol,\n  info,\n  blockNumber,\n  txHash,\n  multiplier,\n  feeRatio\n) => {\n  const tradeVolume = deriToNatural(info.tradeVolume);\n  const timeStamp = await perpetualPool._getTimeStamp(blockNumber);\n\n  const direction = tradeVolume.gt(0) ? 'LONG' : 'SHORT';\n  const price = deriToNatural(info.price);\n  const time = `${+timeStamp.timestamp}000`;\n  const transactionFee = perpetualPool._calculateFee(\n    tradeVolume,\n    price,\n    multiplier,\n    feeRatio\n  );\n  const notional = tradeVolume.abs().times(price).times(multiplier);\n  const volume = tradeVolume.abs();\n\n  const res = {\n    direction,\n    baseToken: bTokenSymbol,\n    price: price.toString(),\n    notional: notional.toString(),\n    volume: volume.toString(),\n    transactionFee: transactionFee.toString(),\n    transactionHash: txHash.toString(),\n    time,\n  };\n  // console.log(JSON.stringify(res))\n  return res;\n};\n\nconst processLiquidateEvent = async (\n  info,\n  txHash,\n  bTokenSymbol,\n  multiplier\n) => {\n  // console.log(info)\n  const volume = deriToNatural(info.volume).abs();\n  // const cost = deriToNatural(info.cost).abs()\n  // const margin = info.margin\n  const timestamp = `${info.timestamp}000`;\n  const price = deriToNatural(info.price);\n  // const liquidator = info.liquidator\n  // const reward = info.reward\n  const national = volume.times(price).times(multiplier);\n  // const transactionFee = volume.times(price).times(multiplier).times(feeRatio)\n\n  const res = {\n    direction: 'Liquidation',\n    baseToken: bTokenSymbol,\n    price: price.toString(),\n    notional: national.toString(),\n    volume: volume.toString(),\n    transactionFee: '0',\n    transactionHash: txHash.toString(),\n    time: timestamp,\n    // cost: naturalToDeri(cost).toString(),\n    // margin: margin.toString(),\n    // liquidator,\n    // reward: reward.toString(),\n  };\n  return res;\n};\n\n/**\n * Get the user trade history\n * @async\n * @method\n * @param {string} chainId - Chain Id\n * @param {string} poolAddress - Pool Address\n * @param {string} accountAddress - Account Address\n * @returns {Object[]} response\n * @returns {string} response[].direction\n * @returns {string} response[].baseToken\n * @returns {string} response[].price\n * @returns {string} response[].notional\n * @returns {string} response[].volume\n * @returns {string} response[].transactionFee\n * @returns {string} response[].time - Timestamp of the trade\n */\n\nexport const getTradeHistory = async (chainId, poolAddress, accountAddress) => {\n  const keyMeta = `${chainId}.${poolAddress}`;\n  const db = databaseFactory();\n  let [tradeFromBlock, liquidateFromBlock] = await Promise.all([\n    db.getValues([`${keyMeta}.tradeHistoryBlock`]),\n    db.getValues([`${keyMeta}.liquidateHistoryBlock`]),\n  ]);\n  tradeFromBlock = hexToNumber(tradeFromBlock[0]);\n  liquidateFromBlock = hexToNumber(liquidateFromBlock[0]);\n  if (tradeFromBlock !== 0 && liquidateFromBlock !== 0) {\n    // console.log(tradeFromBlock, liquidateFromBlock)\n    const [\n      tradeHistoryOffline,\n      tradeHistoryOnline,\n      liquidateHistoryOffline,\n      liquidateHistoryOnline,\n    ] = await Promise.all([\n      getTradeHistoryOffline(chainId, poolAddress, accountAddress),\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOffline(chainId, poolAddress, accountAddress),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline\n      .concat(liquidateHistoryOnline)\n      .concat(tradeHistoryOffline)\n      .concat(liquidateHistoryOffline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  } else {\n    const { initialBlock } = getPoolContractAddress(chainId, poolAddress);\n    tradeFromBlock = parseInt(initialBlock);\n    liquidateFromBlock = parseInt(initialBlock);\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline.concat(liquidateHistoryOnline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  }\n};\n\n// get trade history combined from cache and from online pull\nconst getTradeHistoryOffline = async (chainId, poolAddress, accountAddress) => {\n  // console.log(chainId, poolAddress, accountAddress)\n  let result = [];\n  // use dev database\n  const db = databaseFactory();\n  const keyBlock = `${chainId}.${poolAddress}.tradeHistoryBlock`;\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\n    accountAddress\n  )}.trade`;\n  //const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const [res] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const count = hexToNumber(res);\n  try {\n    if (count && count >= 0) {\n      let keyArray = [];\n      for (let i = count; i > 0; i--) {\n        const key = `${keyMeta}.${i.toString()}`;\n        keyArray = keyArray.concat([\n          `${key}.direction`,\n          `${key}.baseToken`,\n          `${key}.price`,\n          `${key}.notional`,\n          `${key}.volume`,\n          `${key}.transactionFee`,\n          `${key}.transactionHash`,\n          `${key}.time`,\n        ]);\n      }\n      // console.log(keyArray)\n      const tradeHistoryLength = keyArray.length / 8;\n      // console.log(`trade history length: ${tradeHistoryLength}`)\n      const resp = await db.getValues(keyArray);\n      for (let i = 0; i < tradeHistoryLength; i++) {\n        const indexBase = i * 8;\n        //console.log(resp[indexBase + 6].trim());\n        const item = {\n          direction: hexToString(resp[indexBase]).trim(),\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\n          price: deriToNatural(resp[indexBase + 2]).toString(),\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\n          transactionHash: resp[indexBase + 6],\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\n        };\n        result.push(item);\n      }\n    } else {\n      result = [];\n    }\n  } catch (err) {\n    console.log(err);\n    result = [];\n  }\n  return result;\n};\n\n// get trade history online from the Block number\nexport const getTradeHistoryOnline = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  fromBlock\n) => {\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\n  // console.log(poolAddr, bTokenAddress);\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n  //perpetualPool.setAccount(accountAddress);\n  const toBlock = await perpetualPool._getBlockInfo('latest');\n  /// let { initialBlock:fromBlock} = getPoolContractAddress(chainId, poolAddress)\n  fromBlock = parseInt(fromBlock);\n  const filters = { owner: accountAddress };\n  const events = await perpetualPool._getPastEvents(\n    'Trade',\n    filters,\n    fromBlock,\n    toBlock.number\n  );\n  const {\n    multiplier,\n    feeRatio,\n    minInitialMarginRatio,\n  } = await perpetualPool.getParameters();\n\n  const result = [];\n  // console.log(\"events length:\", events.length);\n  for (let i = 0; i < events.length; i++) {\n    const item = events[i];\n    // const info = item.returnValues;\n    const res = await processTradeEvent(\n      perpetualPool,\n      bTokenSymbol,\n      item.returnValues,\n      item.blockNumber,\n      item.transactionHash,\n      multiplier,\n      feeRatio,\n      minInitialMarginRatio\n    );\n    result.unshift(res);\n  }\n  return result;\n};\n\n// get liquidate history online from the Block number\nexport const getLiquidateHistoryOnline = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  fromBlock\n) => {\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\n  // console.log(poolAddr, bTokenAddress);\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n  //perpetualPool.setAccount(accountAddress);\n  const toBlock = await perpetualPool._getBlockInfo('latest');\n  fromBlock = parseInt(fromBlock);\n  const filters = { owner: accountAddress };\n  const events = await perpetualPool._getPastEvents(\n    'Liquidate',\n    filters,\n    fromBlock,\n    toBlock.number\n  );\n  const { multiplier } = await perpetualPool.getParameters();\n\n  const result = [];\n  // console.log(\"events length:\", events.length);\n  for (let i = 0; i < events.length; i++) {\n    const item = events[i];\n    // const info = item.returnValues;\n    const res = await processLiquidateEvent(\n      item.returnValues,\n      item.transactionHash,\n      bTokenSymbol,\n      multiplier\n    );\n    result.unshift(res);\n  }\n  return result;\n};\n\n// get trade history combined from cache and from online pull\nconst getLiquidateHistoryOffline = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  let result = [];\n  // use dev database\n  const db = databaseFactory();\n  const keyBlock = `${chainId}.${poolAddress}.liquidateHistoryBlock`;\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\n    accountAddress\n  )}.liquidate`;\n  //const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const [res] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const count = hexToNumber(res);\n  try {\n    if (count && count >= 0) {\n      let keyArray = [];\n      for (let i = count; i > 0; i--) {\n        const key = `${keyMeta}.${i.toString()}`;\n        keyArray = keyArray.concat([\n          `${key}.direction`,\n          `${key}.baseToken`,\n          `${key}.price`,\n          `${key}.notional`,\n          `${key}.volume`,\n          `${key}.transactionFee`,\n          `${key}.transactionHash`,\n          `${key}.time`,\n        ]);\n      }\n      // console.log(keyArray)\n      const liquidateHistoryLength = keyArray.length / 8;\n      const resp = await db.getValues(keyArray);\n      for (let i = 0; i < liquidateHistoryLength; i++) {\n        const indexBase = i * 8;\n        const item = {\n          direction: hexToString(resp[indexBase]).trim(),\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\n          price: deriToNatural(resp[indexBase + 2]).toString(),\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\n          transactionHash: resp[indexBase + 6],\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\n        };\n        result.push(item);\n      }\n    } else {\n      result = [];\n    }\n  } catch (err) {\n    console.log(err);\n    result = [];\n  }\n  return result;\n};\n","// const\nimport { getRestServerConfig, DeriEnv } from '../config';\nimport { bg, getPoolContractAddress, deriToNatural } from '../utils';\nimport {\n  getLiquidateHistoryOnline,\n  getTradeHistoryOnline,\n} from './tradeHistoryApi';\n\nconst getHttpBase = () => {\n  return getRestServerConfig(DeriEnv.get());\n};\n\nconst fetchJson = async (url) => {\n  const resp = await fetch(url);\n  return await resp.json();\n};\n\nexport const fetchRestApi = async(path) => {\n  return await fetchJson(`${getHttpBase()}${path}`);\n};\n\n/**\n * Get specification from REST API, please refer {@link getSpecification}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getSpecification2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(`${getHttpBase()}/specification/${poolAddress}`);\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get funding rate from REST API, please refer {@link getFundingRate}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getFundingRate2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(`${getHttpBase()}/funding_rate/${poolAddress}`);\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get liquidity used from REST API, please refer {@link getLiquidityUsed}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getLiquidityUsed2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(`${getHttpBase()}/liquidity_used/${poolAddress}`);\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get funding rate cache from REST API, it used to 'fundingRateCache.update(chainId, poolAddress, result)'\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getFundingRateCache2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/funding_rate_cache/${poolAddress}`\n  );\n  if (res && res.success) {\n    let result = res.data;\n    result.price = bg(result.price);\n    result.fundingRate = bg(result.fundingRate);\n    result.liquidityUsed = bg(result.liquidityUsed);\n    return result;\n  }\n  return res;\n};\n\n/**\n * Get position info from REST API, please refer {@link getPositionInfo}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getPositionInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/position_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get liquidity info from REST API, please refer {@link getLiquidityInfo}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getLiquidityInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance from REST API, please refer {@link getWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getWalletBalance2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get liquidity of the slp pool from REST API, please refer {@link getSlpLiquidityInfo}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getSlpLiquidityInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/slp_liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the slp pool from REST API, please refer {@link getSlpWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getSlpWalletBalance2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/slp_wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the clp pool from REST API, please refer {@link getClpWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getClpLiquidityInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/clp_liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the clp pool from REST API, please refer {@link getSlpWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getClpWalletBalance2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/clp_wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the deri pool from REST API, please refer {@link getDeriBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getDeriBalance2 = async (chainId, poolAddress, accountAddress) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/deri_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get the user trade history from REST API, please refer {@link getTradeHistory}\n * @async\n * @method\n * @param {string} chainId - Chain Id\n * @param {string} poolAddress - Pool Address\n * @param {string} accountAddress - Account Address\n * @returns {Object[]} response\n */\nexport const getTradeHistory2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  let tradeFromBlock, liquidateFromBlock, tradeHistory;\n  const res = await fetchJson(\n    `${getHttpBase()}/trade_history/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    tradeFromBlock = parseInt(res.data.tradeHistoryBlock);\n    liquidateFromBlock = parseInt(res.data.liquidateHistoryBlock);\n    tradeHistory = res.data.tradeHistory;\n  }\n  tradeHistory = tradeHistory.filter((i) => i).map((i) => {\n    return {\n      direction: i.direction.trim(),\n      baseToken: i.baseToken.trim(),\n      price: deriToNatural(i.price).toString(),\n      notional: deriToNatural(i.notional).toString(),\n      volume: deriToNatural(i.volume).toString(),\n      transactionFee: deriToNatural(i.transactionFee).toString(),\n      transactionHash: i.transactionHash,\n      time: i.time.toString(),\n    };\n  });\n  if (tradeFromBlock !== 0 && liquidateFromBlock !== 0) {\n    // console.log(tradeFromBlock, liquidateFromBlock)\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline\n      .concat(liquidateHistoryOnline)\n      .concat(tradeHistory);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  } else {\n    const { initialBlock } = getPoolContractAddress(chainId, poolAddress);\n    tradeFromBlock = parseInt(initialBlock);\n    liquidateFromBlock = parseInt(initialBlock);\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline.concat(liquidateHistoryOnline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  }\n};\n","import {\n  addLiquidity,\n  removeLiquidity,\n  depositMargin,\n  withdrawMargin,\n  tradeWithMargin,\n  closePosition,\n} from './contractTransactionApi';\nimport {\n  addSlpLiquidity,\n  removeSlpLiquidity,\n} from './slpPoolApi'\nimport {\n  addClpLiquidity,\n  removeClpLiquidity,\n} from './clpPoolApi'\nimport {\n  addClp2Liquidity,\n  removeClp2Liquidity,\n} from './clp2PoolApi'\nimport { wsInstance } from './apiGlobals'\nimport { getRestServerConfig, DeriEnv } from '../config'\n\nconst wsOnPromise = (ws, event) => {\n  return new Promise((resolve) => {\n    ws.on(event, function(data){\n      resolve(JSON.parse(data))\n    })\n  })\n}\nconst sendTradeTxToWorkerQuene = async(methodCall) => {\n  const ws = wsInstance.getOrSet(getRestServerConfig(DeriEnv.get()))\n  await ws.send(methodCall)\n  const res = await wsOnPromise(ws, 'trade_tx_receipt')\n  //console.log('res', res)\n  return res\n}\n\nexport const tradeWithMargin2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const res = await tradeWithMargin(chainId, poolAddress, accountAddress, newVolume, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`trade_with_margin(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const closePosition2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const res = await closePosition(chainId, poolAddress, accountAddress, newVolume, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`close_position(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const depositMargin2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await depositMargin(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`deposit_margin(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const withdrawMargin2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await withdrawMargin(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`withdraw_margin(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const addLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addLiquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`add_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const removeLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeLiquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`remove_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const addSlpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addSlpLiquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`add_slp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const removeSlpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeSlpLiquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`remove_slp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\nexport const addClpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addClpLiquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`add_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const removeClpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeClpLiquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`remove_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const addClp2Liquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addClp2Liquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`add_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const removeClp2Liquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeClp2Liquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`remove_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};","\n\nimport BigNumber from 'bignumber.js'\nconst versionKey = 'deri-current-version'\n\nexport function bg(value, base = 0) {\n  if (base == 0) {\n    return BigNumber(value);\n  } else if (base > 0) {\n    return BigNumber(value).times(BigNumber(\"1\" + \"0\".repeat(base)));\n  } else {\n    return BigNumber(value).div(BigNumber(\"1\" + \"0\".repeat(-base)));\n  }\n}\n\nexport function deriNatural(value) {\n  return bg(value, -18);\n}\n\nexport function formatAddress(address){\n  return address && `${address.substr(0,6)}...${address.substr(-4)}`\n}\n\nexport function formatBalance(balance){\n  return balance && (+balance).toFixed(4)\n}\n\nexport function eqInNumber(str1,str2){\n  return (+str1) === (+str2)\n}\n\nexport function isLP(address){\n  return address === '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd' || address === '0x73feaa1eE314F8c655E354234017bE2193C9E24E'\n}\nexport function isSushiLP(address){\n  return address === '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd'\n}\nexport function isCakeLP(address){\n  return address === '0x73feaa1eE314F8c655E354234017bE2193C9E24E'\n}\n\nexport function sessionStorageKey(version){\n  return `${version}-current-trading-pool`\n}\n\n\nexport function storeVersion(version){\n  sessionStorage.setItem(versionKey,version)\n}\n\nexport function restoreVersion(){\n  return sessionStorage.getItem(versionKey)\n}\n\nexport function storeConfig(version,config){\n  if(config){\n    const key = sessionStorageKey(version);\n    sessionStorage.setItem(key,JSON.stringify(config))\n  }\n}\n\nexport function getConfigFromStore(version){\n  return JSON.parse(sessionStorage.getItem(sessionStorageKey(version)))\n}\n\nexport function storeChain(chainInfo){\n  sessionStorage.setItem('current-chain',JSON.stringify(chainInfo))\n}\nexport function restoreChain(){\n  return JSON.parse(sessionStorage.getItem('current-chain')) || {code : ''};\n}\n\nexport function storeLocale(locale){\n  sessionStorage.setItem('current-locale',locale)\n}\n\nexport function restoreLocale(){\n  return sessionStorage.getItem('current-locale')\n}\n\nexport function getFormatSymbol(symbol){\n  const curChain = restoreChain();\n  return restoreVersion() === 'v2' ? `${symbol}_V2_${curChain ? curChain.code.toUpperCase() : 'BSC'}` : symbol\n  // return restoreVersion() === 'v2' ? `${symbol}_V2` : symbol\n}\n\n","import { perpetualPoolFactory } from '../factory/contracts';\nimport { getBTCUSDPrice } from '../utils';\nimport { io } from 'socket.io-client';\n\n/** @module apiCache */\n/**\n * fundingRateCache Object\n * @name fundingRateCache\n * @property {function} get - Get the funding rate from cache\n * @property {function} set - set the funding rate cache\n */\nexport const fundingRateCache = (function () {\n  let resourceMap = {};\n  return {\n    get(chainId, contractAddress) {\n      const key = `${chainId}.${contractAddress}`;\n      if (Object.keys(resourceMap).includes(key)) {\n        return resourceMap[key];\n      }\n      console.log(`Cache key is not in resouceMap: ${key}`);\n      return undefined;\n    },\n    set(chainId, contractAddress, resource) {\n      const key = `${chainId}.${contractAddress}`;\n      resourceMap[key] = resource;\n    },\n  };\n})();\n\nexport const accountAddressCache = (function () {\n  let _accountAddress = '';\n  return {\n    get() {\n      if (_accountAddress === '') {\n        console.log(\"please init 'accountAddress' first\");\n      }\n      return _accountAddress;\n    },\n    set(value) {\n      if (typeof value === 'string' && value !== '') {\n        _accountAddress = value;\n      }\n    },\n  };\n})();\n\n/**\n * priceCache Object\n * @name priceCache\n * @property {function} get - Get the price from cache\n * @property {function} update - Set the price to automatic update during a time interval\n * @property {function} clear - Clear the the automatic update of the price\n */\nexport const priceCache = (function () {\n  let _price = '';\n  let _interval = null;\n  return {\n    get() {\n      if (_price === '') {\n        console.log(\"please init 'price' first\");\n      }\n      return _price;\n    },\n    async _update(chainId, poolAddress) {\n      try {\n        const res = await getBTCUSDPrice(chainId, poolAddress);\n        if (res !== '') {\n          _price = res;\n        }\n      } catch (err) {\n        console.log(`priceCache.update: ${err}`)\n      }\n    },\n    update(chainId, poolAddress) {\n      const self = this;\n      _interval = setInterval(() => {\n        // console.log('tick')\n        self._update(chainId, poolAddress);\n      }, 3000);\n    },\n    clear() {\n      if (_interval) {\n        clearInterval(_interval);\n      }\n      _price = '';\n    },\n  };\n})();\n\n/**\n * PerpetualPoolParametersCache Object\n * @name PerpetualPoolParametersCache\n * @property {function} get - Get the perpetualPoolParameters from cache\n * @property {function} update - Set the perpetualPoolParameters\n */\n\nexport const PerpetualPoolParametersCache = (function () {\n  let _parameters = {};\n  return {\n    get() {\n      if (!_parameters.multiplier) {\n        console.log(\"please init 'perpetual pool parameters' first\");\n      }\n      return _parameters;\n    },\n    async update(chainId, poolAddress) {\n      const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n      const res = await perpetualPool.getParameters();\n      if (res.multiplier) {\n        _parameters = res;\n      }\n      return res;\n    },\n  };\n})();\n\n// websocket instance\nexport const wsInstance = (function(){\n  let _ws = null;\n  return {\n    get() {\n      if (_ws) {\n        return _ws\n      } else {\n        console.log('wsInstance.get() error: ws instance is not init')\n      }\n    },\n    set(url) {\n      try {\n        const ws = io(url, {\n          transports: ['websocket'],\n          path: '/ws',\n        });\n        ws.on('connect', () => {\n          console.log('hello from ws:', ws.id);\n        })\n        if (ws) {\n          _ws = ws\n        } else {\n          console.log('wsInstance.get() error: ws instance is not init')\n        }\n      } catch (err) {\n        console.log('wsInstance.set():', err)\n      }\n    },\n    getOrSet(url) {\n      if (!_ws) {\n        this.set(url)\n      }\n      return _ws\n    }\n  }\n})();\n","import {\n  bTokenFactory,\n  lTokenFactory,\n  pTokenFactory,\n  perpetualPoolFactory,\n  deriFactory,\n  databaseWormholeFactory,\n} from '../factory/contracts';\nimport { getPoolInfoApy } from './databaseApi';\nimport {\n  fundingRateCache,\n  PerpetualPoolParametersCache,\n  priceCache,\n} from './apiGlobals';\nimport {\n  hasInvalidArgsValue,\n  naturalWithPercentage,\n  deriToNatural,\n  getPoolContractAddress,\n  getBTCUSDPrice,\n  bg,\n  BigNumber,\n  getDeriContractAddress,\n} from '../utils';\nimport {\n  calculateFundingRate,\n  calculateLiquidityUsed,\n  calculateShareValue,\n  calculateMaxRemovableShares,\n  calculateEntryPrice,\n  calculateMarginHeld,\n  calculatePnl,\n  calculateLiquidationPrice,\n  processFundingRate,\n} from '../calculation';\n\n/**\n * Get the contract information\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.addresses\n * @returns {string} response.symbol\n * @returns {string} response.bSymbol\n * @returns {string} response.multiplier\n * @returns {string} response.feeRatio\n * @returns {string} response.minPoo\n * @returns {string} response.minPoolMarginRatio\n * @returns {string} response.minInitialMarginRatio\n * @returns {string} response.minMaintenanceMarginRatio\n * @returns {string} response.minAddLiquidity\n * @returns {string} response.redemptionFeeRatio\n * @returns {string} response.fundingRateCoefficient\n * @returns {string} response.minLiquidationReward\n * @returns {string} response.maxLiquidationReward\n * @returns {string} response.liquidationCutRatio\n * @returns {string} response.priceDelayAllowance\n */\nexport const getSpecification = async (\n  chainId,\n  poolAddress,\n  //accountAddress,\n) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    feeRatio,\n    minPoolMarginRatio,\n    minInitialMarginRatio,\n    minMaintenanceMarginRatio,\n    minAddLiquidity,\n    redemptionFeeRatio,\n    fundingRateCoefficient,\n    minLiquidationReward,\n    maxLiquidationReward,\n    liquidationCutRatio,\n    priceDelayAllowance,\n  } = await pPool.getParameters();\n  let symbol = await pPool.symbol();\n  const bSymbolRaw = await bToken.symbol();\n\n  // fix symbol BTCUSD issue, will remove later\n  // if (poolAddress === '0xA2D7316Bc60AA9463DfB78379d25E77371990507') {\n  //   symbol = 'iMEME'\n  // }\n\n  return {\n    addresses: poolAddress,\n    symbol,\n    bSymbol: bSymbolRaw,\n    multiplier: multiplier.toString(),\n    feeRatio: feeRatio.toString(),\n    minPoolMarginRatio: minPoolMarginRatio.toString(),\n    minInitialMarginRatio: minInitialMarginRatio.toString(),\n    minMaintenanceMarginRatio: minMaintenanceMarginRatio.toString(),\n    minAddLiquidity: minAddLiquidity.toString(),\n    redemptionFeeRatio: redemptionFeeRatio.toString(),\n    fundingRateCoefficient: fundingRateCoefficient.toString(),\n    minLiquidationReward: minLiquidationReward.toString(),\n    maxLiquidationReward: maxLiquidationReward.toString(),\n    liquidationCutRatio: liquidationCutRatio.toString(),\n    priceDelayAllowance: priceDelayAllowance.toString(),\n  };\n};\n\n/**\n * Get position Information of the user\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.volume\n * @returns {string} response.averageEntryPrice\n * @returns {string} response.margin\n * @returns {string} response.marginHeld\n * @returns {string} response.unrealizedPnl\n * @returns {string} response.liquidationPrice\n */\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress) => {\n  let price = ''\n  try {\n    price = await getBTCUSDPrice(chainId, poolAddress);\n  } catch (err) {\n    console.log(err)\n  }\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    minInitialMarginRatio,\n    minMaintenanceMarginRatio,\n  } = await pPool.getParameters();\n  //console.log('getPositionInfo', chainId, poolAddress, accountAddress, price);\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\n  if (price === '') {\n    return {\n      price,\n      volume: volume.toString(),\n      averageEntryPrice: calculateEntryPrice(\n        volume,\n        cost,\n        multiplier\n      ).toString(),\n      margin: margin.toString(),\n      marginHeld: '',\n      unrealizedPnl: '',\n      liquidationPrice: calculateLiquidationPrice(\n        volume,\n        margin,\n        cost,\n        multiplier,\n        minMaintenanceMarginRatio\n      ).toString(),\n    };\n  } else {\n    return {\n      price,\n      volume: volume.toString(),\n      averageEntryPrice: calculateEntryPrice(\n        volume,\n        cost,\n        multiplier\n      ).toString(),\n      margin: margin.toString(),\n      marginHeld: calculateMarginHeld(\n        price,\n        volume,\n        multiplier,\n        minInitialMarginRatio\n      ).toString(),\n      unrealizedPnl: calculatePnl(price, volume, multiplier, cost).toString(),\n      liquidationPrice: calculateLiquidationPrice(\n        volume,\n        margin,\n        cost,\n        multiplier,\n        minMaintenanceMarginRatio\n      ).toString(),\n    };\n  }\n};\n\n/**\n * Get liquidity Info of the user\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.totalSupply\n * @returns {string} response.poolLiquidity\n * @returns {string} response.shares\n * @returns {string} response.shareValue\n * @returns {string} response.maxRemovableShares\n */\nexport const getLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const {\n    liquidity,\n    tradersNetCost,\n    tradersNetVolume,\n  } = await pPool.getStateValues();\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\n  const poolDynamicEquity = liquidity.plus(\n    tradersNetCost.minus(tradersNetVolume.times(price).times(multiplier))\n  );\n\n  return {\n    totalSupply: lTokenTotalSupply.toString(),\n    poolLiquidity: liquidity.toString(),\n    shares: lTokenBalance.toString(),\n    shareValue: calculateShareValue(\n      lTokenTotalSupply,\n      poolDynamicEquity\n    ).toString(),\n    maxRemovableShares: calculateMaxRemovableShares(\n      lTokenBalance,\n      lTokenTotalSupply,\n      liquidity,\n      tradersNetVolume,\n      tradersNetCost,\n      multiplier,\n      minPoolMarginRatio,\n      price\n    ).toString(),\n  };\n};\n\n/**\n * Get user balance in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {string} user balance\n */\nexport const getWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n\n/**\n * Check account is unlocked in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Get estimate margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} volume\n * @param {string} leverage\n * @returns {string}\n */\nexport const getEstimatedMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  volume,\n  leverage\n) => {\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const { multiplier } = await pPool.getParameters();\n  return bg(volume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .div(bg(leverage))\n    .toString();\n};\n\n/**\n * Get estimate Fee in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} volume\n * @returns {string}\n */\nexport const getEstimatedFee = async (chainId, poolAddress, volume) => {\n  // const price = await getBTCUSDPrice(chainId, poolAddress);\n  let price = priceCache.get();\n  let parameters = PerpetualPoolParametersCache.get();\n  if (price === '') {\n    await priceCache.update(chainId, poolAddress);\n    price = priceCache.get();\n  }\n  // const pPool = perpetualPoolFactory(chainId, poolAddress, accountAddress);\n  // const { multiplier, feeRatio } = await pPool.getParameters();\n  if (!parameters.multiplier) {\n    parameters = await PerpetualPoolParametersCache.update(\n      chainId,\n      poolAddress\n    );\n  }\n  //console.log('price', price);\n  const { multiplier, feeRatio } = parameters;\n  return bg(volume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .times(feeRatio)\n    .toString();\n};\n\n/**\n * Get funding rate of the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.fundingRate0\n * @returns {string} response.fundingRatePerBlock\n * @returns {string} response.liquidity\n * @returns {string} response.volume\n * @returns {string} response.tradersNetVolume\n */\nexport const getFundingRate = async (chainId, poolAddress) => {\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n\n  const res = await perpetualPool\n    .getFundingRate()\n    .catch((err) => console.log('getFundingRate', err));\n  fundingRateCache.set(chainId, poolAddress, res);\n  const poolInfo = await getPoolInfoApy(chainId, poolAddress);\n\n  if (res) {\n    // console.log(hexToNatural(res[0]));\n    const {\n      fundingRate,\n      fundingRatePerBlock,\n      liquidity,\n      tradersNetVolume,\n    } = res;\n    const volume = poolInfo.volume24h;\n    // fundingRate = processFundingRate(chainId, fundingRate);\n\n    return {\n      fundingRate0: naturalWithPercentage(fundingRate),\n      fundingRatePerBlock: BigNumber(fundingRatePerBlock).toExponential(10),\n      liquidity: liquidity.toString(),\n      volume: deriToNatural(volume).toString(),\n      tradersNetVolume: tradersNetVolume.toString(),\n    };\n  }\n};\n\n/**\n * Get estimate funding rate\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} newNetVolume\n * @returns {Object} response\n * @returns {string} response.fundingRate1\n */\nexport const getEstimatedFundingRate = async (\n  chainId,\n  poolAddress,\n  newNetVolume\n) => {\n  let fundingRate1;\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool.getFundingRate();\n  }\n  if (res) {\n    const parameters = [\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\n      res.price,\n      res.multiplier,\n      res.liquidity,\n      res.fundingRateCoefficient,\n    ];\n    if (hasInvalidArgsValue(...parameters)) {\n      return {\n        fundingRate1: '0',\n      };\n    }\n    // console.log(parameters)\n    fundingRate1 = calculateFundingRate(...parameters);\n    fundingRate1 = processFundingRate(chainId, fundingRate1);\n    return {\n      fundingRate1: naturalWithPercentage(fundingRate1),\n    };\n  }\n};\n\n/**\n * Get liquidity used\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.liquidityUsed0\n */\nexport const getLiquidityUsed = async (chainId, poolAddress) => {\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool.getFundingRate();\n  }\n  if (res) {\n    const { liquidityUsed } = res;\n    return {\n      liquidityUsed0: naturalWithPercentage(liquidityUsed),\n    };\n  }\n};\n\n/**\n * Get estimate liquidity used\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} newNetVolume\n * @returns {Object} response\n * @returns {string} response.fundingRate1\n */\nexport const getEstimatedLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  newNetVolume\n) => {\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool\n      .getFundingRate()\n      .catch((err) => console.log('getLiquidityUsed', err));\n  }\n  if (res) {\n    const parameters = [\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\n      res.price,\n      res.multiplier,\n      res.liquidity,\n      res.poolMarginRatio,\n    ];\n    if (hasInvalidArgsValue(...parameters)) {\n      return {\n        liquidityUsed1: '0',\n      };\n    }\n    const liquidityUsed1 = calculateLiquidityUsed(...parameters);\n    return {\n      liquidityUsed1: naturalWithPercentage(liquidityUsed1),\n    };\n  }\n};\n\n/**\n * Get user signature of the wormhole pool\n * @async\n * @method\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getUserWormholeSignature = async (accountAddress) => {\n  const databaseWormhole = databaseWormholeFactory(true);\n  return await databaseWormhole.signature(accountAddress);\n};\n\n/**\n * Check account is unlocked in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isDeriUnlocked = async (chainId, accountAddress) => {\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\n  return await deri.isUnlocked(accountAddress);\n};\n\n/**\n * Get deri balance in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string}\n */\nexport const getDeriBalance = async (chainId, accountAddress) => {\n  const { deriAddress, wormholeAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  return (await deri.balance(accountAddress)).toString();\n};\n","import { metaMaskWeb3, web3Factory } from '../factory';\nimport { numberToHex } from '../utils';\n\nconst MAX_GAS_AMOUNT = 832731;\n\nexport class ContractBase {\n  constructor(chainId, contractAddress, contractAbi, useInfura) {\n    this.chainId = chainId;\n    this.contractAddress = contractAddress;\n    this.contractAbi = contractAbi;\n    this.useInfura = useInfura\n  }\n\n  async _init() {\n    // update when web3 instance is null\n    if (!this.web3) {\n      if (this.useInfura) {\n        this.web3 = await web3Factory.get(this.chainId);\n      } else {\n        this.web3 = metaMaskWeb3();\n      }\n      this.contract = new this.web3.eth.Contract(\n        this.contractAbi,\n        this.contractAddress\n      );\n    }\n  }\n\n  async _call(method, args = []) {\n    let res\n    let retry = 2\n    while (retry > 0) {\n      try {\n        await this._init()\n        res = await this.contract.methods[method](...args).call();\n        break\n      } catch(err) {\n        retry -= 1\n        // remove web3 instance to re-init\n        this.web3 = null\n        if (err.toString().includes('Invalid JSON RPC response')) {\n          console.log(`Invalid JSON RPC response with chainId(${this.chainId})`);\n        } else if (err.toString().includes(\"Returned values aren't valid,\")) {\n          console.log(`Invalid contract address(${this.contractAddress}) and chainId(${this.chainId})`);\n        }\n      }\n    }\n    if (retry === 0 && !res) {\n      throw new Error(`The contract(${this.contractAddress}) '${method}(${args})' failed with max retry 2.`)\n    }\n    return res\n  }\n\n  async _estimatedGas(method, args = [], accountAddress) {\n    await this._init()\n    let gas = 0;\n    for (let i = 0; i < 2; i++) {\n      try {\n        gas = await this.contract.methods[method](...args).estimateGas({\n          from: accountAddress,\n        });\n        gas = parseInt(gas * 1.25);\n        break;\n      } catch (error) {\n        // ignore the metamask error\n      }\n    }\n    if (gas == 0 || gas > 10000000) gas = MAX_GAS_AMOUNT;\n    return gas;\n  }\n\n  _getTransactionReceipt(tx) {\n    const self = this;\n    return function _transactionReceipt(resolve, reject) {\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\n        if (error) {\n          reject(error);\n        } else if (receipt === null) {\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\n        } else if (receipt.status === false) {\n          receipt.errorMessage = 'Transaction failed';\n          reject(receipt);\n        } else {\n          resolve(receipt);\n        }\n      });\n    };\n  }\n  async _transact(method, args, accountAddress) {\n    await this._init()\n    const gas = await this._estimatedGas(method, args, accountAddress)\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: numberToHex(gas),\n        value: numberToHex('0'),\n        data: this.contract.methods[method](...args).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n    //return await this.contract.methods[method](...args).send({from: accountAddress})\n  }\n\n}\n","\n/* eslint-disable */\nexport const perpetualPoolAbi = [ { \"inputs\": [ { \"internalType\": \"uint256[9]\", \"name\": \"parameters\", \"type\": \"uint256[9]\" }, { \"internalType\": \"address[4]\", \"name\": \"addresses\", \"type\": \"address[4]\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"AddLiquidity\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"AddMargin\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"liquidator\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"reward\", \"type\": \"uint256\" } ], \"name\": \"Liquidate\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"collector\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"ProtocolFeeCollection\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"RemoveLiquidity\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"RemoveMargin\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"tradeVolume\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" } ], \"name\": \"Trade\", \"type\": \"event\" }, { \"inputs\": [ { \"components\": [ { \"internalType\": \"address\", \"name\": \"bTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"decimals\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"discount\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct IPerpetualPool.BTokenInfo\", \"name\": \"info\", \"type\": \"tuple\" } ], \"name\": \"addBToken\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"addLiquidity\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"addMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"components\": [ { \"internalType\": \"string\", \"name\": \"symbol\", \"type\": \"string\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"int256\", \"name\": \"multiplier\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"feeRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"fundingRateCoefficient\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cumulativeFundingRate\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"tradersNetVolume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"tradersNetCost\", \"type\": \"int256\" } ], \"internalType\": \"struct IPerpetualPool.SymbolInfo\", \"name\": \"info\", \"type\": \"tuple\" } ], \"name\": \"addSymbol\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"targetPool\", \"type\": \"address\" } ], \"name\": \"approvePoolMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"collectProtocolFee\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"sourcePool\", \"type\": \"address\" } ], \"name\": \"executePoolMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getAddresses\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"lTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"pTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"routerAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"protocolFeeCollector\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" } ], \"name\": \"getBToken\", \"outputs\": [ { \"components\": [ { \"internalType\": \"address\", \"name\": \"bTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"decimals\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"discount\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct IPerpetualPool.BTokenInfo\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" } ], \"name\": \"getBTokenOracle\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getLengths\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getParameters\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"decimals0\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"minBToken0Ratio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"minPoolMarginRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"minInitialMarginRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"minMaintenanceMarginRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"minLiquidationReward\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"maxLiquidationReward\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"liquidationCutRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"protocolFeeCollectRatio\", \"type\": \"int256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getProtocolFeeAccrued\", \"outputs\": [ { \"internalType\": \"int256\", \"name\": \"\", \"type\": \"int256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" } ], \"name\": \"getSymbol\", \"outputs\": [ { \"components\": [ { \"internalType\": \"string\", \"name\": \"symbol\", \"type\": \"string\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"int256\", \"name\": \"multiplier\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"feeRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"fundingRateCoefficient\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cumulativeFundingRate\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"tradersNetVolume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"tradersNetCost\", \"type\": \"int256\" } ], \"internalType\": \"struct IPerpetualPool.SymbolInfo\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" } ], \"name\": \"getSymbolOracle\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"liquidator\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"liquidate\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"removeLiquidity\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"removeMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"discount\", \"type\": \"uint256\" } ], \"name\": \"setBTokenParameters\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"feeRatio\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"fundingRateCoefficient\", \"type\": \"uint256\" } ], \"name\": \"setSymbolParameters\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"tradeVolume\", \"type\": \"int256\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"trade\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\nexport const perpetualPoolRouterAbi = [ { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"lTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"pTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"liquidatorQualifierAddress\", \"type\": \"address\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"migrationTimestamp\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"source\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"target\", \"type\": \"address\" } ], \"name\": \"ExecuteMigration\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"migrationTimestamp\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"source\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"target\", \"type\": \"address\" } ], \"name\": \"PrepareMigration\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"bTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"discount\", \"type\": \"uint256\" } ], \"name\": \"addBToken\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"addLiquidity\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"addLiquidityWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"addMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"addMarginWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"symbol\", \"type\": \"string\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"multiplier\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"feeRatio\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"fundingRateCoefficient\", \"type\": \"uint256\" } ], \"name\": \"addSymbol\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"approveMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"claimNewController\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"controller\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"sourceRouter\", \"type\": \"address\" } ], \"name\": \"executeMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"liquidate\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"liquidateWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"liquidatorQualifier\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"migrationDestination\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"migrationTimestamp\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"pool\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"target\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"graceDays\", \"type\": \"uint256\" } ], \"name\": \"prepareMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"removeLiquidity\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"removeLiquidityWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"removeMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"removeMarginWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"discount\", \"type\": \"uint256\" } ], \"name\": \"setBTokenParameters\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"qualifierAddress\", \"type\": \"address\" } ], \"name\": \"setLiquidatorQualifier\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"newController\", \"type\": \"address\" } ], \"name\": \"setNewController\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"poolAddress\", \"type\": \"address\" } ], \"name\": \"setPool\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"feeRatio\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"fundingRateCoefficient\", \"type\": \"uint256\" } ], \"name\": \"setSymbolParameters\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"tradeVolume\", \"type\": \"int256\" } ], \"name\": \"trade\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"tradeVolume\", \"type\": \"int256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"tradeWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\nexport const bTokenAbi = [ { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"name_\", \"type\": \"string\" }, { \"internalType\": \"string\", \"name\": \"symbol_\", \"type\": \"string\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"Approval\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"Transfer\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\" } ], \"name\": \"allowance\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"approve\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"account\", \"type\": \"address\" } ], \"name\": \"balanceOf\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"decimals\", \"outputs\": [ { \"internalType\": \"uint8\", \"name\": \"\", \"type\": \"uint8\" } ], \"stateMutability\": \"pure\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"name\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"symbol\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalSupply\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"transfer\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"transferFrom\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\nexport const lTokenAbi = [ { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"name_\", \"type\": \"string\" }, { \"internalType\": \"string\", \"name\": \"symbol_\", \"type\": \"string\" }, { \"internalType\": \"uint256\", \"name\": \"numBTokens_\", \"type\": \"uint256\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"Approval\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"bool\", \"name\": \"approved\", \"type\": \"bool\" } ], \"name\": \"ApprovalForAll\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"Transfer\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": false, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"lastCumulativePnl\", \"type\": \"int256\" } ], \"name\": \"UpdateAsset\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"approve\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"balanceOf\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"burn\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"exists\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"getApproved\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" } ], \"name\": \"getAsset\", \"outputs\": [ { \"components\": [ { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct ILToken.Asset\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"getAssets\", \"outputs\": [ { \"components\": [ { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct ILToken.Asset[]\", \"name\": \"\", \"type\": \"tuple[]\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" } ], \"name\": \"isApprovedForAll\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"mint\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"name\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"numBTokens\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"ownerOf\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"pool\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" }, { \"internalType\": \"bytes\", \"name\": \"data\", \"type\": \"bytes\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"internalType\": \"bool\", \"name\": \"approved\", \"type\": \"bool\" } ], \"name\": \"setApprovalForAll\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"num\", \"type\": \"uint256\" } ], \"name\": \"setNumBTokens\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"newPool\", \"type\": \"address\" } ], \"name\": \"setPool\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"bytes4\", \"name\": \"interfaceId\", \"type\": \"bytes4\" } ], \"name\": \"supportsInterface\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"symbol\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalMinted\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalSupply\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"transferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct ILToken.Asset\", \"name\": \"asset\", \"type\": \"tuple\" } ], \"name\": \"updateAsset\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\nexport const pTokenAbi = [ { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"name_\", \"type\": \"string\" }, { \"internalType\": \"string\", \"name\": \"symbol_\", \"type\": \"string\" }, { \"internalType\": \"uint256\", \"name\": \"numSymbols_\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"numBTokens_\", \"type\": \"uint256\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"Approval\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"bool\", \"name\": \"approved\", \"type\": \"bool\" } ], \"name\": \"ApprovalForAll\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"Transfer\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"amount\", \"type\": \"int256\" } ], \"name\": \"UpdateMargin\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"volume\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"cost\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"lastCumulativeFundingRate\", \"type\": \"int256\" } ], \"name\": \"UpdatePosition\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"approve\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"balanceOf\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"burn\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"exists\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"getApproved\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" } ], \"name\": \"getMargin\", \"outputs\": [ { \"internalType\": \"int256\", \"name\": \"\", \"type\": \"int256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"getMargins\", \"outputs\": [ { \"internalType\": \"int256[]\", \"name\": \"\", \"type\": \"int256[]\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" } ], \"name\": \"getPosition\", \"outputs\": [ { \"components\": [ { \"internalType\": \"int256\", \"name\": \"volume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cost\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativeFundingRate\", \"type\": \"int256\" } ], \"internalType\": \"struct IPToken.Position\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"getPositions\", \"outputs\": [ { \"components\": [ { \"internalType\": \"int256\", \"name\": \"volume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cost\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativeFundingRate\", \"type\": \"int256\" } ], \"internalType\": \"struct IPToken.Position[]\", \"name\": \"\", \"type\": \"tuple[]\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" } ], \"name\": \"isApprovedForAll\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"mint\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"name\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"numBTokens\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"numSymbols\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"ownerOf\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"pool\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" }, { \"internalType\": \"bytes\", \"name\": \"data\", \"type\": \"bytes\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"internalType\": \"bool\", \"name\": \"approved\", \"type\": \"bool\" } ], \"name\": \"setApprovalForAll\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"num\", \"type\": \"uint256\" } ], \"name\": \"setNumBTokens\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"num\", \"type\": \"uint256\" } ], \"name\": \"setNumSymbols\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"newPool\", \"type\": \"address\" } ], \"name\": \"setPool\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"bytes4\", \"name\": \"interfaceId\", \"type\": \"bytes4\" } ], \"name\": \"supportsInterface\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"symbol\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalMinted\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalSupply\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"transferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"amount\", \"type\": \"int256\" } ], \"name\": \"updateMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"int256[]\", \"name\": \"margins\", \"type\": \"int256[]\" } ], \"name\": \"updateMargins\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"int256\", \"name\": \"volume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cost\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativeFundingRate\", \"type\": \"int256\" } ], \"internalType\": \"struct IPToken.Position\", \"name\": \"position\", \"type\": \"tuple\" } ], \"name\": \"updatePosition\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\nexport const wooOracleAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_I_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\nexport const chainlinkOracleAbi = [{\"type\":\"constructor\",\"stateMutability\":\"nonpayable\",\"inputs\":[{\"type\":\"address\",\"name\":\"_aggregator\",\"internalType\":\"address\"},{\"type\":\"address\",\"name\":\"_accessController\",\"internalType\":\"address\"}]},{\"type\":\"event\",\"name\":\"AnswerUpdated\",\"inputs\":[{\"type\":\"int256\",\"name\":\"current\",\"internalType\":\"int256\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"roundId\",\"internalType\":\"uint256\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"updatedAt\",\"internalType\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"NewRound\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"roundId\",\"internalType\":\"uint256\",\"indexed\":true},{\"type\":\"address\",\"name\":\"startedBy\",\"internalType\":\"address\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"startedAt\",\"internalType\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferRequested\",\"inputs\":[{\"type\":\"address\",\"name\":\"from\",\"internalType\":\"address\",\"indexed\":true},{\"type\":\"address\",\"name\":\"to\",\"internalType\":\"address\",\"indexed\":true}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"type\":\"address\",\"name\":\"from\",\"internalType\":\"address\",\"indexed\":true},{\"type\":\"address\",\"name\":\"to\",\"internalType\":\"address\",\"indexed\":true}],\"anonymous\":false},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"acceptOwnership\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"contract AccessControllerInterface\"}],\"name\":\"accessController\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"address\"}],\"name\":\"aggregator\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"confirmAggregator\",\"inputs\":[{\"type\":\"address\",\"name\":\"_aggregator\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint8\",\"name\":\"\",\"internalType\":\"uint8\"}],\"name\":\"decimals\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"string\",\"name\":\"\",\"internalType\":\"string\"}],\"name\":\"description\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"int256\",\"name\":\"\",\"internalType\":\"int256\"}],\"name\":\"getAnswer\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"_roundId\",\"internalType\":\"uint256\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint80\",\"name\":\"roundId\",\"internalType\":\"uint80\"},{\"type\":\"int256\",\"name\":\"answer\",\"internalType\":\"int256\"},{\"type\":\"uint256\",\"name\":\"startedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"updatedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint80\",\"name\":\"answeredInRound\",\"internalType\":\"uint80\"}],\"name\":\"getRoundData\",\"inputs\":[{\"type\":\"uint80\",\"name\":\"_roundId\",\"internalType\":\"uint80\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"getTimestamp\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"_roundId\",\"internalType\":\"uint256\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"int256\",\"name\":\"\",\"internalType\":\"int256\"}],\"name\":\"latestAnswer\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"latestRound\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint80\",\"name\":\"roundId\",\"internalType\":\"uint80\"},{\"type\":\"int256\",\"name\":\"answer\",\"internalType\":\"int256\"},{\"type\":\"uint256\",\"name\":\"startedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"updatedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint80\",\"name\":\"answeredInRound\",\"internalType\":\"uint80\"}],\"name\":\"latestRoundData\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"latestTimestamp\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"address payable\"}],\"name\":\"owner\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"contract AggregatorV2V3Interface\"}],\"name\":\"phaseAggregators\",\"inputs\":[{\"type\":\"uint16\",\"name\":\"\",\"internalType\":\"uint16\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint16\",\"name\":\"\",\"internalType\":\"uint16\"}],\"name\":\"phaseId\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"proposeAggregator\",\"inputs\":[{\"type\":\"address\",\"name\":\"_aggregator\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"contract AggregatorV2V3Interface\"}],\"name\":\"proposedAggregator\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint80\",\"name\":\"roundId\",\"internalType\":\"uint80\"},{\"type\":\"int256\",\"name\":\"answer\",\"internalType\":\"int256\"},{\"type\":\"uint256\",\"name\":\"startedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"updatedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint80\",\"name\":\"answeredInRound\",\"internalType\":\"uint80\"}],\"name\":\"proposedGetRoundData\",\"inputs\":[{\"type\":\"uint80\",\"name\":\"_roundId\",\"internalType\":\"uint80\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint80\",\"name\":\"roundId\",\"internalType\":\"uint80\"},{\"type\":\"int256\",\"name\":\"answer\",\"internalType\":\"int256\"},{\"type\":\"uint256\",\"name\":\"startedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"updatedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint80\",\"name\":\"answeredInRound\",\"internalType\":\"uint80\"}],\"name\":\"proposedLatestRoundData\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"setController\",\"inputs\":[{\"type\":\"address\",\"name\":\"_accessController\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"transferOwnership\",\"inputs\":[{\"type\":\"address\",\"name\":\"_to\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"version\",\"inputs\":[]}]\nexport const wrappedOracleAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\nexport const brokerManagerAbi = [{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"broker\",\"type\":\"address\"}],\"name\":\"SetBroker\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBroker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"broker\",\"type\":\"address\"}],\"name\":\"setBroker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-disable */","import { ContractBase } from './contract_base'\nimport { perpetualPoolAbi } from './abis';\nimport { deriToNatural, bg } from '../utils'\n\nexport class PerpetualPool extends ContractBase {\n  constructor(chainId, contractAddress, useInfura=false) {\n    super(chainId, contractAddress, perpetualPoolAbi, useInfura)\n\n    this.bTokenCount= 0\n    this.symbolCount= 0\n\n    this.lTokenAddress = ''\n    this.pTokenAddress = ''\n    this.routerAddress = ''\n    this.protocolFeeCollector = ''\n\n    this.protocolFeeAccrued = 0\n  }\n\n  async _update() {\n    await Promise.all([\n      this.getLengths(),\n      this.getAddresses(),\n      this.getParameters(),\n    ]);\n  }\n\n  async getLengths() {\n    try {\n      const res = await this._call('getLengths')\n      //console.log(res[0])\n      if (res[0] && res[1]) {\n        this.bTokenCount= parseInt(res[0])\n        this.symbolCount= parseInt(res[1])\n      }\n    } catch(err) {\n      throw new Error(`PerpetualPool#_getLength error: ${err}`)\n    }\n  }\n  async getAddresses() {\n    try {\n      const res = await this._call('getAddresses')\n      this.lTokenAddress = res.lTokenAddress\n      this.pTokenAddress = res.pTokenAddress\n      this.routerAddress = res.routerAddress\n      this.protocolFeeCollector = res.protocolFeeCollector\n    } catch (err) {\n      throw new Error(`PerpetualPool#_getAddress error: ${err}`)\n    }\n  }\n  async getParameters() {\n    const res = await this._call('getParameters')\n    return {\n      decimals0: res.decimals0,\n      minBToken0Ratio: deriToNatural(res.minBToken0Ratio),\n      minPoolMarginRatio: deriToNatural(res.minPoolMarginRatio),\n      minInitialMarginRatio: deriToNatural(res.minInitialMarginRatio),\n      minMaintenanceMarginRatio: deriToNatural(res.minMaintenanceMarginRatio),\n      minLiquidationReward: deriToNatural(res.minLiquidationReward),\n      maxLiquidationReward: deriToNatural(res.maxLiquidationReward),\n      liquidationCutRatio: deriToNatural(res.liquidationCutRatio),\n      protocolFeeCollectRatio: deriToNatural(res.protocolFeeCollectRatio),\n    };\n  }\n  async getProtocolFeeAccrued() {\n    const res =  await this._call('getProtocolFeeAccrued')\n    this.protocolFeeAccrued = deriToNatural(res)\n  }\n  async getBToken(bTokenId) {\n    try {\n      //bTokenId = parseInt(bTokenId)\n      const res = await this._call('getBToken', [bTokenId]);\n      return {\n        bTokenAddress: res.bTokenAddress,\n        swapperAddress: res.bTokenAddress,\n        oracleAddress: res.oracleAddress,\n        decimals: res.decimals,\n        discount: deriToNatural(res.discount),\n        price: deriToNatural(res.price),\n        liquidity: deriToNatural(res.liquidity),\n        pnl: deriToNatural(res.pnl),\n        cumulativePnl: deriToNatural(res.cumulativePnl),\n      };\n    } catch (err) {\n      throw new Error(`PerpetualPool#getBToken error: ${err}`);\n    }\n  }\n  async getBTokenOracle(bTokenId) {\n    //bTokenId = parseInt(bTokenId)\n    return await this._call('getBTokenOracle', [bTokenId])\n  }\n  async getSymbol(symbolId) {\n    //symbolId = parseInt(symbolId)\n    try {\n      const res =  await this._call('getSymbol', [symbolId])\n      return {\n        symbol: res.symbol,\n        oracleAddress: res.oracleAddress,\n        multiplier: deriToNatural(res.multiplier),\n        feeRatio: deriToNatural(res.feeRatio),\n        fundingRateCoefficient: deriToNatural(res.fundingRateCoefficient),\n        price: deriToNatural(res.price),\n        cumulativeFundingRate: deriToNatural(res.cumulativeFundingRate),\n        tradersNetVolume: deriToNatural(res.tradersNetVolume),\n        tradersNetCost: deriToNatural(res.tradersNetCost),\n      };\n    } catch (err) {\n      throw new Error(`PerpetualPool#getSymbol error: ${err}`);\n    }\n  }\n  async getSymbolOracle(symbolId) {\n    //symbolId = parseInt(symbolId)\n    return await this._call('getSymbolOracle', [symbolId])\n  }\n\n  // trade history query methods\n  async _getTimeStamp(blockNumber) {\n    await this._init()\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n  _calculateFee(volume, price, multiplier, feeRatio) {\n    return bg(volume)\n      .abs()\n      .times(price)\n      .times(multiplier)\n      .times(feeRatio)\n      .toString();\n  }\n  async _getBlockInfo(blockNumber) {\n    await this._init()\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n\n  async _getPastEvents(eventName, filter = {}, fromBlock = 0, to = 0) {\n    await this._init()\n    let events = [];\n    //let toBlock = await this._getBlockInfo(\"latest\");\n    let amount\n    if (['56', '97','127', '80001'].includes(this.chainId)) {\n      amount = 999\n    } else {\n      amount = 4999\n    }\n    if ((fromBlock + amount) > to) {\n      amount = to - fromBlock\n    }\n    while (fromBlock <= to) {\n      let es = await this.contract.getPastEvents(eventName, {\n        filter: filter,\n        fromBlock: fromBlock,\n        toBlock: fromBlock + amount,\n      });\n      for (let e of es) {\n        events.push(e);\n      }\n      fromBlock += amount + 1;\n      if ((fromBlock + amount) > to) {\n        amount = to - fromBlock\n      }\n    }\n    return events;\n  }\n}","import { ContractBase } from './contract_base'\nimport { perpetualPoolRouterAbi} from './abis';\nimport { naturalToDeri } from '../utils'\nimport { MAX_INT256 } from '../config';\n\nexport class PerpetualPoolRouter extends ContractBase {\n  constructor(chainId, contractAddress, useInfura=false) {\n    super(chainId, contractAddress, perpetualPoolRouterAbi, useInfura)\n    this.poolAddress = ''\n  }\n\n  // === query ===\n  async pool() {\n    this.poolAddress = await this._call('pool');\n    return this.poolAddress\n  }\n\n  // === transaction ===\n  async addLiquidity(accountAddress, bTokenId, amount) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'addLiquidity',\n      [bTokenId, naturalToDeri(amount)],\n      accountAddress\n    );\n  }\n\n  async removeLiquidity(accountAddress, bTokenId, amount, isMaximum) {\n    if (isMaximum) {\n      return await this._transact(\n        'removeLiquidity',\n        [bTokenId, MAX_INT256],\n        accountAddress\n      );\n    } else {\n      return await this._transact(\n        'removeLiquidity',\n        [bTokenId, naturalToDeri(amount)],\n        accountAddress\n      );\n    }\n  }\n\n  async addMargin(accountAddress, bTokenId, amount) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'addMargin',\n      [bTokenId, naturalToDeri(amount)],\n      accountAddress\n    );\n  }\n\n  async removeMargin(accountAddress, bTokenId, amount, isMaximum) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    if (isMaximum) {\n      console.log('->', MAX_INT256)\n      return await this._transact(\n        'removeMargin',\n        [bTokenId, MAX_INT256],\n        accountAddress\n      );\n    } else {\n      return await this._transact(\n        'removeMargin',\n        [bTokenId, naturalToDeri(amount)],\n        accountAddress\n      );\n    }\n  }\n\n  async trade(accountAddress, symbolId, amount) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'trade',\n      [symbolId, naturalToDeri(amount)],\n      accountAddress\n    );\n  }\n\n  // with prices\n  async addLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'addLiquidityWithPrices',\n      [bTokenId, naturalToDeri(amount), priceInfos],\n      accountAddress\n    );\n  }\n  async removeLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum) {\n    if (isMaximum) {\n      return await this._transact(\n        'removeLiquidityWithPrices',\n        [bTokenId, MAX_INT256, priceInfos],\n        accountAddress\n      );\n    } else {\n      return await this._transact(\n        'removeLiquidityWithPrices',\n        [bTokenId, naturalToDeri(amount), priceInfos],\n        accountAddress\n      );\n    }\n  }\n\n  async addMarginWithPrices(accountAddress, bTokenId, amount, priceInfos) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'addMarginWithPrices',\n      [bTokenId, naturalToDeri(amount), priceInfos],\n      accountAddress\n    );\n  }\n\n  async removeMarginWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    if (isMaximum) {\n      return await this._transact(\n        'removeMarginWithPrices',\n        [bTokenId, MAX_INT256, priceInfos],\n        accountAddress\n      );\n    } else {\n      return await this._transact(\n        'removeMarginWithPrices',\n        [bTokenId, naturalToDeri(amount), priceInfos],\n        accountAddress\n      );\n    }\n  }\n\n  async tradeWithPrices(accountAddress, symbolId, amount, priceInfos) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'tradeWithPrices',\n      [symbolId, naturalToDeri(amount), priceInfos],\n      accountAddress\n    );\n  }\n\n  // async liquidate(acountAddress) {\n  //   if (!this.poolAddress) {\n  //     await this.pool()\n  //   }\n  //   return await this._transact(\n  //     'liquidate',\n  //     [accountAddress],\n  //     accountAddress\n  //   );\n  // }\n\n}","import { ContractBase } from './contract_base'\nimport { bTokenAbi } from './abis';\nimport { deriToNatural, bg } from '../utils'\nimport { MAX_UINT256} from '../config'\n\n\nexport class BToken extends ContractBase {\n  constructor(chainId, contractAddress, useInfura=false) {\n    super(chainId, contractAddress, bTokenAbi, useInfura);\n  }\n  // === query ===\n  async symbol() {\n    return await this._call('symbol');\n  }\n\n  async decimals() {\n    return await this._call('decimals');\n  }\n  async _balanceOf(address) {\n    return await this._call('balanceOf', [address]);\n  }\n\n  async balanceOf(address) {\n    const [res, decimals] = await Promise.all([\n      this._balanceOf(address),\n      this.decimals(),\n    ]);\n    return bg(res, -decimals);\n  }\n\n  async totalSupply() {\n    const res = await this._call('totalSupply');\n    return deriToNatural(res);\n  }\n\n  async isUnlocked(accountAddress, poolAddress) {\n    const allowance = await this._call('allowance', [\n      accountAddress,\n      poolAddress,\n    ]);\n    return bg(allowance).gt(0);\n  }\n\n  // === transaction ===\n  async unlock(accountAddress, poolAddress) {\n    return await this._transact(\n      'approve',\n      [poolAddress, MAX_UINT256],\n      accountAddress\n    );\n  }\n\n  // async transfer() {\n  // call transfer\n  // }\n}","import { ContractBase } from './contract_base'\nimport { lTokenAbi } from './abis';\nimport { deriToNatural } from '../utils'\n\nconst processAsset = (res) => {\n  return {\n    liquidity: deriToNatural(res[0]),\n    pnl: deriToNatural(res[1]),\n    lastCumulativePnl: deriToNatural(res[2]),\n  }\n}\nexport class LToken extends ContractBase {\n  constructor(chainId, contractAddress, useInfura=false) {\n    super(chainId, contractAddress, lTokenAbi, useInfura)\n  }\n\n  // === query ===\n  async balanceOf(accountAddress) {\n    return await this._call('balanceOf', [accountAddress]);\n  }\n  async pool() {\n    return await this._call('pool');\n  }\n  async exists(accountAddress) {\n    return await this._call('exists', [accountAddress]);\n  }\n  async getAsset(accountAddress, bTokenId) {\n    const res = await this._call('getAsset', [accountAddress, bTokenId]);\n    if (Array.isArray(res)) {\n      return processAsset(res)\n    } else {\n      console.log('address', this.contractAddress)\n      console.log('res', res)\n      throw new Error(`LToken#getAsset: invalid result with (${accountAddress} ${bTokenId})`)\n    }\n  }\n  async getAssets(accountAddress) {\n    const res = await this._call('getAssets', [accountAddress]);\n    if (Array.isArray(res)) {\n      return res.map(i => processAsset(i))\n    } else {\n      throw new Error(`LToken#getAsset: invalid result with (${accountAddress})`)\n    }\n  }\n\n  // === transaction ===\n}","import { ContractBase } from './contract_base'\nimport { pTokenAbi } from './abis';\nimport { deriToNatural } from '../utils'\n\nconst processPosition = (res) => {\n  return {\n    volume: deriToNatural(res.volume),\n    cost: deriToNatural(res.cost),\n    lastCumulativeFundingRate: deriToNatural(res.lastCumulativeFundingRate),\n  }\n}\nexport class PToken extends ContractBase {\n  constructor(chainId, contractAddress, useInfura=false) {\n    super(chainId, contractAddress, pTokenAbi, useInfura)\n  }\n\n  // === query ===\n  async pool() {\n    return await this._call('pool');\n  }\n  async balanceOf(accountAddress) {\n    return await this._call('balanceOf', [accountAddress]);\n  }\n  async exists(accountAddress) {\n    return await this._call('exists', [accountAddress]);\n  }\n  async getMargin(accountAddress, symbolId) {\n    const res = await this._call('getMargin', [accountAddress, symbolId]);\n    return deriToNatural(res)\n  }\n  async getMargins(accountAddress) {\n    const res = await this._call('getMargins', [accountAddress]);\n    if (Array.isArray(res)) {\n      return res.map((i) => deriToNatural(i))\n    }\n  }\n  async getPosition(accountAddress, symbolId) {\n    const res = await this._call('getPosition', [accountAddress, symbolId]);\n    if (Array.isArray(res)) {\n      return processPosition(res)\n    } else {\n      throw new Error(`PToken#getMargin: invalid result with (${accountAddress})`)\n    }\n  }\n  async getPositions(accountAddress) {\n    const res = await this._call('getPositions', [accountAddress]);\n    if (Array.isArray(res)) {\n      return res.map((i) => processPosition(i))\n    }\n  }\n\n  // === transaction ===\n}","import { ContractBase } from \"./contract_base\";\nimport { wooOracleAbi } from './abis';\nimport { bg } from '../utils';\n\nexport class WooOracle extends ContractBase {\n  constructor(chainId, address, symbol, decimal, useInfura) {\n    super(chainId, address, wooOracleAbi, useInfura)\n    this.symbol = symbol\n    this.decimal = decimal\n  }\n\n  async getPrice() {\n    const res = await this._call('_I_')\n    return bg(res, `-${this.decimal}`).toString();\n  }\n}","import { ContractBase } from \"./contract_base\";\nimport { chainlinkOracleAbi } from './abis';\nimport { bg } from \"../utils\";\n\nexport class ChainlinkOracle extends ContractBase {\n  constructor(chainId, address, symbol, decimal, useInfura) {\n    super(chainId, address, chainlinkOracleAbi, useInfura)\n    this.symbol = symbol\n    this.decimal = decimal\n  }\n\n  // decimals refers https://docs.chain.link/docs/matic-addresses\n  async getPrice() {\n    const res = await this._call('latestRoundData');\n    if (res && res.answer) {\n      return bg(res.answer, `-${this.decimal}`).toString()\n    }\n  }\n}","import { ContractBase } from \"./contract_base\";\nimport { wrappedOracleAbi } from './abis';\nimport { bg, deriToNatural } from \"../utils\";\n\nexport class WrappedOracle extends ContractBase {\n  constructor(chainId, address, symbol, decimal, useInfura) {\n    super(chainId, address, wrappedOracleAbi, useInfura)\n    this.symbol = symbol\n    this.decimal = decimal\n  }\n\n  // decimals refers https://docs.chain.link/docs/matic-addresses\n  async getPrice() {\n    const res = await this._call('getPrice');\n    if (res) {\n      return deriToNatural(res).toString()\n    }\n  }\n}","import { ContractBase } from \"./contract_base\";\nimport { brokerManagerAbi } from './abis';\n\nexport class BrokerManager extends ContractBase {\n  constructor(chainId, address, useInfura) {\n    super(chainId, address, brokerManagerAbi, useInfura)\n  }\n  // query\n  async getBroker(accountAddress) {\n    return await this._call('getBroker', [accountAddress])\n  }\n\n  // transaction\n  async setBroker(accountAddress, brokerAddress) {\n    return await this._transact(\n      'setBroker',\n      [brokerAddress],\n      accountAddress\n    );\n  }\n}","var map = {\n\t\"./de/bridge.json\": 578,\n\t\"./de/broker.json\": 579,\n\t\"./de/dip-history.json\": 580,\n\t\"./de/footer.json\": 581,\n\t\"./de/governance.json\": 582,\n\t\"./de/header.json\": 583,\n\t\"./de/home.json\": 584,\n\t\"./de/lite.json\": 585,\n\t\"./de/mining.json\": 586,\n\t\"./de/mobile-lite.json\": 587,\n\t\"./de/pro.json\": 588,\n\t\"./de/team.json\": 589,\n\t\"./en/bridge.json\": 590,\n\t\"./en/broker.json\": 591,\n\t\"./en/dip-history.json\": 592,\n\t\"./en/footer.json\": 593,\n\t\"./en/governance.json\": 594,\n\t\"./en/header.json\": 595,\n\t\"./en/home.json\": 596,\n\t\"./en/lite.json\": 597,\n\t\"./en/mining.json\": 598,\n\t\"./en/mobile-lite.json\": 599,\n\t\"./en/pro.json\": 600,\n\t\"./en/team.json\": 601,\n\t\"./zh/bridge.json\": 602,\n\t\"./zh/broker.json\": 603,\n\t\"./zh/dip-history.json\": 604,\n\t\"./zh/footer.json\": 605,\n\t\"./zh/governance.json\": 606,\n\t\"./zh/header.json\": 607,\n\t\"./zh/home.json\": 608,\n\t\"./zh/lite.json\": 609,\n\t\"./zh/mining.json\": 610,\n\t\"./zh/mobile-lite.json\": 611,\n\t\"./zh/pro.json\": 612,\n\t\"./zh/team.json\": 613\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 577;","import { getConfig } from './config';\n\nconst expendPoolConfig = (config) => {\n  const pools = config.pools;\n  //console.log(pools)\n  return pools\n    .map((pool) => {\n      let result = [];\n      for (let i = 0; i < pool.bTokens.length; i++) {\n        const bToken = pool.bTokens[i];\n        for (let i = 0; i < pool.symbols.length; i++) {\n          const symbol = pool.symbols[i];\n          result.push({\n            pool: pool.pool,\n            pToken: pool.pToken,\n            lToken: pool.lToken,\n            router: pool.router,\n            initialBlock: pool.initialBlock,\n            chainId: pool.chainId,\n            bToken: bToken.bToken,\n            bTokenId: bToken.bTokenId,\n            bTokenSymbol: bToken.bTokenSymbol,\n            symbol: symbol.symbol,\n            symbolId: symbol.symbolId,\n            unit: symbol.unit,\n            version: 'v2',\n          });\n        }\n      }\n      return result;\n    })\n    .flat();\n};\n\nexport const getPoolConfigList = () => {\n  const config = getConfig()\n  return expendPoolConfig(config)\n};\n\nexport const getFilteredPoolConfigList = (poolAddress, bTokenId, symbolId) => {\n  bTokenId = typeof bTokenId === 'number' ? bTokenId.toString() : bTokenId\n  symbolId = typeof symbolId === 'number' ? symbolId.toString() : symbolId\n  const poolConfigList = getPoolConfigList()\n  const check = bTokenId != null\n    ? symbolId != null\n      ? (i) =>\n          i.pool === poolAddress &&\n          i.bTokenId === bTokenId &&\n          i.symbolId === symbolId\n      : (i) => i.pool === poolAddress && i.bTokenId === bTokenId\n    : (symbolId != null ? (i) => i.pool === poolAddress && i.symbolId === symbolId : (i) => i.pool === poolAddress);\n  if (poolConfigList.length > 0) {\n    const res = poolConfigList.filter(check)\n    if (res && res.length > 0) {\n      return res\n    }\n  }\n  throw new Error(`Cannot find the pool config by poolAddress(${poolAddress}) bTokenId(${bTokenId}) and symbolId(${symbolId})`)\n}\n\nexport const getPoolConfig = (poolAddress, bTokenId, symbolId) => {\n  const res =  getFilteredPoolConfigList(poolAddress, bTokenId, symbolId)\n  return res[0]\n}\n\nexport const _getPoolConfig = (poolAddress) => {\n  const config = getConfig()\n  const pools = config.pools;\n  let pool = pools.find((p) => p.pool === poolAddress);\n  //console.log(pool)\n  if (pool) {\n    return pool\n  }\n  throw new Error(`Cannot find the pool by poolAddress(${poolAddress})`);\n};\n\nexport const getPoolConfig2 = (poolAddress, bTokenId, symbolId) => {\n  const pool = _getPoolConfig(poolAddress);\n  const defaultBToken = {\n    bTokenId: '',\n    bTokenSymbol: '',\n    bToken: '',\n  };\n  const defaultSymbol = {\n    symbolId: '',\n    symbol: '',\n    unit: '',\n  };\n  let bToken, symbol;\n  if (bTokenId !== undefined || bTokenId !== null) {\n    bToken = pool.bTokens.find((b) => b.bTokenId === bTokenId) || defaultBToken;\n  }\n  if (symbolId !== undefined || symbolId !== null) {\n    symbol = pool.symbols.find((b) => b.symbolId === symbolId) || defaultSymbol;\n  }\n  return {\n    pool: pool.pool,\n    pToken: pool.pToken,\n    lToken: pool.lToken,\n    router: pool.router,\n    broker: pool.broker,\n    bTokenCount: pool.bTokenCount,\n    symbolCount: pool.symbolCount,\n    initialBlock: pool.initialBlock,\n    chainId: pool.chainId,\n    bToken: bToken.bToken,\n    bTokenId: bToken.bTokenId,\n    bTokenSymbol: bToken.bTokenSymbol,\n    symbol: symbol.symbol,\n    symbolId: symbol.symbolId,\n    unit: symbol.unit,\n    version: 'v2',\n  };\n};\n\nexport const getBTokenList = (poolAddress) => {\n  const pool = _getPoolConfig(poolAddress);\n  return pool.bTokens.map((b) => {\n    return {\n      bTokenId: b.bTokenId,\n      bTokenSymbol: b.bTokenSymbol,\n      bTokenAddress: b.bToken,\n    };\n  });\n};\n\nexport const getBTokenIdList = (poolAddress) => {\n  const pool = _getPoolConfig(poolAddress);\n  return pool.bTokens.map((b) => b.bTokenId);\n};\n\nexport const getSymbolList = (poolAddress) => {\n  const pool = _getPoolConfig(poolAddress);\n  return pool.symbols.map((s) => {\n    return {\n      symbol: s.symbol,\n      symbolId: s.symbolId,\n      unit: s.unit,\n    };\n  });\n};\n\nexport const getSymbolIdList = (poolAddress) => {\n  const pool = _getPoolConfig(poolAddress);\n  return pool.symbols.map((b) => b.symbolId);\n};","// add a new chain: validateChainId, getChainProviderUrls, getNetworkName, getDailyBlockNumberConfig\nexport const getChainIds = () => {\n  return ['1', '3', '56', '97', '128', '256', '137', '80001'];\n};\nexport const getChainProviderUrls = (chainId) => {\n  const chainProviderUrls = [\n    {\n      provider_urls: [\n        'https://mainnet.infura.io/v3/d0e6582644a845ee8d7c3c18683fec06',\n      ],\n      chainId: '1',\n    },\n    {\n      provider_urls: [\n        'https://bsc-dataseed.binance.org',\n        'https://bsc-dataseed1.defibit.io/',\n        'https://bsc-dataseed1.ninicoin.io/',\n      ],\n      chainId: '56',\n    },\n    {\n      provider_urls: ['https://http-mainnet.hecochain.com'],\n      chainId: '128',\n    },\n    {\n      provider_urls: [\n        'https://rpc-mainnet.matic.network',\n        'https://rpc-mainnet.maticvigil.com',\n        'https://rpc-mainnet.matic.quiknode.pro',\n        'https://matic-mainnet.chainstacklabs.com',\n        'https://matic-mainnet-full-rpc.bwarelabs.com',\n        'https://matic-mainnet-archive-rpc.bwarelabs.com',\n      ],\n      chainId: '137',\n    },\n    {\n      provider_urls: [\n        'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '3',\n    },\n    {\n      provider_urls: [\n        'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '42',\n    },\n    {\n      provider_urls: [\n        //'https://data-seed-prebsc-1-s1.binance.org:8545/',\n        'https://data-seed-prebsc-1-s2.binance.org:8545/',\n        'https://data-seed-prebsc-1-s3.binance.org:8545/',\n        'https://data-seed-prebsc-2-s1.binance.org:8545/',\n        'https://data-seed-prebsc-2-s2.binance.org:8545/',\n        'https://data-seed-prebsc-2-s3.binance.org:8545/',\n      ],\n      chainId: '97',\n    },\n    {\n      provider_urls: ['https://http-testnet.hecochain.com'],\n      chainId: '256',\n    },\n    {\n      provider_urls: [\n        'https://rpc-mumbai.matic.today',\n        'https://rpc-mumbai.maticvigil.com',\n        'https://matic-mumbai.chainstacklabs.com',\n        'https://matic-testnet-archive-rpc.bwarelabs.com',\n      ],\n      chainId: '80001',\n    },\n  ];\n\n  const res = chainProviderUrls.filter((i) => i.chainId  === chainId)\n  //console.log('res',res)\n  if (res.length > 0) {\n    return res[0].provider_urls\n  } else {\n    throw new Error(`getChainProviderUrls: no urls for chainId ${chainId}`)\n  }\n}\n\nexport const getDailyBlockNumberConfig = () => {\n  // let chainBlockNumberList = [\n  //   '2367422',\n  //   '2367422',\n  //   '10497304',\n  //   '10497304',\n  //   '10511369',\n  //   '10511369',\n  //   '14747860',\n  //   '14747860',\n  // ];\n\n  // compute matic aunual block number: block height(16309458, 10000000)\n  let chainBlockNumberList = [\n    '6486',\n    '6486',\n    '28759',\n    '28759',\n    '28798',\n    '28798',\n    '40405',\n    '40405',\n  ];\n  return getChainIds().reduce((accum, i, index) => {\n    accum[i] = chainBlockNumberList[index];\n    return accum;\n  }, {});\n};\n\n// MAX UINT/INT256\nexport const MAX_UINT256 =\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\nexport const MAX_INT256 =\n  '0x9392ee8e921d5d073aff322e62439fcf32d7f344649470f90';\n\n","import React, { useState, useEffect } from 'react'\nimport {isBrowser,isMobile} from 'react-device-detect'\nimport LoadableComponent from './utils/LoadableComponent';\nimport { inject, observer } from 'mobx-react';\n\nconst DesktopApp = LoadableComponent(() => import('./desktop/index'))\nconst MobileApp = LoadableComponent(() => import('./mobile/index'))\n\nfunction App({intl}) {\n  if(isBrowser){\n    return <DesktopApp locale={intl.locale}/>\n  }\n  if(isMobile){\n    return <MobileApp locale={intl.locale}/>\n  }\n}\n\nexport default inject('intl')(observer(App)) ;\n","import { makeObservable, observable, action, computed } from \"mobx\";\nimport { restoreLocale, storeLocale } from \"../utils/utils\";\nimport supportedCatalog from '../locales/lang.json'\n\n\nconst cache = {}\n\nfunction importAll(r){\n  return r.keys().forEach(key => {\n    const path = key.split('/')\n    const lang = path[1]\n    const page = path[2].split('.')[0].toLowerCase()\n    if(!cache[lang]) {\n      cache[lang] = {}\n    }\n    \n    if(/mobile-/.test(page)){\n      const pageName= page.split('-')[1]\n      if(!cache[lang][pageName]){ \n        cache[lang][pageName] = {}\n      }\n      cache[lang][pageName]['mobile'] = r(key)\n    } else {\n      cache[lang][page] = r(key)\n    }\n  });\n}\n//lang.json 是语言包目录，需要排除在外\nimportAll(require.context(`../locales/`,true,/^((?!lang).)*\\.json$/))\n\nclass Intl {\n  locale = 'en'\n  constructor(){\n    makeObservable(this,{\n      locale : observable,\n      setLocale : action,\n      dict : computed,\n      localeLabel: computed\n    })\n    const language = navigator.language\n    const prefix = language && language.split('-')[0]\n    const locale = restoreLocale()\n    if(locale && Object.keys(supportedCatalog).includes(locale) ){\n      this.locale = locale\n    } else if(prefix && Object.keys(supportedCatalog).includes(prefix)){\n      this.locale = prefix\n    }\n  }\n\n  setLocale(locale){\n    if(locale){\n      this.locale = locale;\n      storeLocale(locale)\n    }\n  }\n\n  get(page,key){\n    return cache[this.locale][page][key]\n  }\n\n  get dict(){         \n    return cache[this.locale]\n  }\n\n  get localeLabel(){\n    return supportedCatalog[this.locale]\n  }\n}\n\nexport default new Intl();","\nimport {getUserWalletBalance ,DeriEnv,connectWallet, isUnlocked, unlock } from \"../lib/web3js/indexV2\";\nimport config from '../config.json'\nimport { formatBalance, eqInNumber, storeChain } from \"../utils/utils\";\nimport { observable, computed, action, makeAutoObservable } from \"mobx\";\n\n\nclass Wallet {\n  \n  detail = {}\n  \n  constructor(){\n    makeAutoObservable(this,{\n      detail : observable,\n      setDetail : action,\n      supportV2 : computed,\n      supportV1 : computed,\n      supportAllVersion : computed,\n      supportChain : computed\n    })\n  }\n\n  supportWeb3 = () => !!window.ethereum\n\n  isConnected = () => !!this.detail.account;\n\n\n  async isApproved(pool,bTokenId){\n    if(this.detail.chainId && this.supportChain){\n      const isApproved = await isUnlocked(this.detail.chainId,pool,this.detail.account,bTokenId).catch(e => console.error('load approve error'))\n      this.detail.isApproved = isApproved;\n      this.setDetail(this.detail)\n      return isApproved;\n    }\n  }\n\n  approve = async (pool,bTokenId) => {\n    if(this.detail.chainId){\n      const approved = await unlock(this.detail.chainId,pool,this.detail.account,bTokenId);\n      return approved\n    }\n  }\n\n  connect =  async () => {\n    const res = await connectWallet();\n    return new Promise(async (resolve,reject) => {\n      if(res.success){\n        const {chainId,account} = res\n        const wallet = await this.loadWalletBalance(chainId,account);      \n        resolve(wallet)\n      } else {\n        reject(null)\n      }\n    })\n  }\n\n  loadWalletBalance = async (chainId,account) => {\n    const balance = await getUserWalletBalance(chainId,account)\n    const detail = {chainId,account,balance,formatBalance : formatBalance(balance)}\n    const env = DeriEnv.get();\n    const {chainInfo} = config[env]\n    \n    if(chainInfo[chainId]){\n      Object.assign(detail,{...chainInfo[chainId],supported : true})\n      storeChain(chainInfo[chainId])\n    }\n    this.setDetail(detail)\n    return detail;\n  }\n\n  get = () => {\n    return this.detail;\n  }\n\n  setDetail(detail){\n    this.detail = detail;\n  }\n\n  refresh(){\n    this.loadWalletBalance(this.detail.chainId,this.detail.account);\n  }\n\n  get supportV2() {\n    return this.detail.supportV2\n  }\n\n  get supportV1(){\n    return this.detail.supportV1;\n  }\n\n  get supportAllVersion(){\n    return this.detail.supportV1 && this.detail.supportV2\n  }\n\n  get supportChain(){\n    return this.detail.supported\n  }\n\n\n}\n\nexport default Wallet;","import { makeAutoObservable, observable, action} from \"mobx\";\nimport WebSocket from \"socket.io-client\";\n\nclass Oracle {\n  symbol = 'BTCUSD'\n  timeType = 'min'\n  index = 0.00\n  kData = []\n  ws = null\n  paused = false;\n  listeners = {}\n  already = false\n\n  constructor(){\n    makeAutoObservable(this,{\n      index : observable,\n      kData : observable,\n      setIndex : action,\n    })\n  }\n\n\n  initWebSocket(){\n    if(this.ws === null) {\n      this.ws = new WebSocket(process.env.REACT_APP_WSS_URL, {        \n        transports: ['websocket'],\n        withCredentials: true\n      })\n      this.ws.on('connect',() => {\n        if(this.already){\n          this.ws.emit('get_kline_update', {'symbol': this.symbol, 'time_type': this.timeType})\n          console.log('ws is reconnected already')\n        }\n        console.log('ws is already connected');\n      });\n    }    \n  }\n\n\n  load(symbol,timeType = 'min'){\n    // symbol = symbol+'_V2'\n    this.initWebSocket()\n    this.ws.on('kline_update',data => {\n      const obj = {}\n      let time = data.time\n      if (data.symbol.toUpperCase() === this.symbol.toUpperCase()) {\n        obj.time = time \n        obj.low = Number(data.low)\n        obj.high = Number(data.high)\n        obj.open = Number(data.open)\n        obj.close = Number(data.close)\n        obj.volume = Number(data.volume)\n        obj.time_type = data.time_type\n        obj.symbol = data.symbol\n        if(!this.paused) {\n          this.setIndex(obj.close)\n          for(const key of Object.keys(this.listeners)){\n            if(typeof this.listeners[key] === 'function'){\n              this.listeners[key](obj)\n            }\n          }\n        }\n      }\n    })\n    if(symbol !== this.symbol){\n      this.unsubscribeBars(this.symbol);\n    }\n    this.setSymbol(symbol)\n    this.setTimeType(timeType);\n    this.ws.emit('get_kline_update', {'symbol': this.symbol, 'time_type': this.timeType})\n    this.already = true\n  }\n\n  addListener(id,listener){\n    if(!this.listeners[id]) {\n      this.listeners[id] = listener\n    }    \n  }\n\n\n\n  unsubscribeBars(symbol){\n    if(this.ws){\n      this.ws.emit('un_get_kline_update', {\n        symbol : symbol, 'time_type' : 'min'\n      })\n    }\n  }\n\n\n  //暂不用\n  loadHistory(symbol,timeType,callback){\n    this.ws.on('kline_history', data => {\n      const history = data.map(el => {\n        return {\n          time: el.time,\n          low: Number(el.low),\n          high: Number(el.high),\n          open: Number(el.open),\n          close: Number(el.close),\n          volume: Number(el.volume)\n        }\n      })\n      if(callback){\n        console.log('history ->',history[history.length-1].time)\n        callback(history)\n      }\n    })\n    this.ws.emit('get_kline', {'symbol': symbol, 'time_type': timeType, 'bars': 1000})\n  }\n\n  resume(){\n    this.setPause(false)\n  }\n\n  pause(){\n    this.setPause(true)\n  }\n\n  setIndex(index){\n    if(!this.paused) {\n      this.index = index;\n    }\n  }\n\n  setSymbol(symbol){\n    this.symbol = symbol\n  }\n\n  setTimeType(timeType){\n    this.timeType = timeType;\n  }\n  setPause(paused){\n    this.paused = paused\n  }\n}\n\nexport default Oracle","import { getPositionInfo } from \"../lib/web3js/indexV2\"\n\nexport default class Position {\n\n  callback = () => {}\n   wallet = null;\n   spec = null\n \n   mockPositionInfo = {\n    averageEntryPrice: \"\",\n    liquidationPrice: \"\",\n    margin: \"20000\",\n    marginHeld: \"10068.26538\",\n    marginHeldBySymbol : \"293.16152\",\n    unrealizedPnl: \"3.1311\",\n    volume: \"800\",\n   }\n\n   async load(wallet,spec,callback){\n     if(wallet && wallet.isConnected() && wallet.supportChain && spec && spec.pool){\n      const position = await getPositionInfo(wallet.detail.chainId,spec.pool,wallet.detail.account,spec.symbolId)\n      if(position){\n        if(callback){\n          callback(position)\n        }\n      }\n      this.start(wallet,spec,callback)\n      return position;\n     }\n   }\n\n   start(wallet,spec,callback){\n     if(!this.interval){\n      this.interval = window.setInterval(() => this.load(wallet,spec,callback),3000)      \n      if(wallet){\n        this.wallet= wallet; \n      }\n      if(spec){\n        this.spec = spec\n      }\n      if(callback){\n        this.callback = callback;\n      }\n     }\n   }\n\n   pause(){\n    clearInterval(this.interval);\n    this.interval = null;\n   }\n\n   resume(wallet,spec,callback){\n     this.start(wallet,spec,callback || this.callback)\n   }\n\n   \n\n\n \n}","import { getSpecification } from \"../lib/web3js/indexV2\";\n\nexport default class Contract {\n  info = {\n    bSymbol:'BUSD',\n    symbol:'BTCUSD',\n    multiplier:'0.0001',\n    fundingRateCoefficient:'0.0000025',\n    minInitialMarginRatio:0.1,\n    minMaintenanceMarginRatio:0.05,\n    feeRatio:0.0005,\n  }\n\n  async load(wallet,config){\n    if(wallet && wallet.supportChain && config && config.pool !== this.info.pool){\n      const spec = await getSpecification(wallet.detail.chainId,config.pool,config.bTokenId,config.symbolId);\n      this.setInfo(spec)\n    }\n    return this.info\n  }\n\n  setInfo(info){\n    this.info = info\n  }\n}","import { getTradeHistory } from \"../lib/web3js/indexV2\";\n\n\nexport default class History {\n\n   async load(wallet,config){\n      if(wallet && wallet.supportChain && wallet.detail.chainId && config && config.pool){\n         const all = await getTradeHistory(wallet.detail.chainId,config.pool,wallet.detail.account,config.symbolId);    \n         return all;\n      } else {\n         return []\n      }\n   }\n}","import { observable, action, computed, makeObservable } from \"mobx\";\nimport Oracle from \"./Oracle\";\nimport Position from \"./Position\";\nimport Contract from \"./Contract\";\nimport History from './History'\nimport Config from \"./Config\";\nimport { eqInNumber, storeConfig, getConfigFromStore, restoreChain, getFormatSymbol } from \"../utils/utils\";\nimport { getFundingRate } from \"../lib/web3js/indexV2\";\nimport { bg } from \"../lib/web3js/indexV2\";\nimport Intl from \"./Intl\";\n\n/**\n * 交易模型\n * 关联对象\n * 1. chain\n * 2. Oracle\n * 3. position\n * 4. contract\n * 5. history\n * 计算\n * 1. dynamic balance\n * 2. available blance\n * 响应事件\n * 1. chain change\n * 2. chain’s symbol changed\n * 3. index update\n * 4. volum change\n * 5. margin change\n * 输出\n * 1. dynamic balance\n * 2. margin\n * 3. available balance\n * 4. volume\n * 5. specs\n * 6. spec\n * 7. position\n * 8. contract\n * 9. fundingRate\n */\n\nexport default class Trading {\n  version = null;\n  wallet = null;\n  configs = [] \n  config = null;\n  index = ''\n  volume = ''\n  paused = false\n  slideIncrementMargin = 0\n  position = {}\n  contract = {}\n  fundingRate = {}\n  history = []\n  userSelectedDirection = 'long'\n  supportChain = true\n\n  constructor(){\n    makeObservable(this,{\n      index : observable,\n      volume : observable,\n      slideIncrementMargin : observable,\n      fundingRate : observable,\n      position : observable,\n      history : observable,\n      contract : observable,\n      userSelectedDirection : observable,\n      supportChain : observable,\n      setWallet :action,\n      setConfigs : action,\n      setConfig : action,\n      setIndex : action,\n      setContract : action,\n      setPosition : action,\n      setVolume : action,\n      setUserSelectedDirection : action,\n      setSupportChain : action,\n      setFundingRate : action,\n      setHistory : action,\n      setSlideMargin : action,\n      amount : computed,\n      fundingRateTip : computed,\n      direction : computed,\n      volumeDisplay : computed,\n      isNegative : computed,\n      isPositive : computed\n    })\n    this.configInfo = new Config();\n    this.oracle = new Oracle();\n    this.positionInfo = new Position()\n    this.contractInfo = new Contract();\n    this.historyInfo = new History()\n  }\n\n  /**\n   * 初始化\n   */\n  async init(wallet,version){    \n    if(version){\n      this.version = version\n    }\n    const all = await this.configInfo.load(version);\n    //如果连上钱包，有可能当前链不支持\n    if(wallet.isConnected()){\n      this.setWallet(wallet);\n      this.setConfigs(all.filter(c => eqInNumber(wallet.detail.chainId,c.chainId)))\n      let defaultConfig = this.getDefaultConfig(this.configs,wallet);\n      //如果还是为空，则默认用所有config的第一条\n      if(!defaultConfig){\n        //没有默认的配置，\n        this.setSupportChain(false);\n        defaultConfig = all.length > 0 ? all[0] : {}\n      }\n      this.setConfig(defaultConfig);\n    } \n    //如果没有钱包或者链接的链不一致，设置默认config，BTCUSD\n    if(!wallet.isConnected()){\n      //没有钱包插件\n      if(!wallet.supportWeb3()){\n        //默认用v2\n        version.setCurrent('v2')\n        const all = await this.configInfo.load(version);\n        const defaultConfig = all.find(c => c.symbol === 'BTCUSD')\n        this.setConfig(defaultConfig)\n      }\n    }\n    this.loadByConfig(this.wallet,this.config,true)\n    this.setVolume('')\n  }\n\n  async switch(spec){\n    const cur = this.configs.find(config => config.pool === spec.pool && config.symbolId === spec.symbolId)\n    //v1 只需要比较池子地址，v2 需要比较symbolId\n    let changed = false\n    if(this.version){\n      changed = this.version.isV1 ? spec.pool !== this.config.pool : spec.symbolId !== this.config.symbolId\n    }\n    if(cur){\n      this.pause();\n      this.setConfig(cur)\n      this.loadByConfig(this.wallet,cur,changed);  \n      if(changed){\n        this.store(cur)\n      }    \n      this.resume()\n      this.setVolume('')\n    }\n  }\n\n  async loadByConfig(wallet,config,symbolChanged){\n     //position\n     const position = await this.positionInfo.load(wallet,config,position => {       \n        this.setPosition(position);\n     })\n\n     //切换指数\n    if(symbolChanged && config){\n      const symbol = getFormatSymbol(config.symbol)\n      this.oracle.unsubscribeBars(symbol);\n      this.oracle.addListener('trading',data => {\n        this.setIndex(data.close)\n      })\n      \n      if(position){\n        this.setIndex(position.price);\n      }\n      this.oracle.load(symbol)\n    }\n     //contract\n     const contract = await this.contractInfo.load(wallet,config)    \n\n     //funding rate\n     const fundingRate = await this.loadFundingRate(wallet,config)\n     \n     //history\n     const history = await this.historyInfo.load(wallet,config);\n\n     if(contract){\n      this.setContract(contract)\n     }\n\n     if(fundingRate){\n      this.setFundingRate(fundingRate)\n     }\n\n     if(history){\n      this.setHistory(history);\n     }\n  }\n\n\n    //优先使用session storage 的，如果缓存跟用户当前链一直，则命中缓存，否则取当前配置第一条\n    getDefaultConfig(configs = [],wallet){\n      let defaultConfig = null;\n      if(configs.length > 0){    \n        const fromStore = this.getFromStore();\n        if(fromStore && eqInNumber(wallet.detail.chainId,fromStore.chainId)){\n          defaultConfig = fromStore;\n        }\n        if(defaultConfig){\n          //虽然从缓存获得config ，需要判断池子地址是否一致，否则用可用config的第一条\n          const pos = configs.findIndex(c => c.pool === defaultConfig.pool);\n          if(pos === -1){\n            defaultConfig = configs[0];\n          }\n        } else {\n          defaultConfig = configs[0]\n        }   \n      }\n      return defaultConfig;    \n    }\n\n \n\n  //存起来\n  store(config){\n    storeConfig(this.version.current,config)\n  }\n\n  getFromStore(){\n    return getConfigFromStore(this.version.current)\n  }\n\n  async syncFundingRate(){\n    //资金费率和仓位同步\n    const fundingRate = await this.loadFundingRate(this.wallet,this.config)   \n    if(fundingRate){\n      this.setFundingRate(fundingRate)      \n    }\n  }\n\n  async refresh(){\n    this.pause()\n    const position = await this.positionInfo.load(this.wallet,this.config, async (position)  => {       \n      this.setPosition(position);\n      this.syncFundingRate();\n    });\n    if(position){\n      this.setPosition(position)\n    }\n    this.syncFundingRate();\n    this.wallet.loadWalletBalance(this.wallet.detail.chainId,this.wallet.detail.account)\n    const history = await this.historyInfo.load(this.wallet,this.config)\n    if(history){\n      this.setHistory(history)\n    }\n    this.setVolume('')\n    this.resume();\n  }\n\n  /**\n   * 暂停实时读取index和定时读取position\n   */\n  pause(){\n    this.setPaused(true)\n    this.oracle.pause();\n    this.positionInfo.pause();\n  }\n\n  /**\n   * 恢复读取\n   */\n  resume(){\n    this.setPaused(false)\n    this.oracle.resume();\n    this.positionInfo.resume(this.wallet,this.config);\n  }\n\n  setWallet(wallet){\n    this.wallet = wallet;\n  }\n\n  setConfigs(configs){\n    this.configs = configs\n  }\n\n  setConfig(config){\n    this.config = config\n  }\n\n  setIndex(index){\n    this.index = index;\n  }\n\n  setPosition(position){\n    if(position){\n      this.position = position\n    }\n  }\n\n  setContract(contract){\n    this.contract = contract\n  }\n\n  setHistory(history){\n    this.history = history\n  }\n\n  setFundingRate(fundingRate){\n    this.fundingRate = fundingRate;\n  }\n\n  setVolume(volume){\n    this.volume = volume;\n  }\n\n  setPaused(paused){\n    this.paused = paused\n  }\n\n  setSupportChain(support){\n    this.supportChain = support;\n  }\n\n  setUserSelectedDirection(direction){\n    this.userSelectedDirection = direction\n  }\n\n  setSlideMargin(slideIncrementMargin){\n    if(slideIncrementMargin !== ''){\n      this.slideIncrementMargin =  slideIncrementMargin\n      const position = this.position;\n      const price = position.price || this.index\n      const increment = slideIncrementMargin - position.marginHeld\n      const volume = increment / (price * this.contract.multiplier * this.contract.minInitialMarginRatio);\n      this.setVolume(volume.toFixed(0))\n    }\n  }\n\n\n  get volumeDisplay(){\n    if(Math.abs(this.volume) === 0 || this.volume === '' || this.volume === '-' || this.volume === 'e' || isNaN(this.volume)) {\n      return '';\n    } else {\n      return Math.abs(this.volume)\n    }\n  }\n  \n\n  get amount(){\n    const position = this.position\n    const contract = this.contract;\n    const volume = this.volume === '' || isNaN(this.volume) ? 0 : Math.abs(this.volume)\n    let {margin, marginHeldBySymbol:currentSymbolMarginHeld ,marginHeld,unrealizedPnl} = position\n    const price = position.price || this.index\n    //v2\n    let otherMarginHeld = bg(marginHeld).minus(currentSymbolMarginHeld)\n    otherMarginHeld = otherMarginHeld.isNaN() ? bg(0) : otherMarginHeld;\n    const contractValue = volume * price * contract.multiplier;\n    const incrementMarginHeld = contractValue * contract.minInitialMarginRatio\n    let totalMarginHeld = bg(marginHeld) ;\n\n    //如果当前仓位为正仓用户做空或者当前仓位为负仓用户做多，总仓位相减,取绝对值\n    if((this.isPositive && this.userSelectedDirection === 'short') || (this.isNegative && this.userSelectedDirection === 'long')){\n      totalMarginHeld = totalMarginHeld.minus(incrementMarginHeld);\n      if(totalMarginHeld.lt(otherMarginHeld)){\n        totalMarginHeld =  otherMarginHeld.plus(otherMarginHeld.minus(totalMarginHeld).abs())        \n      } \n      currentSymbolMarginHeld = bg(currentSymbolMarginHeld).minus(incrementMarginHeld).abs().toFixed(2)\n    } else {\n      totalMarginHeld = bg(marginHeld).plus(incrementMarginHeld)\n      if(currentSymbolMarginHeld){\n        currentSymbolMarginHeld = bg(currentSymbolMarginHeld).plus(incrementMarginHeld).toFixed(2);\n      }\n    }\n\n    const dynBalance = margin && bg(margin).plus(unrealizedPnl).toFixed(2);    \n    //总保证金和当前symbol保证金不能超过余额\n    totalMarginHeld = totalMarginHeld.gt(dynBalance) ? dynBalance : totalMarginHeld.toFixed(2)\n    if(currentSymbolMarginHeld){\n      currentSymbolMarginHeld = (+currentSymbolMarginHeld) > (+dynBalance) ? dynBalance : (+currentSymbolMarginHeld).toFixed(2);\n    }\n    let available = bg(dynBalance).minus(totalMarginHeld).toFixed(2)\n    const exchanged = bg(volume).multipliedBy(contract.multiplier).toFixed(4)\n    const totalVolume = this.userSelectedDirection === 'short' ? (-this.volumeDisplay + (+position.volume)) : ((+this.volumeDisplay) +  (+position.volume))    \n    const totalContractValue = totalVolume * price * contract.multiplier\n    const leverage = Math.abs(totalContractValue / (+dynBalance)).toFixed(1);\n    available = (+available) < 0 ? 0 : available\n    return {\n      volume : this.volume,\n      dynBalance : dynBalance,\n      margin : totalMarginHeld,\n      available : available,\n      exchanged : exchanged,\n      currentSymbolMarginHeld : currentSymbolMarginHeld,\n      leverage : leverage\n    }\n  }\n\n  get direction(){    \n    // 正仓\n    if(this.margin !== ''){\n      if((+this.position.volume) > 0) {\n        if(Math.abs(this.volume) > Math.abs(this.position.volume)) {\n          return 'long'\n        } else {\n          return 'short'\n        }\n      } else if((+this.position.volume) < 0){\n        //负仓\n        if((+this.volume) > Math.abs(+this.position.volume)){\n          return 'short'\n        } else {\n          return 'long'\n        }\n      }\n    }\n    return 0\n  }\n\n  //正仓\n  get isPositive(){\n    return bg(this.position.volume).gt(0);\n  }\n\n  //负仓\n  get isNegative(){\n    return bg(this.position.volume).isNegative();\n  }\n\n  //资金费率\n  async loadFundingRate(wallet,config){\n    if(config){\n      const chainId = wallet && wallet.isConnected() && wallet.supportChain ? wallet.detail.chainId : config.chainId\n      if(config){    \n        const res = await getFundingRate(chainId,config.pool,config.symbolId).catch(e => console.error('getFundingRate was error,maybe network is wrong'))\n        return res;\n      }\n    }\n  }\n\n  get fundingRateTip(){    \n    if(this.version && this.version.isV2){\n      if(this.fundingRate && this.fundingRate.fundingRatePerBlock && this.config){\n        if(Intl.locale === 'zh'){\n          return `${Intl.get('lite','funding-rate-per-block')} = ${this.fundingRate.fundingRatePerBlock}` +\n        `\\n ${Intl.get('lite','per-block')} ${Intl.get('lite','1-long-contract-pays-1-short-contract')} (${this.fundingRate.fundingRatePerBlock} * ${Intl.get('lite','index-price-camelize')} * ${this.contract.multiplier} ) ${this.config.bTokenSymbol}`        \n        } else {\n          return `${Intl.get('lite','funding-rate-per-block')} = ${this.fundingRate.fundingRatePerBlock}` +\n        `\\n${Intl.get('lite','1-long-contract-pays-1-short-contract')} (${this.fundingRate.fundingRatePerBlock} * ${Intl.get('lite','index-price-camelize')} * ${this.contract.multiplier} ) ${this.config.bTokenSymbol} ${Intl.get('lite','per-block')}`        \n        }\n        \n      }\n    } else {\n      if(this.fundingRate && this.fundingRate.fundingRatePerBlock && this.config){\n        if(Intl.locale === 'zh'){\n          return `${Intl.get('lite','funding-rate-per-block')} = ${this.fundingRate.fundingRatePerBlock}` +\n        `\\n${Intl.get('lite','per-block')} ${Intl.get('lite','1-long-contract-pays-1-short-contract')} ${this.fundingRate.fundingRatePerBlock} ${this.config.bTokenSymbol} `        \n        } else {\n          return `${Intl.get('lite','funding-rate-per-block')} = ${this.fundingRate.fundingRatePerBlock}` +\n        `\\n${Intl.get('lite','1-long-contract-pays-1-short-contract')} ${this.fundingRate.fundingRatePerBlock} ${this.config.bTokenSymbol} ${Intl.get('lite','per-block')})`        \n        }        \n      }\n    }\n    \n    return ''\n  }\n\n\n\n}","import { makeAutoObservable, observable, action, computed } from \"mobx\";\nimport { storeVersion, restoreVersion } from \"../utils/utils\";\n\nexport default class Version {\n  current = null;\n\n  constructor(){\n    makeAutoObservable(this,{\n      current : observable,\n      setCurrent : action,\n      isV1 : computed,\n      isV2 : computed\n    })\n    // const versionFromSession = restoreVersion();\n    // this.current = versionFromSession ? this.setCurrent(versionFromSession) : null\n  }\n\n\n  setCurrent(version,notSave){\n    this.current = version;\n    if(!notSave){\n      storeVersion(version)\n    }\n  }\n\n  switch(){\n    if(this.current === 'v1'){\n      this.setCurrent('v2')\n    } else {\n      this.setCurrent('v1')\n    }\n  }\n\n  get isV1() {\n    return this.current === 'v1'\n  }\n\n  get isV2(){\n    return this.current === 'v2'\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter} from 'react-router-dom'\nimport App from './App';\nimport './assets/deri.less';\nimport { Provider } from 'mobx-react';\nimport Wallet from './model/Wallet';\nimport Trading from './model/Trading';\nimport { DeriEnv } from './lib/web3js/indexV2';\nimport Version from './model/Version';\nimport intl from './model/Intl';\n\nconst wallet = new Wallet();\nconst trading = new Trading()\nconst version = new Version();\n\nif(process.env.NODE_ENV === 'production') {\n  DeriEnv.set('prod')\n}\n// DeriEnv.set('prod')\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider wallet={wallet}  trading={trading} version={version} intl={intl}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n","import { bTokenFactory, slpPoolFactory } from '../factory/contracts';\nimport { getSlpContractAddress } from '../utils';\n\n/**\n * Get liquidity info of SLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.liquidity\n * @returns {string} response.bTokenBalance\n * @returns {string} response.shares\n */\nexport const getSlpLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  // console.log('pool', poolAddress, bTokenAddress)\n  if (bTokenAddress) {\n    const slpPool = slpPoolFactory(chainId, poolAddress);\n    //slpPool.setAccount(accountAddress);\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    //bToken.setAccount(accountAddress);\n    const [liquidity, bTokenBalance, shares] = await Promise.all([\n      bToken.balance(poolAddress),\n      bToken.balance(accountAddress),\n      slpPool.getLiquidity(accountAddress),\n    ]);\n\n    return {\n      poolLiquidity: liquidity.toString(),\n      bTokenBalance: bTokenBalance.toString(),\n      shares: shares.toString(),\n      shareValue: '1',\n    };\n  }\n  console.log('no SlpPool address, please check');\n  return {};\n};\n\n/**\n * Add liquidity to SLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addSlpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  // console.log('pool', poolAddress, bTokenAddress)\n  if (bTokenAddress) {\n    const slpPool = slpPoolFactory(chainId, poolAddress);\n    //slpPool.setAccount(accountAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    //bToken.setAccount(accountAddress);\n    try {\n      const tx = await slpPool.addLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of slp pool' };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity to SLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeSlpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  // console.log('pool', poolAddress, bTokenAddress)\n  if (bTokenAddress) {\n    const slpPool = slpPoolFactory(chainId, poolAddress);\n    //slpPool.setAccount(accountAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    //bToken.setAccount(accountAddress);\n    try {\n      const tx = await slpPool.removeLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of slp pool' };\n  }\n  return res;\n};\n\n/**\n * Check account is unlocked in the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isSlpUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Unlock the account in the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockSlp = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Get account balance in Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string} Account balance\n */\nexport const getSlpWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n","import { bTokenFactory, clp2PoolFactory } from '../factory/contracts';\nimport { getClp2ContractAddress } from '../utils';\n\nexport const getClp2LiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clp2Pool = clp2PoolFactory(chainId, poolAddress);\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    const [liquidity, bTokenBalance, shares] = await Promise.all([\n      bToken.balance(poolAddress),\n      bToken.balance(accountAddress),\n      clp2Pool.getLiquidity(accountAddress),\n    ]);\n\n    return {\n      poolLiquidity: liquidity.toString(),\n      bTokenBalance: bTokenBalance.toString(),\n      shares: shares.toString(),\n      shareValue: '1',\n    };\n  }\n  console.log('no Clp2Pool address, please check');\n  return {};\n};\n\nexport const addClp2Liquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clp2Pool = clp2PoolFactory(chainId, poolAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    try {\n      const tx = await clp2Pool.addLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp2 pool' };\n  }\n  return res;\n};\n\nexport const removeClp2Liquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clp2Pool = clp2PoolFactory(chainId, poolAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    try {\n      const tx = await clp2Pool.removeLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp2 pool' };\n  }\n  return res;\n};\n\nexport const isClp2Unlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\nexport const unlockClp2 = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\nexport const getClp2WalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n","import {\n  bTokenFactory,\n  clpPoolFactory,\n  lTokenFactory,\n} from '../factory/contracts';\nimport { bg, getClpContractAddress } from '../utils';\n\n/**\n * Get liquidity Info of the CLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.totalSupply\n * @returns {string} response.poolLiquidity\n * @returns {string} response.shares\n * @returns {string} response.shareValue\n * @returns {string} response.maxRemovableShares\n */\nexport const getClpLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { lTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const clpPool = clpPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const { liquidity } = await clpPool.getStateValues();\n  //console.log(liquidity);\n\n  return {\n    totalSupply: lTokenTotalSupply.toString(),\n    poolLiquidity: liquidity.toString(),\n    shares: lTokenBalance.toString(),\n    shareValue: (lTokenTotalSupply.eq(0)\n      ? bg(0)\n      : liquidity.div(lTokenTotalSupply)\n    ).toString(),\n    maxRemovableShares: lTokenBalance.toString(),\n  };\n};\n\n/**\n * Add liquidity to the CLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addClpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clpPool = clpPoolFactory(chainId, poolAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    try {\n      const tx = await clpPool.addLiquidity(accountAddress, amount);\n      console.log(tx, typeof tx);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp pool' };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity of the CLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeClpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clpPool = clpPoolFactory(chainId, poolAddress);\n    try {\n      const tx = await clpPool.removeLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp pool' };\n  }\n  return res;\n};\n\n/**\n * Check account is unlocked in the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isClpUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Unlock the account in the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockClp = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Get account balance in Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string} Account balance\n */\nexport const getClpWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n","import { DeriEnv } from '../../config';\nimport jsonConfig from '../resouces/config.json';\nimport { validateObjectKeyExist, validateIsArray } from '../utils';\n\nconst validateConfig = (config) => {\n  validateObjectKeyExist(\n    [\n      'pool',\n      'pToken',\n      'lToken',\n      'router',\n      'initialBlock',\n      'bTokens',\n      'symbols',\n      'chainId',\n    ],\n    config,\n    ''\n  );\n  validateIsArray(config['bTokens'], 'bTokens');\n  config['bTokens'].forEach((prop) => {\n    validateObjectKeyExist(\n      ['bTokenId', 'bTokenSymbol', 'bToken'],\n      prop,\n      'bToken'\n    );\n  });\n  validateIsArray(config['symbols'], 'symbols');\n  config['symbols'].forEach((prop) => {\n    validateObjectKeyExist(['symbolId', 'symbol'], prop, 'symbol');\n  });\n};\n\nconst processConfig = (config) => {\n  // process config\n  config['bTokenCount'] = config['bTokens'].length;\n  config['symbolCount'] = config['symbols'].length;\n};\n\nconst getJsonConfig = () => {\n  const env = DeriEnv.get();\n  const configs = typeof jsonConfig === 'object' ? jsonConfig : JSON.parse(jsonConfig);\n  if (['prod', 'dev'].includes(env)) {\n    //console.log(env)\n    if (configs[env]) {\n      //console.log(configs[env])\n      // pools\n      const pools = configs[env].pools;\n      if (pools && Array.isArray(pools)) {\n        for (let i = 0; i < pools.length; i++) {\n          validateConfig(pools[i]);\n          processConfig(pools[i]);\n        }\n      }\n      //console.log(configs[env])\n      validateObjectKeyExist(['oracle'], configs[env], 'oracle')\n      validateObjectKeyExist(['brokerManager'], configs[env], 'brokerManager')\n      return configs[env];\n    }\n  }\n  throw new Error(\n    `getJsonConfig(): invalid config of env '${env}'`,\n    configs[env]\n  );\n};\n\nexport const getConfig = () => {\n  return getJsonConfig();\n};\n","import Web3 from 'web3';\nimport { metaMaskWeb3, web3Factory } from '../factory/web3';\n\nconst MAX_GAS_AMOUNT = 532731;\n\nexport class Contract {\n  constructor(chainId, contractAddress, contractAbi, isProvider) {\n    this.chainId = chainId;\n    this.contractAddress = contractAddress;\n    this.contractAbi = contractAbi;\n    this.isProvider = isProvider;\n  }\n  async _init() {\n    if (!this.web3) {\n      if (this.isProvider) {\n        this.web3 = await web3Factory(this.chainId);\n      } else {\n        this.web3 = metaMaskWeb3();\n      }\n      this.contract = new this.web3.eth.Contract(\n        this.contractAbi,\n        this.contractAddress\n      );\n    }\n  }\n\n  setAccount(accountAddress) {\n    this.accountAddress = accountAddress;\n    return this;\n  }\n  setPool(poolAddress) {\n    this.poolAddress = poolAddress;\n    return this;\n  }\n  async _call(method, args = []) {\n    let res\n    let retry = 2\n    while(retry > 0) {\n      try {\n        await this._init()\n        res = await this.contract.methods[method](...args).call();\n        break\n      } catch(err) {\n        retry -= 1\n        this.web3 = null\n        if (err.toString().includes('Invalid JSON RPC response')) {\n          console.log(`Invalid JSON RPC response with chainId(${this.chainId})`);\n        } else if (err.toString().includes(\"Returned values aren't valid,\")) {\n          console.log(`Invalid contract address(${this.contractAddress}) and chainId(${this.chainId})`);\n        }\n      }\n    }\n    if (retry === 0 && !res) {\n      throw new Error(`The contract(${this.contractAddress}) '${method}(${args})' failed with max retry 2.`)\n    }\n    return res\n  }\n\n  async _estimatedGas(method, args = [], accountAddress) {\n    let gas = 0;\n    for (let i = 0; i < 2; i++) {\n      try {\n        gas = await this.contract.methods[method](...args).estimateGas({\n          from: accountAddress,\n        });\n        gas = parseInt(gas * 1.25);\n        break;\n      } catch (err) {\n        //console.log(\"err\", err);\n      }\n    }\n    if (gas == 0) gas = MAX_GAS_AMOUNT;\n    if (gas > MAX_GAS_AMOUNT) gas = MAX_GAS_AMOUNT;\n    return gas;\n  }\n\n  _getTransactionReceipt(tx) {\n    const self = this;\n    return function _transactionReceipt(resolve, reject) {\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\n        if (error) {\n          reject(error);\n        } else if (receipt === null) {\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\n        } else if (receipt.status === false) {\n          receipt.errorMessage = 'Transaction failed';\n          reject(receipt);\n        } else {\n          resolve(receipt);\n        }\n      });\n    };\n  }\n  async _transact(method, args, accountAddress) {\n    await this._init()\n    const gas = await this._estimatedGas(method, args, accountAddress)\n      //this.web3.eth.getGasPrice(),\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods[method](...args).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\nimport {\n  hasInvalidArgsValue,\n  getBTCUSDPrice,\n  getOracleInfo,\n  deriToNatural,\n  bg,\n} from '../utils';\nimport {\n  calculateFundingRate,\n  calculateLiquidityUsed,\n  processFundingRate,\n} from '../calculation';\n\n/* eslint-disable */\nconst POOL_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"DepositMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawMargin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMaintenanceMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingRateCoefficient\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationCutRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDelayAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"cumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"cumuFundingRateBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetVolume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetCost\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[4]\",\"name\":\"addresses_\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[12]\",\"name\":\"parameters_\",\"type\":\"uint256[12]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class PerpetualPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, POOL_ABI, isProvider);\n    // this.contract = new this.web3.eth.Contract(POOL_ABI, this.contractAddress);\n  }\n\n  async symbol() {\n    return await this._call('symbol');\n  }\n\n  async getStateValues() {\n    let result;\n    const defaultValue = bg(0);\n    try {\n      const res = await this._call('getStateValues');\n      //console.log(\"getStateValues() raw:\", res)\n      result = {\n        cumuFundingRate: deriToNatural(res.cumuFundingRate),\n        cumuFundingRateBlock: bg(res.cumuFundingRateBlock),\n        liquidity: deriToNatural(res.liquidity),\n        tradersNetVolume: deriToNatural(res.tradersNetVolume),\n        tradersNetCost: deriToNatural(res.tradersNetCost),\n      };\n    } catch (err) {\n      result = {\n        cumuFundingRate: defaultValue,\n        cumuFundingRateBlock: defaultValue,\n        liquidity: defaultValue,\n        tradersNetCost: defaultValue,\n        tradersNetVolume: defaultValue,\n      };\n      console.log(`getStateValues: ${err}`);\n    }\n    return result;\n  }\n\n  async getParameters() {\n    let result;\n    const defaultValue = bg(0);\n    try {\n      const res = await this._call('getParameters');\n      // console.log(\"getParameters() raw: \", res)\n      result = {\n        multiplier: deriToNatural(res.multiplier),\n        feeRatio: deriToNatural(res.feeRatio),\n        minPoolMarginRatio: deriToNatural(res.minPoolMarginRatio),\n        minInitialMarginRatio: deriToNatural(res.minInitialMarginRatio),\n        minMaintenanceMarginRatio: deriToNatural(res.minMaintenanceMarginRatio),\n        minAddLiquidity: deriToNatural(res.minAddLiquidity),\n        redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\n        fundingRateCoefficient: deriToNatural(res.fundingRateCoefficient),\n        minLiquidationReward: deriToNatural(res.minLiquidationReward),\n        maxLiquidationReward: deriToNatural(res.maxLiquidationReward),\n        liquidationCutRatio: deriToNatural(res.liquidationCutRatio),\n        priceDelayAllowance: bg(res.priceDelayAllowance),\n      };\n    } catch (err) {\n      result = {\n        multiplier: defaultValue,\n        feeRatio: defaultValue,\n        minPoolMarginRatio: defaultValue,\n        minInitialMarginRatio: defaultValue,\n        minMaintenanceMarginRatio: defaultValue,\n        minAddLiquidity: defaultValue,\n        redemptionFeeRatio: defaultValue,\n        fundingRateCoefficient: defaultValue,\n        minLiquidationReward: defaultValue,\n        maxLiquidationReward: defaultValue,\n        liquidationCutRatio: defaultValue,\n        priceDelayAllowance: defaultValue,\n      };\n      console.log(`getParameters: ${err}`);\n    }\n    return result;\n  }\n\n  _getTransactionReceipt(tx) {\n    const self = this;\n    return function _transactionReceipt(resolve, reject) {\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\n        if (error) {\n          reject(error);\n        } else if (receipt == null) {\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\n        } else if (receipt.status === false) {\n          receipt.errorMessage = 'Transaction failed';\n          reject(receipt);\n        } else {\n          resolve(receipt);\n        }\n      });\n    };\n  }\n  async _estimatedGas(method, args, accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    let gas = 0;\n    for (let i = 0; i < 20; i++) {\n      try {\n        gas = await this.contract.methods[method](...args).estimateGas({\n          from: accountAddress,\n        });\n        gas = parseInt(gas * 1.25);\n        break;\n      } catch (err) {\n        //console.log(\"err\", err);\n      }\n    }\n    if (gas == 0) gas = 532731;\n    if (gas > 532731) gas = 532731;\n    return gas;\n  }\n\n  async _transactPool(method, args = [], accountAddress) {\n    await this._init()\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    const oracle = await getOracleInfo(this.chainId, this.contractAddress);\n    let signed = [oracle.timestamp, oracle.price, oracle.v, oracle.r, oracle.s];\n\n    // const [gas, gasPrice] = await Promise.all([\n    //   this._estimatedGas(method, [...args, ...signed], accountAddress),\n    //   this.web3.eth.getGasPrice(),\n    // ]);\n    //console.log(`gasPrice ${gasPrice / 1000000000} GW`);\n    const gas = await this._estimatedGas(method, [...args, ...signed], accountAddress)\n\n    //gasPrice: Web3.utils.numberToHex(gasPrice),\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods[method](...args, ...signed).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n\n  async getFundingRate() {\n    let price, fundingRate, fundingRatePerBlock, liquidityUsed;\n    price = await getBTCUSDPrice(this.chainId, this.contractAddress);\n    try {\n      const { tradersNetVolume, liquidity } = await this.getStateValues();\n      const {\n        multiplier,\n        fundingRateCoefficient,\n        minPoolMarginRatio,\n      } = await this.getParameters();\n      //console.log(\"minPoolMarginRatio\", minPoolMarginRatio.toString())\n      const args1 = [\n        tradersNetVolume,\n        price,\n        multiplier,\n        liquidity,\n        fundingRateCoefficient,\n      ];\n      if (hasInvalidArgsValue(...args1)) {\n        fundingRate = '0';\n        fundingRatePerBlock = '0';\n      } else {\n        fundingRatePerBlock = calculateFundingRate(...args1);\n        fundingRate = processFundingRate(this.chainId, fundingRatePerBlock);\n      }\n      const args2 = [\n        tradersNetVolume,\n        price,\n        multiplier,\n        liquidity,\n        minPoolMarginRatio,\n      ];\n      if (hasInvalidArgsValue(...args2)) {\n        liquidityUsed = '0';\n      } else {\n        liquidityUsed = calculateLiquidityUsed(...args2);\n      }\n      return {\n        price,\n        multiplier: multiplier.toString(),\n        fundingRate: fundingRate,\n        fundingRatePerBlock: fundingRatePerBlock,\n        tradersNetVolume: tradersNetVolume.toString(),\n        liquidity: liquidity.toString(),\n        fundingRateCoefficient: fundingRateCoefficient.toString(),\n        liquidityUsed: liquidityUsed,\n        poolMarginRatio: minPoolMarginRatio.toString(),\n      };\n    } catch (err) {\n      console.log('PerpetualPool#gerFundingRate():', err);\n      throw err;\n    }\n  }\n\n  async depositMargin(accountAddress, amount) {\n    //await this.web3.eth.getAccounts(console.log)\n    //console.log('depositMargin');\n    let res;\n    try {\n      let tx = await this._transactPool(\n        'depositMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [amount],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      console.log('here');\n      res = { success: false, error: err };\n    }\n    return res;\n  }\n  async _getBlockInfo(blockNumber) {\n    await this._init()\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n  async _getPastEvents(eventName, filter = {}, fromBlock = 0, to = 0) {\n    await this._init()\n    let events = [];\n    //let toBlock = await this._getBlockInfo(\"latest\");\n    //toBlock = toBlock.number;\n    let amount;\n    if (['56', '137', '97', '80001'].includes(this.chainId)) {\n      amount = 999;\n    } else {\n      amount = 4999;\n    }\n    if (fromBlock + amount > to) {\n      amount = to - fromBlock;\n    }\n    while (fromBlock <= to) {\n      //console.log('tick')\n      let es = await this.contract.getPastEvents(eventName, {\n        filter: filter,\n        fromBlock,\n        toBlock: fromBlock + amount,\n      });\n      for (let e of es) {\n        events.push(e);\n      }\n      fromBlock += amount + 1;\n      if (fromBlock + amount > to) {\n        amount = to - fromBlock;\n      }\n    }\n    return events;\n  }\n  async _getTimeStamp(blockNumber) {\n    await this._init()\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n  _calculateFee(volume, price, multiplier, feeRatio) {\n    return bg(volume)\n      .abs()\n      .times(price)\n      .times(multiplier)\n      .times(feeRatio)\n      .toString();\n  }\n}\n","import { Contract } from './contract';\nimport { bg, deriToNatural, MAX_VALUE } from '../utils';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradedAddress\",\"type\":\"address\"}],\"name\":\"deprecate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBasisPoints\",\"type\":\"uint256\"},{\"name\":\"newMaxFee\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisPointsRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"Deprecate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"Params\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]\n/* eslint-enable */\n\nexport class BTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, isProvider);\n    this.poolAddress = poolAddress;\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n\n  async isUnlocked(accountAddress) {\n    let allowance = await this._call('allowance', [\n      accountAddress,\n      this.poolAddress,\n    ]);\n    allowance = deriToNatural(allowance);\n    return allowance.gt(0);\n  }\n\n  async unlock(accountAddress) {\n    return await this._transact(\n      'approve',\n      [this.poolAddress, MAX_VALUE],\n      accountAddress\n    );\n  }\n\n  async symbol() {\n    return await this._call('symbol');\n  }\n\n  async decimals() {\n    return await this._call('decimals');\n  }\n  async _balance(address) {\n    return await this._call('balanceOf', [address]);\n  }\n\n  async balance(address) {\n    const [res, decimals] = await Promise.all([\n      this._balance(address),\n      this.decimals(),\n    ]);\n    return bg(res, -decimals);\n  }\n}\n","import { deriToNatural, bg } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class PTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, isProvider);\n    this.poolAddress = poolAddress;\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n\n  async getPositionInfo(accountAddress) {\n    let result = {};\n    try {\n      const res = await this._call('getPosition(address)', [accountAddress]);\n      //console.log(\"getPositionInfo() raw:\", res)\n      result = {\n        volume: deriToNatural(res[0]),\n        cost: deriToNatural(res[1]),\n        lastCumuFundingRate: deriToNatural(res[2]),\n        margin: deriToNatural(res[3]),\n        lastUpdateTimestamp: bg(res[4]),\n      };\n    } catch (err) {\n      result = {\n        volume: bg(0),\n        cost: bg(0),\n        lastCumuFundingRate: bg(0),\n        margin: bg(0),\n        lastUpdateTimestamp: bg(0),\n      };\n      //console.log(`getPositionInfo: ${err}`);\n    }\n    return result;\n  }\n\n  async exists(accountAddress) {\n    return await this._call('exists', [accountAddress]);\n  }\n}\n","import { deriToNatural } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class LTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, isProvider);\n    this.poolAddress = poolAddress;\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n\n  async balance(accountAddress) {\n    const res = deriToNatural(await this._call('balanceOf', [accountAddress]));\n    //console.log(\"> lToken balance\", res.toString())\n    return res;\n  }\n\n  async totalSupply() {\n    const res = deriToNatural(await this._call('totalSupply'));\n    //console.log(\"> lToken totalSupply\", res.toString())\n    return res;\n  }\n}\n","import Web3 from 'web3';\nimport { getDBProviderUrlsConfig } from '../config/database';\nimport { getLatestRPCServer } from '../utils';\n\nexport class DatabaseBaseContract {\n  constructor(contractAddress, contractAbi) {\n    this.contractAddress = contractAddress;\n    this.contractAbi = contractAbi;\n  }\n  _init() {\n    this.web3 = new Web3(new Web3.providers.HttpProvider(this.providerUrl));\n    this.contract = new this.web3.eth.Contract(\n      this.contractAbi,\n      this.contractAddress\n    );\n  }\n\n  async updateProviderUrl() {\n    if (!this.providerUrl) {\n      this.providerUrl = await getLatestRPCServer(getDBProviderUrlsConfig());\n      this._init();\n    }\n  }\n\n  async _call(method, args) {\n    let res\n    let retry = 3\n    while(retry > 0) {\n      try {\n        await this.updateProviderUrl();\n        res = await this.contract.methods[method](...args).call();\n        break\n      } catch (err) {\n        this.providerUrl = null\n      }\n      retry -= 1\n    }\n    if (retry === 0 && !res) {\n      throw new Error(`database ${method}(${args}): exceed max retry 3.`)\n    }\n    return res\n  }\n}\n","import { DatabaseBaseContract } from './database_base';\n\n/* eslint-disable */\nconst DB_CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"setValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DatabaseContract extends DatabaseBaseContract {\n  constructor(contractAddress) {\n    super(contractAddress, DB_CONTRACT_ABI)\n  }\n  async getValues(keyArray) {\n    return await this._call('getValues', [keyArray])\n  }\n}\n","import { DatabaseBaseContract } from './database_base'\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"values\",\"type\":\"address[]\"}],\"name\":\"unsetSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DatabaseWormholeContract extends DatabaseBaseContract {\n  constructor(contractAddress) {\n    super(contractAddress, CONTRACT_ABI)\n  }\n\n  async signature(accountAddress) {\n    return await this._call('signature', [accountAddress])\n  }\n}\n","import { DatabaseBaseContract } from './database_base'\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"setValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DatabaseAirdropContract extends DatabaseBaseContract {\n  constructor(contractAddress) {\n    super(contractAddress, CONTRACT_ABI)\n  }\n  async getValues(keyArray) {\n    return await this._call('getValues', [keyArray])\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI={\"_format\":\"hh-sol-artifact-1\",\"contractName\":\"Vault\",\"sourceName\":\"contracts/Vault.sol\",\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"bytecode\":\"\",\"deployedBytecode\":\"\",\"linkReferences\":{},\"deployedLinkReferences\":{}}\n/* eslint-enable */\n\nexport class MiningVaultPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI['abi'], isProvider);\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI['abi'],\n    //   this.contractAddress\n    // );\n  }\n  async mintDToken(accountAddress, ...args) {\n    await this._init()\n    const gas = await this._estimatedGas(\n      'claim',\n      [accountAddress, ...args],\n      accountAddress\n    );\n    console.log(gas);\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods['claim'](\n          accountAddress,\n          ...args\n        ).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"miningVault_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v1\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s1\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v2\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s2\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class MiningVaultRouter extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, isProvider);\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n  async mint(accountAddress, ...args) {\n    await this._init()\n    //console.log(accountAddress, args)\n    const gas = await this._estimatedGas(\n      'claim',\n      [accountAddress, ...args],\n      accountAddress\n    );\n    //console.log(gas);\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods['claim'](\n          accountAddress,\n          ...args\n        ).encodeABI(),\n      },\n    ];\n    //console.log('txRaw', txRaw)\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import { deriToNatural, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"_sushi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sushiPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contractIERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSushi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSushiPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class SlpPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, isProvider);\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n  async addLiquidity(accountAddress, amount) {\n    const args = [152, naturalToDeri(amount)];\n    return await this._transact('deposit', args, accountAddress);\n  }\n  async removeLiquidity(accountAddress, amount) {\n    const args = [152, naturalToDeri(amount)];\n    return await this._transact('withdraw', args, accountAddress);\n  }\n  async getLiquidity(accountAddress) {\n    const res = await this._call('userInfo', [152, accountAddress]);\n    if (res && res.amount) {\n      return deriToNatural(res.amount);\n    } else {\n      console.log('the amount is not exist ');\n      return '0';\n    }\n  }\n}\n","import { deriToNatural, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removeAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[2]\",\"name\":\"addresses_\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"parameters_\",\"type\":\"uint256[2]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class ClpPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, isProvider);\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n  async addLiquidity(accountAddress, amount) {\n    const args = [naturalToDeri(amount)];\n    return await this._transact('addLiquidity', args, accountAddress);\n  }\n\n  async removeLiquidity(accountAddress, amount) {\n    const args = [naturalToDeri(amount)];\n    return await this._transact('removeLiquidity', args, accountAddress);\n  }\n\n  async getParameters() {\n    const res = await this._call('getParameters');\n    return {\n      minAddLiquidity: deriToNatural(res.minAddLiquidity),\n      redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\n    };\n  }\n\n  async getStateValues() {\n    const res = await this._call('getStateValues');\n    return {\n      liquidity: deriToNatural(res),\n    };\n  }\n\n  async getLiquidity() {\n    const res = await this._call('getStateValues');\n    if (res && res.liquidity) {\n      return deriToNatural(res.liquidity);\n    }\n    throw new Error(\n      `unable to get liquidity of this clp pool ${this.poolAddress}`\n    );\n  }\n}\n","import { deriToNatural, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[{\"internalType\":\"contract CakeToken\",\"name\":\"_cake\",\"type\":\"address\"},{\"internalType\":\"contract SyrupBar\",\"name\":\"_syrup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cakePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cake\",\"outputs\":[{\"internalType\":\"contract CakeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingCake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCakePerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syrup\",\"outputs\":[{\"internalType\":\"contract SyrupBar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplierNumber\",\"type\":\"uint256\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class Clp2Pool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, isProvider);\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n  async addLiquidity(accountAddress, amount) {\n    const args = [391, naturalToDeri(amount)];\n    return await this._transact('deposit', args, accountAddress);\n  }\n  async removeLiquidity(accountAddress, amount) {\n    const args = [391, naturalToDeri(amount)];\n    return await this._transact('withdraw', args, accountAddress);\n  }\n  async getLiquidity(accountAddress) {\n    //console.log('hit clp2')\n    const res = await this._call('userInfo', [391, accountAddress]);\n    if (res && res.amount) {\n      return deriToNatural(res.amount);\n    } else {\n      console.log('the amount is not exist ');\n      return '0';\n    }\n  }\n}","import { deriToNatural, MAX_VALUE, bg } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ChangeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DeriContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, useProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, useProvider);\n    this.poolAddress = poolAddress;\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n\n  async isUnlocked(accountAddress) {\n    let allowance = await this._call('allowance', [\n      accountAddress,\n      this.poolAddress,\n    ]);\n    return deriToNatural(allowance).gt(0);\n  }\n  async unlock(accountAddress) {\n    //!this.poolAddress && console.log('please do setAccount(poolAddress) first');\n    return await this._transact(\n      'approve',\n      [this.poolAddress, MAX_VALUE],\n      accountAddress\n    );\n  }\n\n  async decimals() {\n    return await this._call('decimals');\n  }\n\n  async _balance(address) {\n    return await this._call('balanceOf', [address]);\n  }\n\n  async balance(address) {\n    const [res, decimals] = await Promise.all([\n      this._balance(address),\n      this.decimals(),\n    ]);\n    return bg(res, -decimals);\n  }\n}\n","import { getDeriContractAddress, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowMintBurn_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowMintBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class WormholeContract extends Contract {\n  constructor(chainId, contractAddress, useProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, useProvider);\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n  async freeze(accountAddress, amount, toChainId) {\n    const { wormholeAddress: toWormholeAddress } = getDeriContractAddress(\n      toChainId\n    );\n    return this._transact(\n      'freeze',\n      [naturalToDeri(amount), toChainId, toWormholeAddress],\n      accountAddress\n    );\n  }\n\n  async mintDeri(\n    accountAddress,\n    amount,\n    fromChainId,\n    fromWormhole,\n    fromNonce,\n    v,\n    r,\n    s\n  ) {\n    return this._transact(\n      'claim',\n      [amount, fromChainId, fromWormhole, fromNonce, v, r, s],\n      accountAddress\n    );\n  }\n}\n","import { PerpetualPool } from '../contract/perpetual_pool';\nimport { BTokenContract } from '../contract/bToken';\nimport { PTokenContract } from '../contract/pToken';\nimport { LTokenContract } from '../contract/lToken';\nimport { DatabaseContract } from '../contract/database';\nimport { DatabaseWormholeContract } from '../contract/database_wormhole';\nimport { DatabaseAirdropContract } from '../contract/database_airdrop';\nimport { MiningVaultPool } from '../contract/mining_vault_pool';\nimport { MiningVaultRouter } from '../contract/mining_vault_router';\n\nimport { DeriEnv } from '../config/env';\nimport { getDBAddressConfig, getDBWormholeAddressConfig, getDBAirdropAddressConfig } from '../config';\nimport { SlpPool } from '../contract/slp_pool';\nimport { ClpPool } from '../contract/clp_pool';\nimport { Clp2Pool } from '../contract/clp2_pool';\nimport { DeriContract } from '../contract/deri';\nimport { WormholeContract } from '../contract/wormhole';\n//import { getLpContractAddress } from '../utils';\n// import { getPoolBaseSymbolList } from '../utils'\n\nexport const databaseFactory = (() => {\n  const databaseInstanceMap = {};\n  return (useProductionDB = false) => {\n    const address = getDBAddressConfig(DeriEnv.get(), useProductionDB);\n    const key = address;\n    if (Object.keys(databaseInstanceMap).includes(key)) {\n      return databaseInstanceMap[key];\n    }\n    const database = new DatabaseContract(address);\n    databaseInstanceMap[key] = database;\n    return database;\n  };\n})();\n\nexport const databaseWormholeFactory = (() => {\n  const databaseInstanceMap = {};\n  return (useProductionDB = false) => {\n    const address = getDBWormholeAddressConfig(DeriEnv.get(), useProductionDB);\n    const key = address;\n    if (Object.keys(databaseInstanceMap).includes(key)) {\n      return databaseInstanceMap[key];\n    }\n    const database = new DatabaseWormholeContract(address);\n    databaseInstanceMap[key] = database;\n    return database;\n  };\n})();\n\nexport const databaseAirdropFactory = (() => {\n  const databaseInstanceMap = {};\n  return (useProductionDB = false) => {\n    const address = getDBAirdropAddressConfig(DeriEnv.get(), useProductionDB);\n    const key = address;\n    //console.log('---airdrop key', key)\n    if (Object.keys(databaseInstanceMap).includes(key)) {\n      return databaseInstanceMap[key];\n    }\n    const database = new DatabaseAirdropContract(address);\n    databaseInstanceMap[key] = database;\n    return database;\n  };\n})();\n\nexport const perpetualPoolFactory = (() => {\n  const perpetualPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(perpetualPoolInstanceMap).includes(key)) {\n      return perpetualPoolInstanceMap[key];\n    }\n    const perpetualPool = new PerpetualPool(\n      chainId,\n      contractAddress,\n      isProvider\n    );\n    // console.log(\"new PerpetualPoolContract\");\n    perpetualPoolInstanceMap[key] = perpetualPool;\n    return perpetualPool;\n  };\n})();\n\nexport const bTokenFactory = (function () {\n  const bTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(bTokenInstanceMap).includes(key)) {\n      return bTokenInstanceMap[key];\n    }\n    const bToken = new BTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new BTokenContract\")\n    bTokenInstanceMap[key] = bToken;\n    return bToken;\n  };\n})();\n\nexport const pTokenFactory = (function () {\n  const pTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(pTokenInstanceMap).includes(key)) {\n      return pTokenInstanceMap[key];\n    }\n    const pToken = new PTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new PTokenContract\")\n    pTokenInstanceMap[key] = pToken;\n    return pToken;\n  };\n})();\n\nexport const lTokenFactory = (function () {\n  const lTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(lTokenInstanceMap).includes(key)) {\n      return lTokenInstanceMap[key];\n    }\n    const lToken = new LTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new LTokenContract\")\n    lTokenInstanceMap[key] = lToken;\n    return lToken;\n  };\n})();\n\nexport const miningVaultPoolFactory = (function () {\n  const mVaultInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(mVaultInstanceMap).includes(key)) {\n      return mVaultInstanceMap[key];\n    }\n    const mVault = new MiningVaultPool(chainId, contractAddress, isProvider);\n    // console.log(\"new MiningValutPool\")\n    mVaultInstanceMap[key] = mVault;\n    return mVault;\n  };\n})();\n\nexport const slpPoolFactory = (function () {\n  const slpPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(slpPoolInstanceMap).includes(key)) {\n      return slpPoolInstanceMap[key];\n    }\n    const slpPool = new SlpPool(chainId, contractAddress, isProvider);\n    slpPoolInstanceMap[key] = slpPool;\n    return slpPool;\n  };\n})();\n\nexport const clpPoolFactory = (function () {\n  const clpPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(clpPoolInstanceMap).includes(key)) {\n      return clpPoolInstanceMap[key];\n    }\n    const clpPool = new ClpPool(chainId, contractAddress, isProvider);\n    clpPoolInstanceMap[key] = clpPool;\n    return clpPool;\n  };\n})();\n\nexport const clp2PoolFactory = (function () {\n  const clp2PoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(clp2PoolInstanceMap).includes(key)) {\n      return clp2PoolInstanceMap[key];\n    }\n    const clp2Pool = new Clp2Pool(chainId, contractAddress, isProvider);\n    clp2PoolInstanceMap[key] = clp2Pool;\n    return clp2Pool;\n  };\n})();\n\n// export const lpPoolFactory = (function () {\n//   const lpPoolInstanceMap = {};\n//   return (chainId, contractAddress, isProvider = false) => {\n//     let key;\n//     if (isProvider) {\n//       key = `${chainId}.${contractAddress}.isProvider`;\n//     } else {\n//       key = `${chainId}.${contractAddress}`;\n//     }\n//     if (Object.keys(lpPoolInstanceMap).includes(key)) {\n//       return lpPoolInstanceMap[key];\n//     } else {\n//       let lpPool;\n//       const { type } = getLpContractAddress(chainId, contractAddress);\n//       console.log(`lp type: ${type}`);\n//       if (type === 'slp') {\n//         lpPool = new SlpPool(chainId, contractAddress, isProvider);\n//       } else if (type === 'clp') {\n//         lpPool = new ClpPool(chainId, contractAddress, isProvider);\n//       }\n//       lpPoolInstanceMap[key] = lpPool;\n//       return lpPool;\n//     }\n//   };\n// })();\n\nexport const deriFactory = (function () {\n  const deriInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(deriInstanceMap).includes(key)) {\n      return deriInstanceMap[key];\n    }\n    const deri = new DeriContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    deriInstanceMap[key] = deri;\n    return deri;\n  };\n})();\n\nexport const wormholeFactory = (function () {\n  const wormholeInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(wormholeInstanceMap).includes(key)) {\n      return wormholeInstanceMap[key];\n    }\n    const wormhole = new WormholeContract(chainId, contractAddress, isProvider);\n    wormholeInstanceMap[key] = wormhole;\n    return wormhole;\n  };\n})();\n\nexport const miningVaultRouterFactory = (function () {\n  const mVaultInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(mVaultInstanceMap).includes(key)) {\n      return mVaultInstanceMap[key];\n    }\n    const mVault = new MiningVaultRouter(chainId, contractAddress, isProvider);\n    mVaultInstanceMap[key] = mVault;\n    return mVault;\n  };\n})();\n","import { getChainIds } from '../config/chain';\nimport Web3 from 'web3';\n\n// validate\nexport const normalizeChainId = (chainId) => {\n  const chainIds = getChainIds()\n  let res = chainId ? chainId.toString() : chainId;\n  if (chainId && chainIds.includes(res)) {\n    return res;\n  } else {\n    throw new Error(`invalid chainId: ${chainId}`);\n  }\n};\n\nexport const normalizeAddress = (address) => {\n  if (address && typeof address === 'string' && address.startsWith('0x')) {\n    return Web3.utils.toChecksumAddress(address);\n  } else {\n    throw new Error(`invalid address: ${address}`);\n  }\n};\n\nexport const validateArgs = (...args) =>\n  args.every((i) => !isNaN(parseFloat(i)));\n\nexport const validateObjectKeyExist = (keyList, val, valName) => {\n  const keys = Object.keys(val);\n  keyList.forEach((prop) => {\n    if (!keys.includes(prop)) {\n      throw new Error(\n        `validateConfig(): property ${prop} is not exist in the ${valName} config.`\n      );\n    }\n  });\n};\nexport const validateIsArray = (val, valName) => {\n  if (!Array.isArray(val)) {\n    throw new Error(\n      `validateConfig(): property ${valName} is an array in the config.`\n    );\n  }\n};\n","// export const DERI_ENV=\"dev\"\nexport const DeriEnv = (() => {\n  let _deriEnv = 'dev';\n  return {\n    get: () => _deriEnv,\n    set: (value) => {\n      if (value === 'dev' || value === 'prod' || value === 'production') {\n        _deriEnv = value;\n      } else {\n        throw new Error(\"please use 'dev' or 'prod' for DeriEnv\");\n      }\n    },\n  };\n})();\n"],"sourceRoot":""}